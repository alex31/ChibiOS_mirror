
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080003b9 	.word	0x080003b9
 8000008:	080003bb 	.word	0x080003bb
 800000c:	080003bb 	.word	0x080003bb
 8000010:	080003bb 	.word	0x080003bb
 8000014:	080003bb 	.word	0x080003bb
 8000018:	080003bb 	.word	0x080003bb
 800001c:	080003bb 	.word	0x080003bb
 8000020:	080003bb 	.word	0x080003bb
 8000024:	080003bb 	.word	0x080003bb
 8000028:	080003bb 	.word	0x080003bb
 800002c:	08004911 	.word	0x08004911
 8000030:	080003bb 	.word	0x080003bb
 8000034:	080003bb 	.word	0x080003bb
 8000038:	080003bb 	.word	0x080003bb
 800003c:	080003bb 	.word	0x080003bb
 8000040:	080003bb 	.word	0x080003bb
 8000044:	080003bb 	.word	0x080003bb
 8000048:	080003bb 	.word	0x080003bb
 800004c:	080003bb 	.word	0x080003bb
 8000050:	080003bb 	.word	0x080003bb
 8000054:	080003bb 	.word	0x080003bb
 8000058:	080003bb 	.word	0x080003bb
 800005c:	080003bb 	.word	0x080003bb
 8000060:	080003bb 	.word	0x080003bb
 8000064:	080003bb 	.word	0x080003bb
 8000068:	080003bb 	.word	0x080003bb
 800006c:	080003bb 	.word	0x080003bb
 8000070:	080003bb 	.word	0x080003bb
 8000074:	080003bb 	.word	0x080003bb
 8000078:	080003bb 	.word	0x080003bb
 800007c:	080003bb 	.word	0x080003bb
 8000080:	080003bb 	.word	0x080003bb
 8000084:	080003bb 	.word	0x080003bb
 8000088:	080003bb 	.word	0x080003bb
 800008c:	080013b1 	.word	0x080013b1
 8000090:	080013f1 	.word	0x080013f1
 8000094:	080003bb 	.word	0x080003bb
 8000098:	080003bb 	.word	0x080003bb
 800009c:	080003bb 	.word	0x080003bb
 80000a0:	080003bb 	.word	0x080003bb
 80000a4:	080003bb 	.word	0x080003bb
 80000a8:	080003bb 	.word	0x080003bb
 80000ac:	080003bb 	.word	0x080003bb
 80000b0:	08001561 	.word	0x08001561
 80000b4:	080003bb 	.word	0x080003bb
 80000b8:	080003bb 	.word	0x080003bb
 80000bc:	080003bb 	.word	0x080003bb
 80000c0:	080003bb 	.word	0x080003bb
 80000c4:	080003bb 	.word	0x080003bb
 80000c8:	080003bb 	.word	0x080003bb
 80000cc:	080003bb 	.word	0x080003bb
 80000d0:	080003bb 	.word	0x080003bb
 80000d4:	080003bb 	.word	0x080003bb
 80000d8:	080003bb 	.word	0x080003bb
 80000dc:	08001491 	.word	0x08001491
 80000e0:	080003bb 	.word	0x080003bb
 80000e4:	080003bb 	.word	0x080003bb
 80000e8:	080003bb 	.word	0x080003bb
 80000ec:	080003bb 	.word	0x080003bb
 80000f0:	080003bb 	.word	0x080003bb
 80000f4:	080003bb 	.word	0x080003bb
 80000f8:	080003bb 	.word	0x080003bb
 80000fc:	080003bb 	.word	0x080003bb
 8000100:	080003bb 	.word	0x080003bb
 8000104:	080003bb 	.word	0x080003bb
 8000108:	080003bb 	.word	0x080003bb
 800010c:	080003bb 	.word	0x080003bb
 8000110:	080003bb 	.word	0x080003bb
 8000114:	080003bb 	.word	0x080003bb
 8000118:	080003bb 	.word	0x080003bb
 800011c:	080003bb 	.word	0x080003bb
 8000120:	080003bb 	.word	0x080003bb
 8000124:	080003bb 	.word	0x080003bb
 8000128:	080003bb 	.word	0x080003bb
 800012c:	080003bb 	.word	0x080003bb
 8000130:	080003bb 	.word	0x080003bb
 8000134:	080003bb 	.word	0x080003bb
 8000138:	080003bb 	.word	0x080003bb
 800013c:	080003bb 	.word	0x080003bb
 8000140:	080003bb 	.word	0x080003bb
 8000144:	080003bb 	.word	0x080003bb
 8000148:	080003bb 	.word	0x080003bb
 800014c:	080003bb 	.word	0x080003bb
 8000150:	080003bb 	.word	0x080003bb
 8000154:	080003bb 	.word	0x080003bb
 8000158:	080003bb 	.word	0x080003bb
 800015c:	080003bb 	.word	0x080003bb
 8000160:	080003bb 	.word	0x080003bb
 8000164:	080003bb 	.word	0x080003bb
 8000168:	080003bb 	.word	0x080003bb
 800016c:	080003bb 	.word	0x080003bb
 8000170:	080003bb 	.word	0x080003bb
 8000174:	080003bb 	.word	0x080003bb
 8000178:	080003bb 	.word	0x080003bb
 800017c:	080003bb 	.word	0x080003bb
 8000180:	080003bb 	.word	0x080003bb
 8000184:	080003bb 	.word	0x080003bb
 8000188:	080003bb 	.word	0x080003bb
 800018c:	080003bb 	.word	0x080003bb
 8000190:	080003bb 	.word	0x080003bb
 8000194:	080003bb 	.word	0x080003bb
 8000198:	080003bb 	.word	0x080003bb
 800019c:	080003bb 	.word	0x080003bb
 80001a0:	080003bb 	.word	0x080003bb
 80001a4:	080003bb 	.word	0x080003bb
 80001a8:	080003bb 	.word	0x080003bb
 80001ac:	080003bb 	.word	0x080003bb
 80001b0:	080003bb 	.word	0x080003bb
 80001b4:	080003bb 	.word	0x080003bb
 80001b8:	080003bb 	.word	0x080003bb
 80001bc:	080003bb 	.word	0x080003bb
 80001c0:	080003bb 	.word	0x080003bb
 80001c4:	080003bb 	.word	0x080003bb
 80001c8:	080003bb 	.word	0x080003bb
 80001cc:	080003bb 	.word	0x080003bb
 80001d0:	080003bb 	.word	0x080003bb
 80001d4:	080003bb 	.word	0x080003bb
 80001d8:	080003bb 	.word	0x080003bb
 80001dc:	080003bb 	.word	0x080003bb
 80001e0:	080003bb 	.word	0x080003bb
 80001e4:	080003bb 	.word	0x080003bb
 80001e8:	080003bb 	.word	0x080003bb
 80001ec:	080003bb 	.word	0x080003bb
 80001f0:	080003bb 	.word	0x080003bb
 80001f4:	080003bb 	.word	0x080003bb
 80001f8:	080003bb 	.word	0x080003bb
 80001fc:	080003bb 	.word	0x080003bb
 8000200:	080003bb 	.word	0x080003bb
 8000204:	080003bb 	.word	0x080003bb
 8000208:	080003bb 	.word	0x080003bb
 800020c:	080003bb 	.word	0x080003bb
 8000210:	080003bb 	.word	0x080003bb
 8000214:	080003bb 	.word	0x080003bb
 8000218:	080003bb 	.word	0x080003bb
 800021c:	080003bb 	.word	0x080003bb
 8000220:	080003bb 	.word	0x080003bb
 8000224:	080003bb 	.word	0x080003bb
 8000228:	080003bb 	.word	0x080003bb
 800022c:	080003bb 	.word	0x080003bb
 8000230:	080003bb 	.word	0x080003bb
 8000234:	080003bb 	.word	0x080003bb
 8000238:	080003bb 	.word	0x080003bb
 800023c:	080003bb 	.word	0x080003bb
 8000240:	080003bb 	.word	0x080003bb
 8000244:	080003bb 	.word	0x080003bb
 8000248:	080003bb 	.word	0x080003bb
 800024c:	080003bb 	.word	0x080003bb
 8000250:	080003bb 	.word	0x080003bb
 8000254:	080003bb 	.word	0x080003bb
 8000258:	080003bb 	.word	0x080003bb
 800025c:	080003bb 	.word	0x080003bb
 8000260:	080003bb 	.word	0x080003bb
 8000264:	080003bb 	.word	0x080003bb
 8000268:	080003bb 	.word	0x080003bb
 800026c:	080003bb 	.word	0x080003bb
 8000270:	080003bb 	.word	0x080003bb
 8000274:	080003bb 	.word	0x080003bb
 8000278:	080003bb 	.word	0x080003bb
 800027c:	080003bb 	.word	0x080003bb
 8000280:	080003bb 	.word	0x080003bb
 8000284:	080003bb 	.word	0x080003bb
 8000288:	080003bb 	.word	0x080003bb
 800028c:	080003bb 	.word	0x080003bb
 8000290:	080003bb 	.word	0x080003bb
 8000294:	080003bb 	.word	0x080003bb
 8000298:	080003bb 	.word	0x080003bb
 800029c:	080003bb 	.word	0x080003bb
 80002a0:	080003bb 	.word	0x080003bb
 80002a4:	080003bb 	.word	0x080003bb
 80002a8:	080003bb 	.word	0x080003bb
 80002ac:	080003bb 	.word	0x080003bb
 80002b0:	080003bb 	.word	0x080003bb
 80002b4:	080003bb 	.word	0x080003bb
 80002b8:	080003bb 	.word	0x080003bb
 80002bc:	080003bb 	.word	0x080003bb
 80002c0:	080003bb 	.word	0x080003bb
 80002c4:	080003bb 	.word	0x080003bb
 80002c8:	080003bb 	.word	0x080003bb
 80002cc:	080003bb 	.word	0x080003bb
 80002d0:	080003bb 	.word	0x080003bb
 80002d4:	080003bb 	.word	0x080003bb
 80002d8:	080003bb 	.word	0x080003bb
 80002dc:	080003bb 	.word	0x080003bb

Disassembly of section .text:

080002e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80002e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80002e2:	4826      	ldr	r0, [pc, #152]	@ (800037c <endfiniloop+0x6>)
                msr     MSP, r0
 80002e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80002e8:	4825      	ldr	r0, [pc, #148]	@ (8000380 <endfiniloop+0xa>)
                msr     PSP, r0
 80002ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80002ee:	4825      	ldr	r0, [pc, #148]	@ (8000384 <endfiniloop+0xe>)
                ldr     r1, =SCB_VTOR
 80002f0:	4925      	ldr	r1, [pc, #148]	@ (8000388 <endfiniloop+0x12>)
                str     r0, [r1]
 80002f2:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80002f4:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80002f6:	f380 8814 	msr	CONTROL, r0
                isb
 80002fa:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 80002fe:	f000 f937 	bl	8000570 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000302:	f002 fd95 	bl	8002e30 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000306:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800030a:	4920      	ldr	r1, [pc, #128]	@ (800038c <endfiniloop+0x16>)
                ldr     r2, =__main_stack_end__
 800030c:	4a1b      	ldr	r2, [pc, #108]	@ (800037c <endfiniloop+0x6>)

0800030e <msloop>:
msloop:
                cmp     r1, r2
 800030e:	4291      	cmp	r1, r2
                itt     lo
 8000310:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000312:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000316:	e7fa      	bcc.n	800030e <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000318:	491d      	ldr	r1, [pc, #116]	@ (8000390 <endfiniloop+0x1a>)
                ldr     r2, =__process_stack_end__
 800031a:	4a19      	ldr	r2, [pc, #100]	@ (8000380 <endfiniloop+0xa>)

0800031c <psloop>:
psloop:
                cmp     r1, r2
 800031c:	4291      	cmp	r1, r2
                itt     lo
 800031e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000320:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 8000324:	e7fa      	bcc.n	800031c <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 8000326:	491b      	ldr	r1, [pc, #108]	@ (8000394 <endfiniloop+0x1e>)
                ldr     r2, =__data_base__
 8000328:	4a1b      	ldr	r2, [pc, #108]	@ (8000398 <endfiniloop+0x22>)
                ldr     r3, =__data_end__
 800032a:	4b1c      	ldr	r3, [pc, #112]	@ (800039c <endfiniloop+0x26>)

0800032c <dloop>:
dloop:
                cmp     r2, r3
 800032c:	429a      	cmp	r2, r3
                ittt    lo
 800032e:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000330:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000334:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000338:	e7f8      	bcc.n	800032c <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 800033a:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 800033c:	4918      	ldr	r1, [pc, #96]	@ (80003a0 <endfiniloop+0x2a>)
                ldr     r2, =__bss_end__
 800033e:	4a19      	ldr	r2, [pc, #100]	@ (80003a4 <endfiniloop+0x2e>)

08000340 <bloop>:
bloop:
                cmp     r1, r2
 8000340:	4291      	cmp	r1, r2
                itt     lo
 8000342:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000344:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000348:	e7fa      	bcc.n	8000340 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 800034a:	f000 f929 	bl	80005a0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 800034e:	f000 f917 	bl	8000580 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000352:	4c15      	ldr	r4, [pc, #84]	@ (80003a8 <endfiniloop+0x32>)
                ldr     r5, =__init_array_end__
 8000354:	4d15      	ldr	r5, [pc, #84]	@ (80003ac <endfiniloop+0x36>)

08000356 <initloop>:
initloop:
                cmp     r4, r5
 8000356:	42ac      	cmp	r4, r5
                bge     endinitloop
 8000358:	da03      	bge.n	8000362 <endinitloop>
                ldr     r1, [r4], #4
 800035a:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800035e:	4788      	blx	r1
                b       initloop
 8000360:	e7f9      	b.n	8000356 <initloop>

08000362 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000362:	f004 fc2d 	bl	8004bc0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 8000366:	4c12      	ldr	r4, [pc, #72]	@ (80003b0 <endfiniloop+0x3a>)
                ldr     r5, =__fini_array_end__
 8000368:	4d12      	ldr	r5, [pc, #72]	@ (80003b4 <endfiniloop+0x3e>)

0800036a <finiloop>:
finiloop:
                cmp     r4, r5
 800036a:	42ac      	cmp	r4, r5
                bge     endfiniloop
 800036c:	da03      	bge.n	8000376 <endfiniloop>
                ldr     r1, [r4], #4
 800036e:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000372:	4788      	blx	r1
                b       finiloop
 8000374:	e7f9      	b.n	800036a <finiloop>

08000376 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 8000376:	f000 b90b 	b.w	8000590 <__default_exit>
 800037a:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 800037c:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000380:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000384:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 8000388:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 800038c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000390:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000394:	08004ef4 	.word	0x08004ef4
                ldr     r2, =__data_base__
 8000398:	24000000 	.word	0x24000000
                ldr     r3, =__data_end__
 800039c:	24000000 	.word	0x24000000
                ldr     r1, =__bss_base__
 80003a0:	24000000 	.word	0x24000000
                ldr     r2, =__bss_end__
 80003a4:	24001200 	.word	0x24001200
                ldr     r4, =__init_array_base__
 80003a8:	080002e0 	.word	0x080002e0
                ldr     r5, =__init_array_end__
 80003ac:	080002e0 	.word	0x080002e0
                ldr     r4, =__fini_array_base__
 80003b0:	080002e0 	.word	0x080002e0
                ldr     r5, =__fini_array_end__
 80003b4:	080002e0 	.word	0x080002e0

080003b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80003b8:	e792      	b.n	80002e0 <_crt0_entry>

080003ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80003ba:	f000 f800 	bl	80003be <_unhandled_exception>

080003be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80003be:	e7fe      	b.n	80003be <_unhandled_exception>

080003c0 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80003c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80003c4:	f8c1 d00c 	str.w	sp, [r1, #12]
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
                mov     sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
 80003c8:	f8d0 d00c 	ldr.w	sp, [r0, #12]

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80003cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003d0 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80003d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80003d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80003d6:	4628      	mov	r0, r5
                blx     r4
 80003d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80003da:	2000      	movs	r0, #0
                bl      chThdExit
 80003dc:	f003 ff00 	bl	80041e0 <chThdExit>

080003e0 <.zombies>:
.zombies:       b       .zombies
 80003e0:	e7fe      	b.n	80003e0 <.zombies>

080003e2 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 80003e2:	f003 fc55 	bl	8003c90 <chSchDoPreemption>

080003e6 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80003e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80003e8:	e7fe      	b.n	80003e8 <__port_exit_from_isr+0x2>

080003ea <memcpy>:
 80003ea:	440a      	add	r2, r1
 80003ec:	4291      	cmp	r1, r2
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80003f2:	d100      	bne.n	80003f6 <memcpy+0xc>
 80003f4:	4770      	bx	lr
 80003f6:	b510      	push	{r4, lr}
 80003f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80003fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000400:	4291      	cmp	r1, r2
 8000402:	d1f9      	bne.n	80003f8 <memcpy+0xe>
 8000404:	bd10      	pop	{r4, pc}
	...

08000410 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000410:	f3bf 8f4f 	dsb	sy
}
 8000414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000416:	f3bf 8f6f 	isb	sy
}
 800041a:	bf00      	nop
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800041c:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <SCB_EnableICache+0x3c>)
 800041e:	2200      	movs	r2, #0
 8000420:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000424:	f3bf 8f4f 	dsb	sy
}
 8000428:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800042a:	f3bf 8f6f 	isb	sy
}
 800042e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000430:	4b06      	ldr	r3, [pc, #24]	@ (800044c <SCB_EnableICache+0x3c>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a05      	ldr	r2, [pc, #20]	@ (800044c <SCB_EnableICache+0x3c>)
 8000436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800043a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800043c:	f3bf 8f4f 	dsb	sy
}
 8000440:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000442:	f3bf 8f6f 	isb	sy
}
 8000446:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000448:	bf00      	nop
 800044a:	4770      	bx	lr
 800044c:	e000ed00 	.word	0xe000ed00

08000450 <SCB_InvalidateICache>:
  __ASM volatile ("dsb 0xF":::"memory");
 8000450:	f3bf 8f4f 	dsb	sy
}
 8000454:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000456:	f3bf 8f6f 	isb	sy
}
 800045a:	bf00      	nop
__STATIC_INLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 800045c:	4b05      	ldr	r3, [pc, #20]	@ (8000474 <SCB_InvalidateICache+0x24>)
 800045e:	2200      	movs	r2, #0
 8000460:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000464:	f3bf 8f4f 	dsb	sy
}
 8000468:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800046a:	f3bf 8f6f 	isb	sy
}
 800046e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000470:	bf00      	nop
 8000472:	4770      	bx	lr
 8000474:	e000ed00 	.word	0xe000ed00
	...

08000480 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000480:	b084      	sub	sp, #16
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000482:	4b1e      	ldr	r3, [pc, #120]	@ (80004fc <SCB_EnableDCache+0x7c>)
 8000484:	2200      	movs	r2, #0
 8000486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800048a:	f3bf 8f4f 	dsb	sy
}
 800048e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000490:	4b1a      	ldr	r3, [pc, #104]	@ (80004fc <SCB_EnableDCache+0x7c>)
 8000492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000496:	9301      	str	r3, [sp, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	0b5b      	lsrs	r3, r3, #13
 800049c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004a0:	9303      	str	r3, [sp, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004a2:	9b01      	ldr	r3, [sp, #4]
 80004a4:	08db      	lsrs	r3, r3, #3
 80004a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004aa:	9302      	str	r3, [sp, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004ac:	9b03      	ldr	r3, [sp, #12]
 80004ae:	015a      	lsls	r2, r3, #5
 80004b0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80004b4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80004b6:	9a02      	ldr	r2, [sp, #8]
 80004b8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004ba:	4910      	ldr	r1, [pc, #64]	@ (80004fc <SCB_EnableDCache+0x7c>)
 80004bc:	4313      	orrs	r3, r2
 80004be:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004c2:	9b02      	ldr	r3, [sp, #8]
 80004c4:	1e5a      	subs	r2, r3, #1
 80004c6:	9202      	str	r2, [sp, #8]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d1ef      	bne.n	80004ac <SCB_EnableDCache+0x2c>
    } while(sets-- != 0U);
 80004cc:	9b03      	ldr	r3, [sp, #12]
 80004ce:	1e5a      	subs	r2, r3, #1
 80004d0:	9203      	str	r2, [sp, #12]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d1e5      	bne.n	80004a2 <SCB_EnableDCache+0x22>
  __ASM volatile ("dsb 0xF":::"memory");
 80004d6:	f3bf 8f4f 	dsb	sy
}
 80004da:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004dc:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <SCB_EnableDCache+0x7c>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a06      	ldr	r2, [pc, #24]	@ (80004fc <SCB_EnableDCache+0x7c>)
 80004e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004e8:	f3bf 8f4f 	dsb	sy
}
 80004ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004ee:	f3bf 8f6f 	isb	sy
}
 80004f2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80004f4:	bf00      	nop
 80004f6:	b004      	add	sp, #16
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <SCB_CleanDCache>:
/**
  \brief   Clean D-Cache
  \details Cleans D-Cache
  */
__STATIC_INLINE void SCB_CleanDCache (void)
{
 8000500:	b084      	sub	sp, #16
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000502:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <SCB_CleanDCache+0x68>)
 8000504:	2200      	movs	r2, #0
 8000506:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800050a:	f3bf 8f4f 	dsb	sy
}
 800050e:	bf00      	nop
   __DSB();

    ccsidr = SCB->CCSIDR;
 8000510:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <SCB_CleanDCache+0x68>)
 8000512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000516:	9301      	str	r3, [sp, #4]

                                            /* clean D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	0b5b      	lsrs	r3, r3, #13
 800051c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000520:	9303      	str	r3, [sp, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000522:	9b01      	ldr	r3, [sp, #4]
 8000524:	08db      	lsrs	r3, r3, #3
 8000526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800052a:	9302      	str	r3, [sp, #8]
      do {
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 800052c:	9b03      	ldr	r3, [sp, #12]
 800052e:	015a      	lsls	r2, r3, #5
 8000530:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000534:	4013      	ands	r3, r2
                      ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
 8000536:	9a02      	ldr	r2, [sp, #8]
 8000538:	0792      	lsls	r2, r2, #30
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 800053a:	490b      	ldr	r1, [pc, #44]	@ (8000568 <SCB_CleanDCache+0x68>)
 800053c:	4313      	orrs	r3, r2
 800053e:	f8c1 326c 	str.w	r3, [r1, #620]	@ 0x26c
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000542:	9b02      	ldr	r3, [sp, #8]
 8000544:	1e5a      	subs	r2, r3, #1
 8000546:	9202      	str	r2, [sp, #8]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d1ef      	bne.n	800052c <SCB_CleanDCache+0x2c>
    } while(sets-- != 0U);
 800054c:	9b03      	ldr	r3, [sp, #12]
 800054e:	1e5a      	subs	r2, r3, #1
 8000550:	9203      	str	r2, [sp, #12]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d1e5      	bne.n	8000522 <SCB_CleanDCache+0x22>
  __ASM volatile ("dsb 0xF":::"memory");
 8000556:	f3bf 8f4f 	dsb	sy
}
 800055a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055c:	f3bf 8f6f 	isb	sy
}
 8000560:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000562:	bf00      	nop
 8000564:	b004      	add	sp, #16
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00
 800056c:	00000000 	.word	0x00000000

08000570 <__cpu_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __cpu_init(void) {
 8000570:	b508      	push	{r3, lr}

#if CORTEX_MODEL == 7
  SCB_EnableICache();
 8000572:	f7ff ff4d 	bl	8000410 <SCB_EnableICache>
  SCB_EnableDCache();
 8000576:	f7ff ff83 	bl	8000480 <SCB_EnableDCache>
#endif
}
 800057a:	bf00      	nop
 800057c:	bd08      	pop	{r3, pc}
 800057e:	bf00      	nop

08000580 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000580:	bf00      	nop
 8000582:	4770      	bx	lr
	...

08000590 <__default_exit>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
     asm volatile ("nop");
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <__default_exit>
	...

080005a0 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80005a0:	b500      	push	{lr}
 80005a2:	b085      	sub	sp, #20
#if CRT0_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 80005a4:	4b19      	ldr	r3, [pc, #100]	@ (800060c <__init_ram_areas+0x6c>)
 80005a6:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 80005a8:	9b03      	ldr	r3, [sp, #12]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 80005ae:	9b03      	ldr	r3, [sp, #12]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	9301      	str	r3, [sp, #4]

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 80005b4:	e009      	b.n	80005ca <__init_ram_areas+0x2a>
      *p = *tp;
 80005b6:	9b02      	ldr	r3, [sp, #8]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	9b01      	ldr	r3, [sp, #4]
 80005bc:	601a      	str	r2, [r3, #0]
      p++;
 80005be:	9b01      	ldr	r3, [sp, #4]
 80005c0:	3304      	adds	r3, #4
 80005c2:	9301      	str	r3, [sp, #4]
      tp++;
 80005c4:	9b02      	ldr	r3, [sp, #8]
 80005c6:	3304      	adds	r3, #4
 80005c8:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
 80005ca:	9b03      	ldr	r3, [sp, #12]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	9a01      	ldr	r2, [sp, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d3f0      	bcc.n	80005b6 <__init_ram_areas+0x16>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80005d4:	e005      	b.n	80005e2 <__init_ram_areas+0x42>
      *p = 0;
 80005d6:	9b01      	ldr	r3, [sp, #4]
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
      p++;
 80005dc:	9b01      	ldr	r3, [sp, #4]
 80005de:	3304      	adds	r3, #4
 80005e0:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
 80005e2:	9b03      	ldr	r3, [sp, #12]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	9a01      	ldr	r2, [sp, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d3f4      	bcc.n	80005d6 <__init_ram_areas+0x36>
    }
    rap++;
 80005ec:	9b03      	ldr	r3, [sp, #12]
 80005ee:	3310      	adds	r3, #16
 80005f0:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 80005f2:	9b03      	ldr	r3, [sp, #12]
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <__init_ram_areas+0x70>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d3d6      	bcc.n	80005a8 <__init_ram_areas+0x8>
#if CORTEX_MODEL == 7
  /* PM0253 - 4.8.7 Cache maintenance design hints and tips - required
     for self-modifying code.*/
  SCB_CleanDCache();
 80005fa:	f7ff ff81 	bl	8000500 <SCB_CleanDCache>
  SCB_InvalidateICache();
 80005fe:	f7ff ff27 	bl	8000450 <SCB_InvalidateICache>
#endif
#endif
}
 8000602:	bf00      	nop
 8000604:	b005      	add	sp, #20
 8000606:	f85d fb04 	ldr.w	pc, [sp], #4
 800060a:	bf00      	nop
 800060c:	08004c44 	.word	0x08004c44
 8000610:	08004cc4 	.word	0x08004cc4
	...

08000620 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 8000620:	bf00      	nop
 8000622:	4770      	bx	lr
	...

08000630 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8000630:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8000632:	f7ff fff5 	bl	8000620 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8000636:	f001 fa4b 	bl	8001ad0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 800063a:	f002 f8f1 	bl	8002820 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 800063e:	f000 fc1f 	bl	8000e80 <canInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 8000642:	f000 fdd5 	bl	80011f0 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8000646:	f002 fbfb 	bl	8002e40 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800064a:	f000 f841 	bl	80006d0 <stInit>
#endif
}
 800064e:	bf00      	nop
 8000650:	bd08      	pop	{r3, pc}
 8000652:	bf00      	nop
	...

08000660 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000660:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000666:	4618      	mov	r0, r3
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	0000      	movs	r0, r0
	...

08000670 <st_lld_start_alarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {
 8000670:	b082      	sub	sp, #8
 8000672:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000674:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000678:	9b01      	ldr	r3, [sp, #4]
 800067a:	6353      	str	r3, [r2, #52]	@ 0x34
  STM32_ST_TIM->SR     = 0;
 800067c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000684:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000688:	2202      	movs	r2, #2
 800068a:	60da      	str	r2, [r3, #12]
#else
  STM32_ST_TIM->DIER  |= STM32_TIM_DIER_CC1IE;
#endif
}
 800068c:	bf00      	nop
 800068e:	b002      	add	sp, #8
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
	...

080006a0 <st_lld_stop_alarm>:
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 80006a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
#else
 STM32_ST_TIM->DIER &= ~STM32_TIM_DIER_CC1IE;
#endif
}
 80006a8:	bf00      	nop
 80006aa:	4770      	bx	lr
 80006ac:	0000      	movs	r0, r0
	...

080006b0 <st_lld_set_alarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {
 80006b0:	b082      	sub	sp, #8
 80006b2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80006b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006b8:	9b01      	ldr	r3, [sp, #4]
 80006ba:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80006bc:	bf00      	nop
 80006be:	b002      	add	sp, #8
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
	...

080006d0 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 80006d0:	b508      	push	{r3, lr}

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
 80006d2:	f002 f915 	bl	8002900 <st_lld_init>
}
 80006d6:	bf00      	nop
 80006d8:	bd08      	pop	{r3, pc}
 80006da:	bf00      	nop
 80006dc:	0000      	movs	r0, r0
	...

080006e0 <stGetCounter>:
 *
 * @return              The counter value.
 *
 * @api
 */
systime_t stGetCounter(void) {
 80006e0:	b508      	push	{r3, lr}

  return st_lld_get_counter();
 80006e2:	f7ff ffbd 	bl	8000660 <st_lld_get_counter>
 80006e6:	4603      	mov	r3, r0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	bd08      	pop	{r3, pc}
 80006ec:	0000      	movs	r0, r0
	...

080006f0 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 80006f0:	b500      	push	{lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
 80006f6:	9801      	ldr	r0, [sp, #4]
 80006f8:	f7ff ffba 	bl	8000670 <st_lld_start_alarm>
}
 80006fc:	bf00      	nop
 80006fe:	b003      	add	sp, #12
 8000700:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000710 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 8000710:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
 8000712:	f7ff ffc5 	bl	80006a0 <st_lld_stop_alarm>
}
 8000716:	bf00      	nop
 8000718:	bd08      	pop	{r3, pc}
 800071a:	bf00      	nop
 800071c:	0000      	movs	r0, r0
	...

08000720 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000720:	b500      	push	{lr}
 8000722:	b083      	sub	sp, #12
 8000724:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
 8000726:	9801      	ldr	r0, [sp, #4]
 8000728:	f7ff ffc2 	bl	80006b0 <st_lld_set_alarm>
}
 800072c:	bf00      	nop
 800072e:	b003      	add	sp, #12
 8000730:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000740 <ch_queue_init.lto_priv.1>:
 *
 * @param[out] qp       pointer to the queue header
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {
 8000740:	b082      	sub	sp, #8
 8000742:	9001      	str	r0, [sp, #4]

  qp->next = qp;
 8000744:	9b01      	ldr	r3, [sp, #4]
 8000746:	9a01      	ldr	r2, [sp, #4]
 8000748:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800074a:	9b01      	ldr	r3, [sp, #4]
 800074c:	9a01      	ldr	r2, [sp, #4]
 800074e:	605a      	str	r2, [r3, #4]
}
 8000750:	bf00      	nop
 8000752:	b002      	add	sp, #8
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
	...

08000760 <chSysLock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to disabling interrupts.
 *
 * @special
 */
static inline void chSysLock(void) {
 8000760:	b082      	sub	sp, #8
 8000762:	2330      	movs	r3, #48	@ 0x30
 8000764:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000766:	9b01      	ldr	r3, [sp, #4]
 8000768:	f383 8811 	msr	BASEPRI, r3
}
 800076c:	bf00      	nop
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800076e:	bf00      	nop

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
}
 8000770:	bf00      	nop
 8000772:	b002      	add	sp, #8
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
	...

08000780 <chSysUnlock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to enabling interrupts.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8000780:	b082      	sub	sp, #8
 8000782:	2300      	movs	r3, #0
 8000784:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000786:	9b01      	ldr	r3, [sp, #4]
 8000788:	f383 8811 	msr	BASEPRI, r3
}
 800078c:	bf00      	nop
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800078e:	bf00      	nop
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
              (currcore->rlist.current->hdr.pqueue.prio >= currcore->rlist.pqueue.next->prio),
              "priority order violation");

  port_unlock();
}
 8000790:	bf00      	nop
 8000792:	b002      	add	sp, #8
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
	...

080007a0 <chThdQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 80007a0:	b500      	push	{lr}
 80007a2:	b083      	sub	sp, #12
 80007a4:	9001      	str	r0, [sp, #4]

  ch_queue_init(&tqp->queue);
 80007a6:	9b01      	ldr	r3, [sp, #4]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ffc9 	bl	8000740 <ch_queue_init.lto_priv.1>
}
 80007ae:	bf00      	nop
 80007b0:	b003      	add	sp, #12
 80007b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80007b6:	bf00      	nop
	...

080007c0 <osalSysLock.lto_priv.1>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 80007c0:	b508      	push	{r3, lr}

  chSysLock();
 80007c2:	f7ff ffcd 	bl	8000760 <chSysLock.lto_priv.1>
}
 80007c6:	bf00      	nop
 80007c8:	bd08      	pop	{r3, pc}
 80007ca:	bf00      	nop
 80007cc:	0000      	movs	r0, r0
	...

080007d0 <osalSysUnlock.lto_priv.1>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 80007d0:	b508      	push	{r3, lr}

  chSysUnlock();
 80007d2:	f7ff ffd5 	bl	8000780 <chSysUnlock.lto_priv.1>
}
 80007d6:	bf00      	nop
 80007d8:	bd08      	pop	{r3, pc}
 80007da:	bf00      	nop
 80007dc:	0000      	movs	r0, r0
	...

080007e0 <osalThreadQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 80007e0:	b500      	push	{lr}
 80007e2:	b083      	sub	sp, #12
 80007e4:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 80007e6:	9801      	ldr	r0, [sp, #4]
 80007e8:	f7ff ffda 	bl	80007a0 <chThdQueueObjectInit.lto_priv.1>
}
 80007ec:	bf00      	nop
 80007ee:	b003      	add	sp, #12
 80007f0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000800 <osalThreadEnqueueTimeoutS.lto_priv.1>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
 8000800:	b500      	push	{lr}
 8000802:	b083      	sub	sp, #12
 8000804:	9001      	str	r0, [sp, #4]
 8000806:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
 8000808:	9900      	ldr	r1, [sp, #0]
 800080a:	9801      	ldr	r0, [sp, #4]
 800080c:	f003 fd48 	bl	80042a0 <chThdEnqueueTimeoutS>
 8000810:	4603      	mov	r3, r0
}
 8000812:	4618      	mov	r0, r3
 8000814:	b003      	add	sp, #12
 8000816:	f85d fb04 	ldr.w	pc, [sp], #4
 800081a:	bf00      	nop
 800081c:	0000      	movs	r0, r0
	...

08000820 <osalThreadDequeueNextI.lto_priv.1>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000820:	b500      	push	{lr}
 8000822:	b083      	sub	sp, #12
 8000824:	9001      	str	r0, [sp, #4]
 8000826:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
 8000828:	9900      	ldr	r1, [sp, #0]
 800082a:	9801      	ldr	r0, [sp, #4]
 800082c:	f003 fd58 	bl	80042e0 <chThdDequeueNextI>
}
 8000830:	bf00      	nop
 8000832:	b003      	add	sp, #12
 8000834:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000840 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8000840:	b500      	push	{lr}
 8000842:	b087      	sub	sp, #28
 8000844:	9003      	str	r0, [sp, #12]
 8000846:	9102      	str	r1, [sp, #8]
 8000848:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 800084a:	9b03      	ldr	r3, [sp, #12]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	9a01      	ldr	r2, [sp, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	d902      	bls.n	800085a <iq_read+0x1a>
    n = iqGetFullI(iqp);
 8000854:	9b03      	ldr	r3, [sp, #12]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800085a:	9b03      	ldr	r3, [sp, #12]
 800085c:	691a      	ldr	r2, [r3, #16]
 800085e:	9b03      	ldr	r3, [sp, #12]
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8000866:	9a01      	ldr	r2, [sp, #4]
 8000868:	9b05      	ldr	r3, [sp, #20]
 800086a:	429a      	cmp	r2, r3
 800086c:	d20d      	bcs.n	800088a <iq_read+0x4a>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800086e:	9b03      	ldr	r3, [sp, #12]
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	9a01      	ldr	r2, [sp, #4]
 8000874:	4619      	mov	r1, r3
 8000876:	9802      	ldr	r0, [sp, #8]
 8000878:	f7ff fdb7 	bl	80003ea <memcpy>
    iqp->q_rdptr += n;
 800087c:	9b03      	ldr	r3, [sp, #12]
 800087e:	699a      	ldr	r2, [r3, #24]
 8000880:	9b01      	ldr	r3, [sp, #4]
 8000882:	441a      	add	r2, r3
 8000884:	9b03      	ldr	r3, [sp, #12]
 8000886:	619a      	str	r2, [r3, #24]
 8000888:	e02b      	b.n	80008e2 <iq_read+0xa2>
  }
  else if (n > s1) {
 800088a:	9a01      	ldr	r2, [sp, #4]
 800088c:	9b05      	ldr	r3, [sp, #20]
 800088e:	429a      	cmp	r2, r3
 8000890:	d91c      	bls.n	80008cc <iq_read+0x8c>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000892:	9b03      	ldr	r3, [sp, #12]
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	9a05      	ldr	r2, [sp, #20]
 8000898:	4619      	mov	r1, r3
 800089a:	9802      	ldr	r0, [sp, #8]
 800089c:	f7ff fda5 	bl	80003ea <memcpy>
    bp += s1;
 80008a0:	9a02      	ldr	r2, [sp, #8]
 80008a2:	9b05      	ldr	r3, [sp, #20]
 80008a4:	4413      	add	r3, r2
 80008a6:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 80008a8:	9a01      	ldr	r2, [sp, #4]
 80008aa:	9b05      	ldr	r3, [sp, #20]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80008b0:	9b03      	ldr	r3, [sp, #12]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	9a04      	ldr	r2, [sp, #16]
 80008b6:	4619      	mov	r1, r3
 80008b8:	9802      	ldr	r0, [sp, #8]
 80008ba:	f7ff fd96 	bl	80003ea <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80008be:	9b03      	ldr	r3, [sp, #12]
 80008c0:	68da      	ldr	r2, [r3, #12]
 80008c2:	9b04      	ldr	r3, [sp, #16]
 80008c4:	441a      	add	r2, r3
 80008c6:	9b03      	ldr	r3, [sp, #12]
 80008c8:	619a      	str	r2, [r3, #24]
 80008ca:	e00a      	b.n	80008e2 <iq_read+0xa2>
  }
  else {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80008cc:	9b03      	ldr	r3, [sp, #12]
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	9a01      	ldr	r2, [sp, #4]
 80008d2:	4619      	mov	r1, r3
 80008d4:	9802      	ldr	r0, [sp, #8]
 80008d6:	f7ff fd88 	bl	80003ea <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80008da:	9b03      	ldr	r3, [sp, #12]
 80008dc:	68da      	ldr	r2, [r3, #12]
 80008de:	9b03      	ldr	r3, [sp, #12]
 80008e0:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
 80008e2:	9b03      	ldr	r3, [sp, #12]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	9b01      	ldr	r3, [sp, #4]
 80008e8:	1ad2      	subs	r2, r2, r3
 80008ea:	9b03      	ldr	r3, [sp, #12]
 80008ec:	609a      	str	r2, [r3, #8]
  return n;
 80008ee:	9b01      	ldr	r3, [sp, #4]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	b007      	add	sp, #28
 80008f4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000900 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8000900:	b500      	push	{lr}
 8000902:	b087      	sub	sp, #28
 8000904:	9003      	str	r0, [sp, #12]
 8000906:	9102      	str	r1, [sp, #8]
 8000908:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 800090a:	9b03      	ldr	r3, [sp, #12]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	9a01      	ldr	r2, [sp, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	d902      	bls.n	800091a <oq_write+0x1a>
    n = oqGetEmptyI(oqp);
 8000914:	9b03      	ldr	r3, [sp, #12]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800091a:	9b03      	ldr	r3, [sp, #12]
 800091c:	691a      	ldr	r2, [r3, #16]
 800091e:	9b03      	ldr	r3, [sp, #12]
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8000926:	9a01      	ldr	r2, [sp, #4]
 8000928:	9b05      	ldr	r3, [sp, #20]
 800092a:	429a      	cmp	r2, r3
 800092c:	d20d      	bcs.n	800094a <oq_write+0x4a>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800092e:	9b03      	ldr	r3, [sp, #12]
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	9a01      	ldr	r2, [sp, #4]
 8000934:	9902      	ldr	r1, [sp, #8]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fd57 	bl	80003ea <memcpy>
    oqp->q_wrptr += n;
 800093c:	9b03      	ldr	r3, [sp, #12]
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	9b01      	ldr	r3, [sp, #4]
 8000942:	441a      	add	r2, r3
 8000944:	9b03      	ldr	r3, [sp, #12]
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	e02b      	b.n	80009a2 <oq_write+0xa2>
  }
  else if (n > s1) {
 800094a:	9a01      	ldr	r2, [sp, #4]
 800094c:	9b05      	ldr	r3, [sp, #20]
 800094e:	429a      	cmp	r2, r3
 8000950:	d91c      	bls.n	800098c <oq_write+0x8c>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000952:	9b03      	ldr	r3, [sp, #12]
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	9a05      	ldr	r2, [sp, #20]
 8000958:	9902      	ldr	r1, [sp, #8]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fd45 	bl	80003ea <memcpy>
    bp += s1;
 8000960:	9a02      	ldr	r2, [sp, #8]
 8000962:	9b05      	ldr	r3, [sp, #20]
 8000964:	4413      	add	r3, r2
 8000966:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 8000968:	9a01      	ldr	r2, [sp, #4]
 800096a:	9b05      	ldr	r3, [sp, #20]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000970:	9b03      	ldr	r3, [sp, #12]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	9a04      	ldr	r2, [sp, #16]
 8000976:	9902      	ldr	r1, [sp, #8]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fd36 	bl	80003ea <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 800097e:	9b03      	ldr	r3, [sp, #12]
 8000980:	68da      	ldr	r2, [r3, #12]
 8000982:	9b04      	ldr	r3, [sp, #16]
 8000984:	441a      	add	r2, r3
 8000986:	9b03      	ldr	r3, [sp, #12]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	e00a      	b.n	80009a2 <oq_write+0xa2>
  }
  else {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800098c:	9b03      	ldr	r3, [sp, #12]
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	9a01      	ldr	r2, [sp, #4]
 8000992:	9902      	ldr	r1, [sp, #8]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fd28 	bl	80003ea <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800099a:	9b03      	ldr	r3, [sp, #12]
 800099c:	68da      	ldr	r2, [r3, #12]
 800099e:	9b03      	ldr	r3, [sp, #12]
 80009a0:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
 80009a2:	9b03      	ldr	r3, [sp, #12]
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	9b01      	ldr	r3, [sp, #4]
 80009a8:	1ad2      	subs	r2, r2, r3
 80009aa:	9b03      	ldr	r3, [sp, #12]
 80009ac:	609a      	str	r2, [r3, #8]
  return n;
 80009ae:	9b01      	ldr	r3, [sp, #4]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	b007      	add	sp, #28
 80009b4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080009c0 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 80009c0:	b500      	push	{lr}
 80009c2:	b085      	sub	sp, #20
 80009c4:	9003      	str	r0, [sp, #12]
 80009c6:	9102      	str	r1, [sp, #8]
 80009c8:	9201      	str	r2, [sp, #4]
 80009ca:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
 80009cc:	9b03      	ldr	r3, [sp, #12]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff06 	bl	80007e0 <osalThreadQueueObjectInit.lto_priv.1>
  iqp->q_counter = 0;
 80009d4:	9b03      	ldr	r3, [sp, #12]
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 80009da:	9b03      	ldr	r3, [sp, #12]
 80009dc:	9a02      	ldr	r2, [sp, #8]
 80009de:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 80009e0:	9b03      	ldr	r3, [sp, #12]
 80009e2:	9a02      	ldr	r2, [sp, #8]
 80009e4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 80009e6:	9b03      	ldr	r3, [sp, #12]
 80009e8:	9a02      	ldr	r2, [sp, #8]
 80009ea:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 80009ec:	9a02      	ldr	r2, [sp, #8]
 80009ee:	9b01      	ldr	r3, [sp, #4]
 80009f0:	441a      	add	r2, r3
 80009f2:	9b03      	ldr	r3, [sp, #12]
 80009f4:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 80009f6:	9b03      	ldr	r3, [sp, #12]
 80009f8:	9a00      	ldr	r2, [sp, #0]
 80009fa:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 80009fc:	9b03      	ldr	r3, [sp, #12]
 80009fe:	9a06      	ldr	r2, [sp, #24]
 8000a00:	621a      	str	r2, [r3, #32]
}
 8000a02:	bf00      	nop
 8000a04:	b005      	add	sp, #20
 8000a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a0a:	bf00      	nop
 8000a0c:	0000      	movs	r0, r0
	...

08000a10 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8000a10:	b500      	push	{lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	9001      	str	r0, [sp, #4]
 8000a16:	460b      	mov	r3, r1
 8000a18:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8000a1c:	9b01      	ldr	r3, [sp, #4]
 8000a1e:	695a      	ldr	r2, [r3, #20]
 8000a20:	9b01      	ldr	r3, [sp, #4]
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d105      	bne.n	8000a34 <iqPutI+0x24>
 8000a28:	9b01      	ldr	r3, [sp, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <iqPutI+0x24>
 8000a30:	2301      	movs	r3, #1
 8000a32:	e000      	b.n	8000a36 <iqPutI+0x26>
 8000a34:	2300      	movs	r3, #0
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f083 0301 	eor.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d01d      	beq.n	8000a82 <iqPutI+0x72>
    iqp->q_counter++;
 8000a46:	9b01      	ldr	r3, [sp, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	9b01      	ldr	r3, [sp, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 8000a50:	9b01      	ldr	r3, [sp, #4]
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	1c59      	adds	r1, r3, #1
 8000a56:	9a01      	ldr	r2, [sp, #4]
 8000a58:	6151      	str	r1, [r2, #20]
 8000a5a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000a5e:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8000a60:	9b01      	ldr	r3, [sp, #4]
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	9b01      	ldr	r3, [sp, #4]
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d303      	bcc.n	8000a74 <iqPutI+0x64>
      iqp->q_wrptr = iqp->q_buffer;
 8000a6c:	9b01      	ldr	r3, [sp, #4]
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	9b01      	ldr	r3, [sp, #4]
 8000a72:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8000a74:	9b01      	ldr	r3, [sp, #4]
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fed1 	bl	8000820 <osalThreadDequeueNextI.lto_priv.1>

    return MSG_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e001      	b.n	8000a86 <iqPutI+0x76>
  }

  return MSG_TIMEOUT;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	b003      	add	sp, #12
 8000a8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a8e:	bf00      	nop

08000a90 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000a90:	b500      	push	{lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	9001      	str	r0, [sp, #4]
 8000a96:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
 8000a98:	f7ff fe92 	bl	80007c0 <osalSysLock.lto_priv.1>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 8000a9c:	e00c      	b.n	8000ab8 <iqGetTimeout+0x28>
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000a9e:	9b01      	ldr	r3, [sp, #4]
 8000aa0:	9900      	ldr	r1, [sp, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff feac 	bl	8000800 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8000aa8:	9002      	str	r0, [sp, #8]
    if (msg < MSG_OK) {
 8000aaa:	9b02      	ldr	r3, [sp, #8]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	da03      	bge.n	8000ab8 <iqGetTimeout+0x28>
      osalSysUnlock();
 8000ab0:	f7ff fe8e 	bl	80007d0 <osalSysUnlock.lto_priv.1>
      return msg;
 8000ab4:	9b02      	ldr	r3, [sp, #8]
 8000ab6:	e026      	b.n	8000b06 <iqGetTimeout+0x76>
  while (iqIsEmptyI(iqp)) {
 8000ab8:	9b01      	ldr	r3, [sp, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0ee      	beq.n	8000a9e <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8000ac0:	9b01      	ldr	r3, [sp, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	9b01      	ldr	r3, [sp, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 8000aca:	9b01      	ldr	r3, [sp, #4]
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	1c59      	adds	r1, r3, #1
 8000ad0:	9a01      	ldr	r2, [sp, #4]
 8000ad2:	6191      	str	r1, [r2, #24]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000ada:	9b01      	ldr	r3, [sp, #4]
 8000adc:	699a      	ldr	r2, [r3, #24]
 8000ade:	9b01      	ldr	r3, [sp, #4]
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d303      	bcc.n	8000aee <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
 8000ae6:	9b01      	ldr	r3, [sp, #4]
 8000ae8:	68da      	ldr	r2, [r3, #12]
 8000aea:	9b01      	ldr	r3, [sp, #4]
 8000aec:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 8000aee:	9b01      	ldr	r3, [sp, #4]
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
 8000af6:	9b01      	ldr	r3, [sp, #4]
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	9801      	ldr	r0, [sp, #4]
 8000afc:	4798      	blx	r3
  }

  osalSysUnlock();
 8000afe:	f7ff fe67 	bl	80007d0 <osalSysUnlock.lto_priv.1>

  return (msg_t)b;
 8000b02:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	b005      	add	sp, #20
 8000b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b0e:	bf00      	nop

08000b10 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8000b10:	b500      	push	{lr}
 8000b12:	b089      	sub	sp, #36	@ 0x24
 8000b14:	9003      	str	r0, [sp, #12]
 8000b16:	9102      	str	r1, [sp, #8]
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
 8000b1c:	9b03      	ldr	r3, [sp, #12]
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8000b22:	9b01      	ldr	r3, [sp, #4]
 8000b24:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8000b26:	f7ff fe4b 	bl	80007c0 <osalSysLock.lto_priv.1>

  while (n > 0U) {
 8000b2a:	e024      	b.n	8000b76 <iqReadTimeout+0x66>
    size_t done;

    done = iq_read(iqp, bp, n);
 8000b2c:	9a01      	ldr	r2, [sp, #4]
 8000b2e:	9902      	ldr	r1, [sp, #8]
 8000b30:	9803      	ldr	r0, [sp, #12]
 8000b32:	f7ff fe85 	bl	8000840 <iq_read>
 8000b36:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8000b38:	9b05      	ldr	r3, [sp, #20]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d109      	bne.n	8000b52 <iqReadTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000b3e:	9b03      	ldr	r3, [sp, #12]
 8000b40:	9900      	ldr	r1, [sp, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fe5c 	bl	8000800 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8000b48:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8000b4a:	9b04      	ldr	r3, [sp, #16]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d012      	beq.n	8000b76 <iqReadTimeout+0x66>
        break;
 8000b50:	e014      	b.n	8000b7c <iqReadTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8000b52:	9b07      	ldr	r3, [sp, #28]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <iqReadTimeout+0x4e>
        nfy(iqp);
 8000b58:	9b07      	ldr	r3, [sp, #28]
 8000b5a:	9803      	ldr	r0, [sp, #12]
 8000b5c:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8000b5e:	f7ff fe37 	bl	80007d0 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8000b62:	9a01      	ldr	r2, [sp, #4]
 8000b64:	9b05      	ldr	r3, [sp, #20]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	9301      	str	r3, [sp, #4]
      bp += done;
 8000b6a:	9a02      	ldr	r2, [sp, #8]
 8000b6c:	9b05      	ldr	r3, [sp, #20]
 8000b6e:	4413      	add	r3, r2
 8000b70:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8000b72:	f7ff fe25 	bl	80007c0 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 8000b76:	9b01      	ldr	r3, [sp, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1d7      	bne.n	8000b2c <iqReadTimeout+0x1c>
    }
  }

  osalSysUnlock();
 8000b7c:	f7ff fe28 	bl	80007d0 <osalSysUnlock.lto_priv.1>
  return max - n;
 8000b80:	9a06      	ldr	r2, [sp, #24]
 8000b82:	9b01      	ldr	r3, [sp, #4]
 8000b84:	1ad3      	subs	r3, r2, r3
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	b009      	add	sp, #36	@ 0x24
 8000b8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b8e:	bf00      	nop

08000b90 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8000b90:	b500      	push	{lr}
 8000b92:	b085      	sub	sp, #20
 8000b94:	9003      	str	r0, [sp, #12]
 8000b96:	9102      	str	r1, [sp, #8]
 8000b98:	9201      	str	r2, [sp, #4]
 8000b9a:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 8000b9c:	9b03      	ldr	r3, [sp, #12]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe1e 	bl	80007e0 <osalThreadQueueObjectInit.lto_priv.1>
  oqp->q_counter = size;
 8000ba4:	9b03      	ldr	r3, [sp, #12]
 8000ba6:	9a01      	ldr	r2, [sp, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 8000baa:	9b03      	ldr	r3, [sp, #12]
 8000bac:	9a02      	ldr	r2, [sp, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8000bb0:	9b03      	ldr	r3, [sp, #12]
 8000bb2:	9a02      	ldr	r2, [sp, #8]
 8000bb4:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8000bb6:	9b03      	ldr	r3, [sp, #12]
 8000bb8:	9a02      	ldr	r2, [sp, #8]
 8000bba:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 8000bbc:	9a02      	ldr	r2, [sp, #8]
 8000bbe:	9b01      	ldr	r3, [sp, #4]
 8000bc0:	441a      	add	r2, r3
 8000bc2:	9b03      	ldr	r3, [sp, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 8000bc6:	9b03      	ldr	r3, [sp, #12]
 8000bc8:	9a00      	ldr	r2, [sp, #0]
 8000bca:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 8000bcc:	9b03      	ldr	r3, [sp, #12]
 8000bce:	9a06      	ldr	r2, [sp, #24]
 8000bd0:	621a      	str	r2, [r3, #32]
}
 8000bd2:	bf00      	nop
 8000bd4:	b005      	add	sp, #20
 8000bd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bda:	bf00      	nop
 8000bdc:	0000      	movs	r0, r0
	...

08000be0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000be0:	b500      	push	{lr}
 8000be2:	b087      	sub	sp, #28
 8000be4:	9003      	str	r0, [sp, #12]
 8000be6:	460b      	mov	r3, r1
 8000be8:	9201      	str	r2, [sp, #4]
 8000bea:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
 8000bee:	f7ff fde7 	bl	80007c0 <osalSysLock.lto_priv.1>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8000bf2:	e00c      	b.n	8000c0e <oqPutTimeout+0x2e>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000bf4:	9b03      	ldr	r3, [sp, #12]
 8000bf6:	9901      	ldr	r1, [sp, #4]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fe01 	bl	8000800 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8000bfe:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
 8000c00:	9b05      	ldr	r3, [sp, #20]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	da03      	bge.n	8000c0e <oqPutTimeout+0x2e>
      osalSysUnlock();
 8000c06:	f7ff fde3 	bl	80007d0 <osalSysUnlock.lto_priv.1>
      return msg;
 8000c0a:	9b05      	ldr	r3, [sp, #20]
 8000c0c:	e025      	b.n	8000c5a <oqPutTimeout+0x7a>
  while (oqIsFullI(oqp)) {
 8000c0e:	9b03      	ldr	r3, [sp, #12]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0ee      	beq.n	8000bf4 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	1e5a      	subs	r2, r3, #1
 8000c1c:	9b03      	ldr	r3, [sp, #12]
 8000c1e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8000c20:	9b03      	ldr	r3, [sp, #12]
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	1c59      	adds	r1, r3, #1
 8000c26:	9a03      	ldr	r2, [sp, #12]
 8000c28:	6151      	str	r1, [r2, #20]
 8000c2a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000c2e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000c30:	9b03      	ldr	r3, [sp, #12]
 8000c32:	695a      	ldr	r2, [r3, #20]
 8000c34:	9b03      	ldr	r3, [sp, #12]
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d303      	bcc.n	8000c44 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
 8000c3c:	9b03      	ldr	r3, [sp, #12]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	9b03      	ldr	r3, [sp, #12]
 8000c42:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000c44:	9b03      	ldr	r3, [sp, #12]
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
 8000c4c:	9b03      	ldr	r3, [sp, #12]
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	9803      	ldr	r0, [sp, #12]
 8000c52:	4798      	blx	r3
  }

  osalSysUnlock();
 8000c54:	f7ff fdbc 	bl	80007d0 <osalSysUnlock.lto_priv.1>

  return MSG_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	b007      	add	sp, #28
 8000c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c62:	bf00      	nop
	...

08000c70 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8000c70:	b500      	push	{lr}
 8000c72:	b085      	sub	sp, #20
 8000c74:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000c76:	9b01      	ldr	r3, [sp, #4]
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	9b01      	ldr	r3, [sp, #4]
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d105      	bne.n	8000c8e <oqGetI+0x1e>
 8000c82:	9b01      	ldr	r3, [sp, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <oqGetI+0x1e>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <oqGetI+0x20>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f083 0301 	eor.w	r3, r3, #1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d01e      	beq.n	8000cde <oqGetI+0x6e>
    uint8_t b;

    oqp->q_counter++;
 8000ca0:	9b01      	ldr	r3, [sp, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	9b01      	ldr	r3, [sp, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 8000caa:	9b01      	ldr	r3, [sp, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	1c59      	adds	r1, r3, #1
 8000cb0:	9a01      	ldr	r2, [sp, #4]
 8000cb2:	6191      	str	r1, [r2, #24]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000cba:	9b01      	ldr	r3, [sp, #4]
 8000cbc:	699a      	ldr	r2, [r3, #24]
 8000cbe:	9b01      	ldr	r3, [sp, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d303      	bcc.n	8000cce <oqGetI+0x5e>
      oqp->q_rdptr = oqp->q_buffer;
 8000cc6:	9b01      	ldr	r3, [sp, #4]
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	9b01      	ldr	r3, [sp, #4]
 8000ccc:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8000cce:	9b01      	ldr	r3, [sp, #4]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fda4 	bl	8000820 <osalThreadDequeueNextI.lto_priv.1>

    return (msg_t)b;
 8000cd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000cdc:	e001      	b.n	8000ce2 <oqGetI+0x72>
  }

  return MSG_TIMEOUT;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	b005      	add	sp, #20
 8000ce6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cea:	bf00      	nop
 8000cec:	0000      	movs	r0, r0
	...

08000cf0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000cf0:	b500      	push	{lr}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	9003      	str	r0, [sp, #12]
 8000cf6:	9102      	str	r1, [sp, #8]
 8000cf8:	9201      	str	r2, [sp, #4]
 8000cfa:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
 8000cfc:	9b03      	ldr	r3, [sp, #12]
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8000d02:	9b01      	ldr	r3, [sp, #4]
 8000d04:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8000d06:	f7ff fd5b 	bl	80007c0 <osalSysLock.lto_priv.1>

  while (n > 0U) {
 8000d0a:	e024      	b.n	8000d56 <oqWriteTimeout+0x66>
    size_t done;

    done = oq_write(oqp, bp, n);
 8000d0c:	9a01      	ldr	r2, [sp, #4]
 8000d0e:	9902      	ldr	r1, [sp, #8]
 8000d10:	9803      	ldr	r0, [sp, #12]
 8000d12:	f7ff fdf5 	bl	8000900 <oq_write>
 8000d16:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8000d18:	9b05      	ldr	r3, [sp, #20]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d109      	bne.n	8000d32 <oqWriteTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000d1e:	9b03      	ldr	r3, [sp, #12]
 8000d20:	9900      	ldr	r1, [sp, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fd6c 	bl	8000800 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8000d28:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8000d2a:	9b04      	ldr	r3, [sp, #16]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d012      	beq.n	8000d56 <oqWriteTimeout+0x66>
        break;
 8000d30:	e014      	b.n	8000d5c <oqWriteTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8000d32:	9b07      	ldr	r3, [sp, #28]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <oqWriteTimeout+0x4e>
        nfy(oqp);
 8000d38:	9b07      	ldr	r3, [sp, #28]
 8000d3a:	9803      	ldr	r0, [sp, #12]
 8000d3c:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8000d3e:	f7ff fd47 	bl	80007d0 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8000d42:	9a01      	ldr	r2, [sp, #4]
 8000d44:	9b05      	ldr	r3, [sp, #20]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	9301      	str	r3, [sp, #4]
      bp += done;
 8000d4a:	9a02      	ldr	r2, [sp, #8]
 8000d4c:	9b05      	ldr	r3, [sp, #20]
 8000d4e:	4413      	add	r3, r2
 8000d50:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8000d52:	f7ff fd35 	bl	80007c0 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 8000d56:	9b01      	ldr	r3, [sp, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1d7      	bne.n	8000d0c <oqWriteTimeout+0x1c>
    }
  }

  osalSysUnlock();
 8000d5c:	f7ff fd38 	bl	80007d0 <osalSysUnlock.lto_priv.1>
  return max - n;
 8000d60:	9a06      	ldr	r2, [sp, #24]
 8000d62:	9b01      	ldr	r3, [sp, #4]
 8000d64:	1ad3      	subs	r3, r2, r3
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	b009      	add	sp, #36	@ 0x24
 8000d6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d6e:	bf00      	nop

08000d70 <ch_queue_init.lto_priv.2>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8000d70:	b082      	sub	sp, #8
 8000d72:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8000d74:	9b01      	ldr	r3, [sp, #4]
 8000d76:	9a01      	ldr	r2, [sp, #4]
 8000d78:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8000d7a:	9b01      	ldr	r3, [sp, #4]
 8000d7c:	9a01      	ldr	r2, [sp, #4]
 8000d7e:	605a      	str	r2, [r3, #4]
}
 8000d80:	bf00      	nop
 8000d82:	b002      	add	sp, #8
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
	...

08000d90 <chSysLock.lto_priv.2>:
static inline void chSysLock(void) {
 8000d90:	b082      	sub	sp, #8
 8000d92:	2330      	movs	r3, #48	@ 0x30
 8000d94:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d96:	9b01      	ldr	r3, [sp, #4]
 8000d98:	f383 8811 	msr	BASEPRI, r3
}
 8000d9c:	bf00      	nop
}
 8000d9e:	bf00      	nop
}
 8000da0:	bf00      	nop
 8000da2:	b002      	add	sp, #8
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
	...

08000db0 <chSysUnlock.lto_priv.2>:
static inline void chSysUnlock(void) {
 8000db0:	b082      	sub	sp, #8
 8000db2:	2300      	movs	r3, #0
 8000db4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000db6:	9b01      	ldr	r3, [sp, #4]
 8000db8:	f383 8811 	msr	BASEPRI, r3
}
 8000dbc:	bf00      	nop
}
 8000dbe:	bf00      	nop
}
 8000dc0:	bf00      	nop
 8000dc2:	b002      	add	sp, #8
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
	...

08000dd0 <chThdQueueObjectInit.lto_priv.2>:
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 8000dd0:	b500      	push	{lr}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	9001      	str	r0, [sp, #4]
  ch_queue_init(&tqp->queue);
 8000dd6:	9b01      	ldr	r3, [sp, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ffc9 	bl	8000d70 <ch_queue_init.lto_priv.2>
}
 8000dde:	bf00      	nop
 8000de0:	b003      	add	sp, #12
 8000de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000de6:	bf00      	nop
	...

08000df0 <chEvtObjectInit.lto_priv.0>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 8000df0:	b082      	sub	sp, #8
 8000df2:	9001      	str	r0, [sp, #4]

  esp->next = (event_listener_t *)esp;
 8000df4:	9b01      	ldr	r3, [sp, #4]
 8000df6:	9a01      	ldr	r2, [sp, #4]
 8000df8:	601a      	str	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	b002      	add	sp, #8
 8000dfe:	4770      	bx	lr

08000e00 <osalSysLock.lto_priv.2>:
static inline void osalSysLock(void) {
 8000e00:	b508      	push	{r3, lr}
  chSysLock();
 8000e02:	f7ff ffc5 	bl	8000d90 <chSysLock.lto_priv.2>
}
 8000e06:	bf00      	nop
 8000e08:	bd08      	pop	{r3, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0000      	movs	r0, r0
	...

08000e10 <osalSysUnlock.lto_priv.2>:
static inline void osalSysUnlock(void) {
 8000e10:	b508      	push	{r3, lr}
  chSysUnlock();
 8000e12:	f7ff ffcd 	bl	8000db0 <chSysUnlock.lto_priv.2>
}
 8000e16:	bf00      	nop
 8000e18:	bd08      	pop	{r3, pc}
 8000e1a:	bf00      	nop
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <osalThreadQueueObjectInit.lto_priv.2>:
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 8000e20:	b500      	push	{lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	9001      	str	r0, [sp, #4]
  chThdQueueObjectInit(tqp);
 8000e26:	9801      	ldr	r0, [sp, #4]
 8000e28:	f7ff ffd2 	bl	8000dd0 <chThdQueueObjectInit.lto_priv.2>
}
 8000e2c:	bf00      	nop
 8000e2e:	b003      	add	sp, #12
 8000e30:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000e40 <osalThreadEnqueueTimeoutS.lto_priv.2>:
                                              sysinterval_t timeout) {
 8000e40:	b500      	push	{lr}
 8000e42:	b083      	sub	sp, #12
 8000e44:	9001      	str	r0, [sp, #4]
 8000e46:	9100      	str	r1, [sp, #0]
  return chThdEnqueueTimeoutS(tqp, timeout);
 8000e48:	9900      	ldr	r1, [sp, #0]
 8000e4a:	9801      	ldr	r0, [sp, #4]
 8000e4c:	f003 fa28 	bl	80042a0 <chThdEnqueueTimeoutS>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	b003      	add	sp, #12
 8000e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e5a:	bf00      	nop
 8000e5c:	0000      	movs	r0, r0
	...

08000e60 <osalEventObjectInit.lto_priv.0>:
 *
 * @param[out] esp      pointer to the event source object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 8000e60:	b500      	push	{lr}
 8000e62:	b083      	sub	sp, #12
 8000e64:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
 8000e66:	9801      	ldr	r0, [sp, #4]
 8000e68:	f7ff ffc2 	bl	8000df0 <chEvtObjectInit.lto_priv.0>
}
 8000e6c:	bf00      	nop
 8000e6e:	b003      	add	sp, #12
 8000e70:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000e80 <canInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void canInit(void) {
 8000e80:	b508      	push	{r3, lr}

  can_lld_init();
 8000e82:	f001 f95d 	bl	8002140 <can_lld_init>
}
 8000e86:	bf00      	nop
 8000e88:	bd08      	pop	{r3, pc}
 8000e8a:	bf00      	nop
 8000e8c:	0000      	movs	r0, r0
	...

08000e90 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 8000e90:	b500      	push	{lr}
 8000e92:	b083      	sub	sp, #12
 8000e94:	9001      	str	r0, [sp, #4]

  canp->state       = CAN_STOP;
 8000e96:	9b01      	ldr	r3, [sp, #4]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
  canp->config      = NULL;
 8000e9c:	9b01      	ldr	r3, [sp, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  osalThreadQueueObjectInit(&canp->txqueue);
 8000ea2:	9b01      	ldr	r3, [sp, #4]
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ffba 	bl	8000e20 <osalThreadQueueObjectInit.lto_priv.2>
  osalThreadQueueObjectInit(&canp->rxqueue);
 8000eac:	9b01      	ldr	r3, [sp, #4]
 8000eae:	3310      	adds	r3, #16
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ffb5 	bl	8000e20 <osalThreadQueueObjectInit.lto_priv.2>
#if CAN_ENFORCE_USE_CALLBACKS == FALSE
  osalEventObjectInit(&canp->rxfull_event);
 8000eb6:	9b01      	ldr	r3, [sp, #4]
 8000eb8:	3318      	adds	r3, #24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ffd0 	bl	8000e60 <osalEventObjectInit.lto_priv.0>
  osalEventObjectInit(&canp->txempty_event);
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	331c      	adds	r3, #28
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ffcb 	bl	8000e60 <osalEventObjectInit.lto_priv.0>
  osalEventObjectInit(&canp->error_event);
 8000eca:	9b01      	ldr	r3, [sp, #4]
 8000ecc:	3320      	adds	r3, #32
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ffc6 	bl	8000e60 <osalEventObjectInit.lto_priv.0>
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 8000ed4:	9b01      	ldr	r3, [sp, #4]
 8000ed6:	3324      	adds	r3, #36	@ 0x24
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ffc1 	bl	8000e60 <osalEventObjectInit.lto_priv.0>
  osalEventObjectInit(&canp->wakeup_event);
 8000ede:	9b01      	ldr	r3, [sp, #4]
 8000ee0:	3328      	adds	r3, #40	@ 0x28
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffbc 	bl	8000e60 <osalEventObjectInit.lto_priv.0>
  canp->error_cb    = NULL;
#if CAN_USE_SLEEP_MODE == TRUE
  canp->wakeup_cb   = NULL;
#endif
#endif /* CAN_ENFORCE_USE_CALLBACKS == TRUE */
}
 8000ee8:	bf00      	nop
 8000eea:	b003      	add	sp, #12
 8000eec:	f85d fb04 	ldr.w	pc, [sp], #4

08000ef0 <canStart>:
 *                      the implementation the value can be @p NULL.
 * @return              The operation status.
 *
 * @api
 */
msg_t canStart(CANDriver *canp, const CANConfig *config) {
 8000ef0:	b500      	push	{lr}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	9001      	str	r0, [sp, #4]
 8000ef6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck(canp != NULL);

  osalSysLock();
 8000ef8:	f7ff ff82 	bl	8000e00 <osalSysLock.lto_priv.2>
  osalDbgAssert(canp->state == CAN_STOP, "invalid state");

  /* Entering initialization mode. */
  canp->state = CAN_STARTING;
 8000efc:	9b01      	ldr	r3, [sp, #4]
 8000efe:	2202      	movs	r2, #2
 8000f00:	701a      	strb	r2, [r3, #0]
  canp->config = config;
 8000f02:	9b01      	ldr	r3, [sp, #4]
 8000f04:	9a00      	ldr	r2, [sp, #0]
 8000f06:	605a      	str	r2, [r3, #4]
  /* Low level initialization, could be a slow process and sleeps could
     be performed inside.*/
#if defined(CAN_LLD_ENHANCED_API)
  msg = can_lld_start(canp);
#else
  can_lld_start(canp);
 8000f08:	9801      	ldr	r0, [sp, #4]
 8000f0a:	f001 f941 	bl	8002190 <can_lld_start>
  msg = HAL_RET_SUCCESS;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
 8000f12:	9b03      	ldr	r3, [sp, #12]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <canStart+0x2e>
    canp->state = CAN_READY;
 8000f18:	9b01      	ldr	r3, [sp, #4]
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	701a      	strb	r2, [r3, #0]
  }

  osalSysUnlock();
 8000f1e:	f7ff ff77 	bl	8000e10 <osalSysUnlock.lto_priv.2>

  return msg;
 8000f22:	9b03      	ldr	r3, [sp, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	b005      	add	sp, #20
 8000f28:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f2c:	0000      	movs	r0, r0
	...

08000f30 <canTransmitTimeout>:
 * @api
 */
msg_t canTransmitTimeout(CANDriver *canp,
                         canmbx_t mailbox,
                         const CANTxFrame *ctfp,
                         sysinterval_t timeout) {
 8000f30:	b500      	push	{lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	9003      	str	r0, [sp, #12]
 8000f36:	9102      	str	r1, [sp, #8]
 8000f38:	9201      	str	r2, [sp, #4]
 8000f3a:	9300      	str	r3, [sp, #0]

  osalDbgCheck((canp != NULL) && (ctfp != NULL) &&
               (mailbox <= (canmbx_t)CAN_TX_MAILBOXES));

  osalSysLock();
 8000f3c:	f7ff ff60 	bl	8000e00 <osalSysLock.lto_priv.2>
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
 8000f40:	e00d      	b.n	8000f5e <canTransmitTimeout+0x2e>
  /*lint -restore*/
   msg_t msg = osalThreadEnqueueTimeoutS(&canp->txqueue, timeout);
 8000f42:	9b03      	ldr	r3, [sp, #12]
 8000f44:	3308      	adds	r3, #8
 8000f46:	9900      	ldr	r1, [sp, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff79 	bl	8000e40 <osalThreadEnqueueTimeoutS.lto_priv.2>
 8000f4e:	9005      	str	r0, [sp, #20]
    if (msg != MSG_OK) {
 8000f50:	9b05      	ldr	r3, [sp, #20]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <canTransmitTimeout+0x2e>
      osalSysUnlock();
 8000f56:	f7ff ff5b 	bl	8000e10 <osalSysUnlock.lto_priv.2>
      return msg;
 8000f5a:	9b05      	ldr	r3, [sp, #20]
 8000f5c:	e015      	b.n	8000f8a <canTransmitTimeout+0x5a>
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
 8000f5e:	9b03      	ldr	r3, [sp, #12]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d0ed      	beq.n	8000f42 <canTransmitTimeout+0x12>
 8000f66:	9902      	ldr	r1, [sp, #8]
 8000f68:	9803      	ldr	r0, [sp, #12]
 8000f6a:	f001 fa41 	bl	80023f0 <can_lld_is_tx_empty>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f083 0301 	eor.w	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1e3      	bne.n	8000f42 <canTransmitTimeout+0x12>
    }
  }
  can_lld_transmit(canp, mailbox, ctfp);
 8000f7a:	9a01      	ldr	r2, [sp, #4]
 8000f7c:	9902      	ldr	r1, [sp, #8]
 8000f7e:	9803      	ldr	r0, [sp, #12]
 8000f80:	f001 fa56 	bl	8002430 <can_lld_transmit>
  osalSysUnlock();
 8000f84:	f7ff ff44 	bl	8000e10 <osalSysUnlock.lto_priv.2>
  return MSG_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	b007      	add	sp, #28
 8000f8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f92:	bf00      	nop
	...

08000fa0 <canReceiveTimeout>:
 * @api
 */
msg_t canReceiveTimeout(CANDriver *canp,
                        canmbx_t mailbox,
                        CANRxFrame *crfp,
                        sysinterval_t timeout) {
 8000fa0:	b500      	push	{lr}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	9003      	str	r0, [sp, #12]
 8000fa6:	9102      	str	r1, [sp, #8]
 8000fa8:	9201      	str	r2, [sp, #4]
 8000faa:	9300      	str	r3, [sp, #0]

  osalDbgCheck((canp != NULL) && (crfp != NULL) &&
               (mailbox <= (canmbx_t)CAN_RX_MAILBOXES));

  osalSysLock();
 8000fac:	f7ff ff28 	bl	8000e00 <osalSysLock.lto_priv.2>
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 8000fb0:	e00d      	b.n	8000fce <canReceiveTimeout+0x2e>
  /*lint -restore*/
    msg_t msg = osalThreadEnqueueTimeoutS(&canp->rxqueue, timeout);
 8000fb2:	9b03      	ldr	r3, [sp, #12]
 8000fb4:	3310      	adds	r3, #16
 8000fb6:	9900      	ldr	r1, [sp, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff41 	bl	8000e40 <osalThreadEnqueueTimeoutS.lto_priv.2>
 8000fbe:	9005      	str	r0, [sp, #20]
    if (msg != MSG_OK) {
 8000fc0:	9b05      	ldr	r3, [sp, #20]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <canReceiveTimeout+0x2e>
      osalSysUnlock();
 8000fc6:	f7ff ff23 	bl	8000e10 <osalSysUnlock.lto_priv.2>
      return msg;
 8000fca:	9b05      	ldr	r3, [sp, #20]
 8000fcc:	e015      	b.n	8000ffa <canReceiveTimeout+0x5a>
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 8000fce:	9b03      	ldr	r3, [sp, #12]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d0ed      	beq.n	8000fb2 <canReceiveTimeout+0x12>
 8000fd6:	9902      	ldr	r1, [sp, #8]
 8000fd8:	9803      	ldr	r0, [sp, #12]
 8000fda:	f001 fa81 	bl	80024e0 <can_lld_is_rx_nonempty>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1e3      	bne.n	8000fb2 <canReceiveTimeout+0x12>
    }
  }
  can_lld_receive(canp, mailbox, crfp);
 8000fea:	9a01      	ldr	r2, [sp, #4]
 8000fec:	9902      	ldr	r1, [sp, #8]
 8000fee:	9803      	ldr	r0, [sp, #12]
 8000ff0:	f001 fabe 	bl	8002570 <can_lld_receive>
  osalSysUnlock();
 8000ff4:	f7ff ff0c 	bl	8000e10 <osalSysUnlock.lto_priv.2>
  return MSG_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	b007      	add	sp, #28
 8000ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001002:	bf00      	nop
	...

08001010 <chEvtObjectInit.lto_priv.1>:
static inline void chEvtObjectInit(event_source_t *esp) {
 8001010:	b082      	sub	sp, #8
 8001012:	9001      	str	r0, [sp, #4]
  esp->next = (event_listener_t *)esp;
 8001014:	9b01      	ldr	r3, [sp, #4]
 8001016:	9a01      	ldr	r2, [sp, #4]
 8001018:	601a      	str	r2, [r3, #0]
}
 800101a:	bf00      	nop
 800101c:	b002      	add	sp, #8
 800101e:	4770      	bx	lr

08001020 <osalEventObjectInit.lto_priv.1>:
static inline void osalEventObjectInit(event_source_t *esp) {
 8001020:	b500      	push	{lr}
 8001022:	b083      	sub	sp, #12
 8001024:	9001      	str	r0, [sp, #4]
  chEvtObjectInit(esp);
 8001026:	9801      	ldr	r0, [sp, #4]
 8001028:	f7ff fff2 	bl	8001010 <chEvtObjectInit.lto_priv.1>
}
 800102c:	bf00      	nop
 800102e:	b003      	add	sp, #12
 8001030:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001040 <osalEventBroadcastFlagsI.lto_priv.2>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 8001040:	b500      	push	{lr}
 8001042:	b083      	sub	sp, #12
 8001044:	9001      	str	r0, [sp, #4]
 8001046:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
 8001048:	9900      	ldr	r1, [sp, #0]
 800104a:	9801      	ldr	r0, [sp, #4]
 800104c:	f003 faa8 	bl	80045a0 <chEvtBroadcastFlagsI>
}
 8001050:	bf00      	nop
 8001052:	b003      	add	sp, #12
 8001054:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001060 <_write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8001060:	b500      	push	{lr}
 8001062:	b085      	sub	sp, #20
 8001064:	9003      	str	r0, [sp, #12]
 8001066:	9102      	str	r1, [sp, #8]
 8001068:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 800106a:	9b03      	ldr	r3, [sp, #12]
 800106c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001070:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001074:	9a01      	ldr	r2, [sp, #4]
 8001076:	9902      	ldr	r1, [sp, #8]
 8001078:	f7ff fe3a 	bl	8000cf0 <oqWriteTimeout>
 800107c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 800107e:	4618      	mov	r0, r3
 8001080:	b005      	add	sp, #20
 8001082:	f85d fb04 	ldr.w	pc, [sp], #4
 8001086:	bf00      	nop
	...

08001090 <_read>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8001090:	b500      	push	{lr}
 8001092:	b085      	sub	sp, #20
 8001094:	9003      	str	r0, [sp, #12]
 8001096:	9102      	str	r1, [sp, #8]
 8001098:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800109a:	9b03      	ldr	r3, [sp, #12]
 800109c:	f103 000c 	add.w	r0, r3, #12
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a4:	9a01      	ldr	r2, [sp, #4]
 80010a6:	9902      	ldr	r1, [sp, #8]
 80010a8:	f7ff fd32 	bl	8000b10 <iqReadTimeout>
 80010ac:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	b005      	add	sp, #20
 80010b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010b6:	bf00      	nop
	...

080010c0 <_put>:

static msg_t _put(void *ip, uint8_t b) {
 80010c0:	b500      	push	{lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	9001      	str	r0, [sp, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80010cc:	9b01      	ldr	r3, [sp, #4]
 80010ce:	3330      	adds	r3, #48	@ 0x30
 80010d0:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fd81 	bl	8000be0 <oqPutTimeout>
 80010de:	4603      	mov	r3, r0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	b003      	add	sp, #12
 80010e4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080010f0 <_get>:

static msg_t _get(void *ip) {
 80010f0:	b500      	push	{lr}
 80010f2:	b083      	sub	sp, #12
 80010f4:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80010f6:	9b01      	ldr	r3, [sp, #4]
 80010f8:	330c      	adds	r3, #12
 80010fa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fcc6 	bl	8000a90 <iqGetTimeout>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	b003      	add	sp, #12
 800110a:	f85d fb04 	ldr.w	pc, [sp], #4
 800110e:	bf00      	nop

08001110 <_putt>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8001110:	b500      	push	{lr}
 8001112:	b085      	sub	sp, #20
 8001114:	9003      	str	r0, [sp, #12]
 8001116:	460b      	mov	r3, r1
 8001118:	9201      	str	r2, [sp, #4]
 800111a:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 800111e:	9b03      	ldr	r3, [sp, #12]
 8001120:	3330      	adds	r3, #48	@ 0x30
 8001122:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8001126:	9a01      	ldr	r2, [sp, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fd59 	bl	8000be0 <oqPutTimeout>
 800112e:	4603      	mov	r3, r0
}
 8001130:	4618      	mov	r0, r3
 8001132:	b005      	add	sp, #20
 8001134:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001140 <_gett>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 8001140:	b500      	push	{lr}
 8001142:	b083      	sub	sp, #12
 8001144:	9001      	str	r0, [sp, #4]
 8001146:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001148:	9b01      	ldr	r3, [sp, #4]
 800114a:	330c      	adds	r3, #12
 800114c:	9900      	ldr	r1, [sp, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fc9e 	bl	8000a90 <iqGetTimeout>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	b003      	add	sp, #12
 800115a:	f85d fb04 	ldr.w	pc, [sp], #4
 800115e:	bf00      	nop

08001160 <_writet>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 8001160:	b500      	push	{lr}
 8001162:	b085      	sub	sp, #20
 8001164:	9003      	str	r0, [sp, #12]
 8001166:	9102      	str	r1, [sp, #8]
 8001168:	9201      	str	r2, [sp, #4]
 800116a:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 800116c:	9b03      	ldr	r3, [sp, #12]
 800116e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001172:	9b00      	ldr	r3, [sp, #0]
 8001174:	9a01      	ldr	r2, [sp, #4]
 8001176:	9902      	ldr	r1, [sp, #8]
 8001178:	f7ff fdba 	bl	8000cf0 <oqWriteTimeout>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	b005      	add	sp, #20
 8001182:	f85d fb04 	ldr.w	pc, [sp], #4
 8001186:	bf00      	nop
	...

08001190 <_readt>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 8001190:	b500      	push	{lr}
 8001192:	b085      	sub	sp, #20
 8001194:	9003      	str	r0, [sp, #12]
 8001196:	9102      	str	r1, [sp, #8]
 8001198:	9201      	str	r2, [sp, #4]
 800119a:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800119c:	9b03      	ldr	r3, [sp, #12]
 800119e:	f103 000c 	add.w	r0, r3, #12
 80011a2:	9b00      	ldr	r3, [sp, #0]
 80011a4:	9a01      	ldr	r2, [sp, #4]
 80011a6:	9902      	ldr	r1, [sp, #8]
 80011a8:	f7ff fcb2 	bl	8000b10 <iqReadTimeout>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	b005      	add	sp, #20
 80011b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011b6:	bf00      	nop
	...

080011c0 <_ctl>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 80011c0:	b086      	sub	sp, #24
 80011c2:	9003      	str	r0, [sp, #12]
 80011c4:	9102      	str	r1, [sp, #8]
 80011c6:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 80011c8:	9b03      	ldr	r3, [sp, #12]
 80011ca:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);

  switch (operation) {
 80011cc:	9b02      	ldr	r3, [sp, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <_ctl+0x1a>
 80011d2:	9b02      	ldr	r3, [sp, #8]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d103      	bne.n	80011e0 <_ctl+0x20>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
    break;
 80011d8:	e005      	b.n	80011e6 <_ctl+0x26>
  case CHN_CTL_INVALID:
    return HAL_RET_UNKNOWN_CTL;
 80011da:	f06f 0313 	mvn.w	r3, #19
 80011de:	e003      	b.n	80011e8 <_ctl+0x28>
  default:
#if defined(SD_LLD_IMPLEMENTS_CTL)
    /* Delegating to the LLD if supported.*/
    return sd_lld_control(sdp, operation, arg);
#else
    return HAL_RET_UNKNOWN_CTL;
 80011e0:	f06f 0313 	mvn.w	r3, #19
 80011e4:	e000      	b.n	80011e8 <_ctl+0x28>
#endif
  }
  return HAL_RET_SUCCESS;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	b006      	add	sp, #24
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop

080011f0 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 80011f0:	b508      	push	{r3, lr}

  sd_lld_init();
 80011f2:	f001 fc6d 	bl	8002ad0 <sd_lld_init>
}
 80011f6:	bf00      	nop
 80011f8:	bd08      	pop	{r3, pc}
 80011fa:	bf00      	nop
 80011fc:	0000      	movs	r0, r0
	...

08001200 <sdObjectInit>:
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {
 8001200:	b500      	push	{lr}
 8001202:	b083      	sub	sp, #12
 8001204:	9001      	str	r0, [sp, #4]

  sdp->vmt = &vmt;
 8001206:	9b01      	ldr	r3, [sp, #4]
 8001208:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <sdObjectInit+0x24>)
 800120a:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 800120c:	9b01      	ldr	r3, [sp, #4]
 800120e:	3304      	adds	r3, #4
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff05 	bl	8001020 <osalEventObjectInit.lto_priv.1>
  sdp->state = SD_STOP;
 8001216:	9b01      	ldr	r3, [sp, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	721a      	strb	r2, [r3, #8]
}
 800121c:	bf00      	nop
 800121e:	b003      	add	sp, #12
 8001220:	f85d fb04 	ldr.w	pc, [sp], #4
 8001224:	08004cc4 	.word	0x08004cc4
	...

08001230 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8001230:	b500      	push	{lr}
 8001232:	b083      	sub	sp, #12
 8001234:	9001      	str	r0, [sp, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800123c:	9b01      	ldr	r3, [sp, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d105      	bne.n	8001250 <sdIncomingDataI+0x20>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8001244:	9b01      	ldr	r3, [sp, #4]
 8001246:	3304      	adds	r3, #4
 8001248:	2104      	movs	r1, #4
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fef8 	bl	8001040 <osalEventBroadcastFlagsI.lto_priv.2>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8001250:	9b01      	ldr	r3, [sp, #4]
 8001252:	330c      	adds	r3, #12
 8001254:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fbd8 	bl	8000a10 <iqPutI>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	da06      	bge.n	8001274 <sdIncomingDataI+0x44>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8001266:	9b01      	ldr	r3, [sp, #4]
 8001268:	3304      	adds	r3, #4
 800126a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fee6 	bl	8001040 <osalEventBroadcastFlagsI.lto_priv.2>
}
 8001274:	bf00      	nop
 8001276:	b003      	add	sp, #12
 8001278:	f85d fb04 	ldr.w	pc, [sp], #4
 800127c:	0000      	movs	r0, r0
	...

08001280 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8001280:	b082      	sub	sp, #8
 8001282:	9001      	str	r0, [sp, #4]
 8001284:	9100      	str	r1, [sp, #0]
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001286:	9b00      	ldr	r3, [sp, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4a11      	ldr	r2, [pc, #68]	@ (80012d0 <nvicEnableVector+0x50>)
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	b2d9      	uxtb	r1, r3
 8001290:	9b01      	ldr	r3, [sp, #4]
 8001292:	4413      	add	r3, r2
 8001294:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001298:	460a      	mov	r2, r1
 800129a:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800129c:	9b01      	ldr	r3, [sp, #4]
 800129e:	f003 021f 	and.w	r2, r3, #31
 80012a2:	490b      	ldr	r1, [pc, #44]	@ (80012d0 <nvicEnableVector+0x50>)
 80012a4:	9b01      	ldr	r3, [sp, #4]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	3360      	adds	r3, #96	@ 0x60
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80012b4:	9b01      	ldr	r3, [sp, #4]
 80012b6:	f003 021f 	and.w	r2, r3, #31
 80012ba:	4905      	ldr	r1, [pc, #20]	@ (80012d0 <nvicEnableVector+0x50>)
 80012bc:	9b01      	ldr	r3, [sp, #4]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3)
  /* If the IRQ is enabled from secure mode then it is marked as secure
     interrupt in ITNS.*/
  NVIC->__ITNS[n >> 5U] &= ~(1U << (n & 0x1FU));
#endif
}
 80012ca:	bf00      	nop
 80012cc:	b002      	add	sp, #8
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
	...

080012e0 <exti0_irq_init>:

static inline void exti0_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI0_NUMBER, STM32_IRQ_EXTI0_PRIORITY);
#endif
}
 80012e0:	bf00      	nop
 80012e2:	4770      	bx	lr
	...

080012f0 <exti1_irq_init>:

static inline void exti1_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI1_NUMBER, STM32_IRQ_EXTI1_PRIORITY);
#endif
}
 80012f0:	bf00      	nop
 80012f2:	4770      	bx	lr
	...

08001300 <exti2_irq_init>:

static inline void exti2_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI2_NUMBER, STM32_IRQ_EXTI2_PRIORITY);
#endif
}
 8001300:	bf00      	nop
 8001302:	4770      	bx	lr
	...

08001310 <exti3_irq_init>:

static inline void exti3_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI3_NUMBER, STM32_IRQ_EXTI3_PRIORITY);
#endif
}
 8001310:	bf00      	nop
 8001312:	4770      	bx	lr
	...

08001320 <exti4_irq_init>:

static inline void exti4_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI4_NUMBER, STM32_IRQ_EXTI4_PRIORITY);
#endif
}
 8001320:	bf00      	nop
 8001322:	4770      	bx	lr
	...

08001330 <exti5_9_irq_init>:

static inline void exti5_9_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI5_9_NUMBER, STM32_IRQ_EXTI5_9_PRIORITY);
#endif
}
 8001330:	bf00      	nop
 8001332:	4770      	bx	lr
	...

08001340 <exti10_15_irq_init>:

static inline void exti10_15_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI10_15_NUMBER, STM32_IRQ_EXTI10_15_PRIORITY);
#endif
}
 8001340:	bf00      	nop
 8001342:	4770      	bx	lr
	...

08001350 <exti16_irq_init>:

static inline void exti16_irq_init(void) {
#if defined(STM32_EXTI16_IS_USED)
  nvicEnableVector(STM32_EXTI16_NUMBER, STM32_IRQ_EXTI16_PRIORITY);
#endif
}
 8001350:	bf00      	nop
 8001352:	4770      	bx	lr
	...

08001360 <exti17_irq_init>:

static inline void exti17_irq_init(void) {
#if defined(STM32_EXTI17_IS_USED)
  nvicEnableVector(STM32_EXTI17_NUMBER, STM32_IRQ_EXTI17_PRIORITY);
#endif
}
 8001360:	bf00      	nop
 8001362:	4770      	bx	lr
	...

08001370 <exti18_irq_init>:

static inline void exti18_irq_init(void) {
#if defined(STM32_EXTI18_IS_USED)
  nvicEnableVector(STM32_EXTI18_NUMBER, STM32_IRQ_EXTI18_PRIORITY);
#endif
}
 8001370:	bf00      	nop
 8001372:	4770      	bx	lr
	...

08001380 <exti19_irq_init>:

static inline void exti19_irq_init(void) {
#if defined(STM32_EXTI19_IS_USED)
  nvicEnableVector(STM32_EXTI19_NUMBER, STM32_IRQ_EXTI19_PRIORITY);
#endif
}
 8001380:	bf00      	nop
 8001382:	4770      	bx	lr
	...

08001390 <exti20_exti21_irq_init>:

static inline void exti20_exti21_irq_init(void) {
#if defined(STM32_EXTI20_IS_USED) || defined(STM32_EXTI21_IS_USED)
  nvicEnableVector(STM32_EXTI20_21_NUMBER, STM32_IRQ_EXTI20_21_PRIORITY);
#endif
}
 8001390:	bf00      	nop
 8001392:	4770      	bx	lr
	...

080013a0 <fdcan1_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void fdcan1_irq_init(void) {
 80013a0:	b508      	push	{r3, lr}
#if STM32_FDCAN1_IS_USED
  nvicEnableVector(STM32_FDCAN1_IT0_NUMBER, STM32_IRQ_FDCAN1_PRIORITY);
 80013a2:	210a      	movs	r1, #10
 80013a4:	2013      	movs	r0, #19
 80013a6:	f7ff ff6b 	bl	8001280 <nvicEnableVector>
#endif
}
 80013aa:	bf00      	nop
 80013ac:	bd08      	pop	{r3, pc}
 80013ae:	bf00      	nop

080013b0 <Vector8C>:
/**
 * @brief   FDCAN1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_FDCAN1_IT0_HANDLER) {
 80013b0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <Vector8C+0x1c>)
 80013b4:	f001 feb4 	bl	8003120 <__trace_isr_enter>

  can_lld_serve_interrupt(&CAND1);
 80013b8:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <Vector8C+0x20>)
 80013ba:	f001 f9b1 	bl	8002720 <can_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80013be:	4803      	ldr	r0, [pc, #12]	@ (80013cc <Vector8C+0x1c>)
 80013c0:	f001 feee 	bl	80031a0 <__trace_isr_leave>
 80013c4:	f003 fafc 	bl	80049c0 <__port_irq_epilogue>
}
 80013c8:	bf00      	nop
 80013ca:	bd08      	pop	{r3, pc}
 80013cc:	08004cec 	.word	0x08004cec
 80013d0:	24000000 	.word	0x24000000
	...

080013e0 <fdcan2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void fdcan2_irq_init(void) {
 80013e0:	b508      	push	{r3, lr}
#if STM32_FDCAN2_IS_USED
  nvicEnableVector(STM32_FDCAN2_IT0_NUMBER, STM32_IRQ_FDCAN2_PRIORITY);
 80013e2:	210a      	movs	r1, #10
 80013e4:	2014      	movs	r0, #20
 80013e6:	f7ff ff4b 	bl	8001280 <nvicEnableVector>
#endif
}
 80013ea:	bf00      	nop
 80013ec:	bd08      	pop	{r3, pc}
 80013ee:	bf00      	nop

080013f0 <Vector90>:
/**
 * @brief   FDCAN2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_FDCAN2_IT0_HANDLER) {
 80013f0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 80013f2:	4806      	ldr	r0, [pc, #24]	@ (800140c <Vector90+0x1c>)
 80013f4:	f001 fe94 	bl	8003120 <__trace_isr_enter>

  can_lld_serve_interrupt(&CAND2);
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <Vector90+0x20>)
 80013fa:	f001 f991 	bl	8002720 <can_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80013fe:	4803      	ldr	r0, [pc, #12]	@ (800140c <Vector90+0x1c>)
 8001400:	f001 fece 	bl	80031a0 <__trace_isr_leave>
 8001404:	f003 fadc 	bl	80049c0 <__port_irq_epilogue>
}
 8001408:	bf00      	nop
 800140a:	bd08      	pop	{r3, pc}
 800140c:	08004cf8 	.word	0x08004cf8
 8001410:	24000038 	.word	0x24000038
	...

08001420 <fdcan3_irq_init>:

static inline void fdcan3_irq_init(void) {
#if STM32_FDCAN3_IS_USED
  nvicEnableVector(STM32_FDCAN3_IT0_NUMBER, STM32_IRQ_FDCAN3_PRIORITY);
#endif
}
 8001420:	bf00      	nop
 8001422:	4770      	bx	lr
	...

08001430 <quadspi1_irq_init>:

static inline void quadspi1_irq_init(void) {
#if STM32_QUADSPI1_IS_USED
  nvicEnableVector(STM32_QUADSPI1_NUMBER, STM32_IRQ_QUADSPI1_PRIORITY);
#endif
}
 8001430:	bf00      	nop
 8001432:	4770      	bx	lr
	...

08001440 <sdmmc1_irq_init>:

static inline void sdmmc1_irq_init(void) {
#if STM32_SDMMC1_IS_USED
  nvicEnableVector(STM32_SDMMC1_NUMBER, STM32_IRQ_SDMMC1_PRIORITY);
#endif
}
 8001440:	bf00      	nop
 8001442:	4770      	bx	lr
	...

08001450 <sdmmc2_irq_init>:

static inline void sdmmc2_irq_init(void) {
#if STM32_SDMMC2_IS_USED
  nvicEnableVector(STM32_SDMMC2_NUMBER, STM32_IRQ_SDMMC2_PRIORITY);
#endif
}
 8001450:	bf00      	nop
 8001452:	4770      	bx	lr
	...

08001460 <usart1_irq_init>:

static inline void usart1_irq_init(void) {
#if defined(STM32_USART1_IS_USED)
  nvicEnableVector(STM32_USART1_NUMBER, STM32_IRQ_USART1_PRIORITY);
#endif
}
 8001460:	bf00      	nop
 8001462:	4770      	bx	lr
	...

08001470 <usart2_irq_init>:

static inline void usart2_irq_init(void) {
#if defined(STM32_USART2_IS_USED)
  nvicEnableVector(STM32_USART2_NUMBER, STM32_IRQ_USART2_PRIORITY);
#endif
}
 8001470:	bf00      	nop
 8001472:	4770      	bx	lr
	...

08001480 <usart3_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void usart3_irq_init(void) {
 8001480:	b508      	push	{r3, lr}
#if defined(STM32_USART3_IS_USED)
  nvicEnableVector(STM32_USART3_NUMBER, STM32_IRQ_USART3_PRIORITY);
 8001482:	210c      	movs	r1, #12
 8001484:	2027      	movs	r0, #39	@ 0x27
 8001486:	f7ff fefb 	bl	8001280 <nvicEnableVector>
#endif
}
 800148a:	bf00      	nop
 800148c:	bd08      	pop	{r3, pc}
 800148e:	bf00      	nop

08001490 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8001490:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001492:	4806      	ldr	r0, [pc, #24]	@ (80014ac <VectorDC+0x1c>)
 8001494:	f001 fe44 	bl	8003120 <__trace_isr_enter>

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART3
  sd_lld_serve_interrupt(&SD3);
 8001498:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <VectorDC+0x20>)
 800149a:	f001 fb49 	bl	8002b30 <sd_lld_serve_interrupt>
#if STM32_UART_USE_USART3
  uart_lld_serve_interrupt(&UARTD3);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 800149e:	4803      	ldr	r0, [pc, #12]	@ (80014ac <VectorDC+0x1c>)
 80014a0:	f001 fe7e 	bl	80031a0 <__trace_isr_leave>
 80014a4:	f003 fa8c 	bl	80049c0 <__port_irq_epilogue>
}
 80014a8:	bf00      	nop
 80014aa:	bd08      	pop	{r3, pc}
 80014ac:	08004d04 	.word	0x08004d04
 80014b0:	24000070 	.word	0x24000070
	...

080014c0 <uart4_irq_init>:

static inline void uart4_irq_init(void) {
#if defined(STM32_UART4_IS_USED)
  nvicEnableVector(STM32_UART4_NUMBER, STM32_IRQ_UART4_PRIORITY);
#endif
}
 80014c0:	bf00      	nop
 80014c2:	4770      	bx	lr
	...

080014d0 <uart5_irq_init>:

static inline void uart5_irq_init(void) {
#if defined(STM32_UART5_IS_USED)
  nvicEnableVector(STM32_UART5_NUMBER, STM32_IRQ_UART5_PRIORITY);
#endif
}
 80014d0:	bf00      	nop
 80014d2:	4770      	bx	lr
	...

080014e0 <usart6_irq_init>:

static inline void usart6_irq_init(void) {
#if defined(STM32_USART6_IS_USED)
  nvicEnableVector(STM32_USART6_NUMBER, STM32_IRQ_USART6_PRIORITY);
#endif
}
 80014e0:	bf00      	nop
 80014e2:	4770      	bx	lr
	...

080014f0 <uart7_irq_init>:

static inline void uart7_irq_init(void) {
#if defined(STM32_UART7_IS_USED)
  nvicEnableVector(STM32_UART7_NUMBER, STM32_IRQ_UART7_PRIORITY);
#endif
}
 80014f0:	bf00      	nop
 80014f2:	4770      	bx	lr
	...

08001500 <uart8_irq_init>:

static inline void uart8_irq_init(void) {
#if defined(STM32_UART8_IS_USED)
  nvicEnableVector(STM32_UART8_NUMBER, STM32_IRQ_UART8_PRIORITY);
#endif
}
 8001500:	bf00      	nop
 8001502:	4770      	bx	lr
	...

08001510 <uart9_irq_init>:

static inline void uart9_irq_init(void) {
#if defined(STM32_UART9_IS_USED)
  nvicEnableVector(STM32_UART9_NUMBER, STM32_IRQ_UART9_PRIORITY);
#endif
}
 8001510:	bf00      	nop
 8001512:	4770      	bx	lr
	...

08001520 <usart10_irq_init>:

static inline void usart10_irq_init(void) {
#if defined(STM32_USART10_IS_USED)
  nvicEnableVector(STM32_USART10_NUMBER, STM32_IRQ_USART10_PRIORITY);
#endif
}
 8001520:	bf00      	nop
 8001522:	4770      	bx	lr
	...

08001530 <lpuart1_irq_init>:

static inline void lpuart1_irq_init(void) {
#if defined(STM32_LPUART1_IS_USED)
  nvicEnableVector(STM32_LPUART1_NUMBER, STM32_IRQ_LPUART1_PRIORITY);
#endif
}
 8001530:	bf00      	nop
 8001532:	4770      	bx	lr
	...

08001540 <tim1_irq_init>:
static inline void tim1_irq_init(void) {
#if defined(STM32_TIM1_IS_USED)
  nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_IRQ_TIM1_UP_PRIORITY);
  nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_IRQ_TIM1_CC_PRIORITY);
#endif
}
 8001540:	bf00      	nop
 8001542:	4770      	bx	lr
	...

08001550 <tim2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void tim2_irq_init(void) {
 8001550:	b508      	push	{r3, lr}
#if defined(STM32_TIM2_IS_USED)
  nvicEnableVector(STM32_TIM2_NUMBER, STM32_IRQ_TIM2_PRIORITY);
 8001552:	2107      	movs	r1, #7
 8001554:	201c      	movs	r0, #28
 8001556:	f7ff fe93 	bl	8001280 <nvicEnableVector>
#endif
}
 800155a:	bf00      	nop
 800155c:	bd08      	pop	{r3, pc}
 800155e:	bf00      	nop

08001560 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8001560:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8001562:	4806      	ldr	r0, [pc, #24]	@ (800157c <VectorB0+0x1c>)
 8001564:	f001 fddc 	bl	8003120 <__trace_isr_enter>
  pwm_lld_serve_interrupt(&PWMD2);
#endif
#endif
#if 1
#if STM32_ST_USE_TIM2
  st_lld_serve_interrupt();
 8001568:	f001 fa02 	bl	8002970 <st_lld_serve_interrupt>
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 800156c:	4803      	ldr	r0, [pc, #12]	@ (800157c <VectorB0+0x1c>)
 800156e:	f001 fe17 	bl	80031a0 <__trace_isr_leave>
 8001572:	f003 fa25 	bl	80049c0 <__port_irq_epilogue>
}
 8001576:	bf00      	nop
 8001578:	bd08      	pop	{r3, pc}
 800157a:	bf00      	nop
 800157c:	08004d10 	.word	0x08004d10

08001580 <tim3_irq_init>:

static inline void tim3_irq_init(void) {
#if defined(STM32_TIM3_IS_USED)
  nvicEnableVector(STM32_TIM3_NUMBER, STM32_IRQ_TIM3_PRIORITY);
#endif
}
 8001580:	bf00      	nop
 8001582:	4770      	bx	lr
	...

08001590 <tim4_irq_init>:

static inline void tim4_irq_init(void) {
#if defined(STM32_TIM4_IS_USED)
  nvicEnableVector(STM32_TIM4_NUMBER, STM32_IRQ_TIM4_PRIORITY);
#endif
}
 8001590:	bf00      	nop
 8001592:	4770      	bx	lr
	...

080015a0 <tim5_irq_init>:

static inline void tim5_irq_init(void) {
#if defined(STM32_TIM5_IS_USED)
  nvicEnableVector(STM32_TIM5_NUMBER, STM32_IRQ_TIM5_PRIORITY);
#endif
}
 80015a0:	bf00      	nop
 80015a2:	4770      	bx	lr
	...

080015b0 <tim6_irq_init>:

static inline void tim6_irq_init(void) {
#if defined(STM32_TIM6_IS_USED)
  nvicEnableVector(STM32_TIM6_NUMBER, STM32_IRQ_TIM6_PRIORITY);
#endif
}
 80015b0:	bf00      	nop
 80015b2:	4770      	bx	lr
	...

080015c0 <tim7_irq_init>:

static inline void tim7_irq_init(void) {
#if defined(STM32_TIM7_IS_USED)
  nvicEnableVector(STM32_TIM7_NUMBER, STM32_IRQ_TIM7_PRIORITY);
#endif
}
 80015c0:	bf00      	nop
 80015c2:	4770      	bx	lr
	...

080015d0 <tim8_tim12_tim13_tim14_irq_init>:
#endif
#if defined(STM32_TIM8_IS_USED)
  nvicEnableVector(STM32_TIM8_CC_NUMBER,
                   STM32_IRQ_TIM8_CC_PRIORITY);
#endif
}
 80015d0:	bf00      	nop
 80015d2:	4770      	bx	lr
	...

080015e0 <tim15_irq_init>:

static inline void tim15_irq_init(void) {
#if defined(STM32_TIM15_IS_USED)
  nvicEnableVector(STM32_TIM15_NUMBER, STM32_IRQ_TIM15_PRIORITY);
#endif
}
 80015e0:	bf00      	nop
 80015e2:	4770      	bx	lr
	...

080015f0 <tim16_irq_init>:

static inline void tim16_irq_init(void) {
#if defined(STM32_TIM16_IS_USED)
  nvicEnableVector(STM32_TIM16_NUMBER, STM32_IRQ_TIM16_PRIORITY);
#endif
}
 80015f0:	bf00      	nop
 80015f2:	4770      	bx	lr
	...

08001600 <tim17_irq_init>:

static inline void tim17_irq_init(void) {
#if defined(STM32_TIM17_IS_USED)
  nvicEnableVector(STM32_TIM17_NUMBER, STM32_IRQ_TIM17_PRIORITY);
#endif
}
 8001600:	bf00      	nop
 8001602:	4770      	bx	lr
	...

08001610 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8001610:	b508      	push	{r3, lr}

  exti0_irq_init();
 8001612:	f7ff fe65 	bl	80012e0 <exti0_irq_init>
  exti1_irq_init();
 8001616:	f7ff fe6b 	bl	80012f0 <exti1_irq_init>
  exti2_irq_init();
 800161a:	f7ff fe71 	bl	8001300 <exti2_irq_init>
  exti3_irq_init();
 800161e:	f7ff fe77 	bl	8001310 <exti3_irq_init>
  exti4_irq_init();
 8001622:	f7ff fe7d 	bl	8001320 <exti4_irq_init>
  exti5_9_irq_init();
 8001626:	f7ff fe83 	bl	8001330 <exti5_9_irq_init>
  exti10_15_irq_init();
 800162a:	f7ff fe89 	bl	8001340 <exti10_15_irq_init>
  exti16_irq_init();
 800162e:	f7ff fe8f 	bl	8001350 <exti16_irq_init>
  exti17_irq_init();
 8001632:	f7ff fe95 	bl	8001360 <exti17_irq_init>
  exti18_irq_init();
 8001636:	f7ff fe9b 	bl	8001370 <exti18_irq_init>
  exti19_irq_init();
 800163a:	f7ff fea1 	bl	8001380 <exti19_irq_init>
  exti20_exti21_irq_init();
 800163e:	f7ff fea7 	bl	8001390 <exti20_exti21_irq_init>

  fdcan1_irq_init();
 8001642:	f7ff fead 	bl	80013a0 <fdcan1_irq_init>
  fdcan2_irq_init();
 8001646:	f7ff fecb 	bl	80013e0 <fdcan2_irq_init>
  fdcan3_irq_init();
 800164a:	f7ff fee9 	bl	8001420 <fdcan3_irq_init>

  mdma_irq_init();
 800164e:	2109      	movs	r1, #9
 8001650:	207a      	movs	r0, #122	@ 0x7a
 8001652:	f7ff fe15 	bl	8001280 <nvicEnableVector>

#if defined(HAL_LLD_TYPE1_H)
  quadspi1_irq_init();
 8001656:	f7ff feeb 	bl	8001430 <quadspi1_irq_init>
#elif defined(HAL_LLD_TYPE2_H)
  octospi1_irq_init();
  octospi2_irq_init();
#endif

  sdmmc1_irq_init();
 800165a:	f7ff fef1 	bl	8001440 <sdmmc1_irq_init>
  sdmmc2_irq_init();
 800165e:	f7ff fef7 	bl	8001450 <sdmmc2_irq_init>

  tim1_irq_init();
 8001662:	f7ff ff6d 	bl	8001540 <tim1_irq_init>
  tim2_irq_init();
 8001666:	f7ff ff73 	bl	8001550 <tim2_irq_init>
  tim3_irq_init();
 800166a:	f7ff ff89 	bl	8001580 <tim3_irq_init>
  tim4_irq_init();
 800166e:	f7ff ff8f 	bl	8001590 <tim4_irq_init>
  tim5_irq_init();
 8001672:	f7ff ff95 	bl	80015a0 <tim5_irq_init>
  tim6_irq_init();
 8001676:	f7ff ff9b 	bl	80015b0 <tim6_irq_init>
  tim7_irq_init();
 800167a:	f7ff ffa1 	bl	80015c0 <tim7_irq_init>
  tim8_tim12_tim13_tim14_irq_init();
 800167e:	f7ff ffa7 	bl	80015d0 <tim8_tim12_tim13_tim14_irq_init>
  tim15_irq_init();
 8001682:	f7ff ffad 	bl	80015e0 <tim15_irq_init>
  tim16_irq_init();
 8001686:	f7ff ffb3 	bl	80015f0 <tim16_irq_init>
  tim17_irq_init();
 800168a:	f7ff ffb9 	bl	8001600 <tim17_irq_init>

  usart1_irq_init();
 800168e:	f7ff fee7 	bl	8001460 <usart1_irq_init>
  usart2_irq_init();
 8001692:	f7ff feed 	bl	8001470 <usart2_irq_init>
  usart3_irq_init();
 8001696:	f7ff fef3 	bl	8001480 <usart3_irq_init>
  uart4_irq_init();
 800169a:	f7ff ff11 	bl	80014c0 <uart4_irq_init>
  uart5_irq_init();
 800169e:	f7ff ff17 	bl	80014d0 <uart5_irq_init>
  usart6_irq_init();
 80016a2:	f7ff ff1d 	bl	80014e0 <usart6_irq_init>
  uart7_irq_init();
 80016a6:	f7ff ff23 	bl	80014f0 <uart7_irq_init>
  uart8_irq_init();
 80016aa:	f7ff ff29 	bl	8001500 <uart8_irq_init>
  uart9_irq_init();
 80016ae:	f7ff ff2f 	bl	8001510 <uart9_irq_init>
  usart10_irq_init();
 80016b2:	f7ff ff35 	bl	8001520 <usart10_irq_init>
  lpuart1_irq_init();
 80016b6:	f7ff ff3b 	bl	8001530 <lpuart1_irq_init>
}
 80016ba:	bf00      	nop
 80016bc:	bd08      	pop	{r3, pc}
 80016be:	bf00      	nop

080016c0 <__rccResetAPB1L>:

/*===========================================================================*/
/* Driver macros.                                                            */
/*===========================================================================*/

__STATIC_INLINE void __rccResetAPB1L(uint32_t mask) {
 80016c0:	b082      	sub	sp, #8
 80016c2:	9001      	str	r0, [sp, #4]

  /* Resetting the peripherals.*/
  RCC->APB1LRSTR |= mask;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <__rccResetAPB1L+0x34>)
 80016c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80016ca:	490a      	ldr	r1, [pc, #40]	@ (80016f4 <__rccResetAPB1L+0x34>)
 80016cc:	9b01      	ldr	r3, [sp, #4]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  RCC->APB1LRSTR &= ~mask;
 80016d4:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <__rccResetAPB1L+0x34>)
 80016d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80016da:	9b01      	ldr	r3, [sp, #4]
 80016dc:	43db      	mvns	r3, r3
 80016de:	4905      	ldr	r1, [pc, #20]	@ (80016f4 <__rccResetAPB1L+0x34>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  (void)RCC->APB1LRSTR;
 80016e6:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <__rccResetAPB1L+0x34>)
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80016ec:	bf00      	nop
 80016ee:	b002      	add	sp, #8
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	58024400 	.word	0x58024400
	...

08001700 <__rccResetAPB1H.lto_priv.0>:

__STATIC_INLINE void __rccResetAPB1H(uint32_t mask) {
 8001700:	b082      	sub	sp, #8
 8001702:	9001      	str	r0, [sp, #4]

  /* Resetting the peripherals.*/
  RCC->APB1HRSTR |= mask;
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <__rccResetAPB1H.lto_priv.0+0x34>)
 8001706:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800170a:	490a      	ldr	r1, [pc, #40]	@ (8001734 <__rccResetAPB1H.lto_priv.0+0x34>)
 800170c:	9b01      	ldr	r3, [sp, #4]
 800170e:	4313      	orrs	r3, r2
 8001710:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  RCC->APB1HRSTR &= ~mask;
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <__rccResetAPB1H.lto_priv.0+0x34>)
 8001716:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800171a:	9b01      	ldr	r3, [sp, #4]
 800171c:	43db      	mvns	r3, r3
 800171e:	4905      	ldr	r1, [pc, #20]	@ (8001734 <__rccResetAPB1H.lto_priv.0+0x34>)
 8001720:	4013      	ands	r3, r2
 8001722:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  (void)RCC->APB1HRSTR;
 8001726:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <__rccResetAPB1H.lto_priv.0+0x34>)
 8001728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
}
 800172c:	bf00      	nop
 800172e:	b002      	add	sp, #8
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	58024400 	.word	0x58024400
	...

08001740 <__rccResetAPB2>:

__STATIC_INLINE void __rccResetAPB2(uint32_t mask) {
 8001740:	b082      	sub	sp, #8
 8001742:	9001      	str	r0, [sp, #4]

  /* Resetting the peripherals.*/
  RCC->APB2RSTR |= mask;
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <__rccResetAPB2+0x34>)
 8001746:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800174a:	490a      	ldr	r1, [pc, #40]	@ (8001774 <__rccResetAPB2+0x34>)
 800174c:	9b01      	ldr	r3, [sp, #4]
 800174e:	4313      	orrs	r3, r2
 8001750:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
  RCC->APB2RSTR &= ~mask;
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <__rccResetAPB2+0x34>)
 8001756:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800175a:	9b01      	ldr	r3, [sp, #4]
 800175c:	43db      	mvns	r3, r3
 800175e:	4905      	ldr	r1, [pc, #20]	@ (8001774 <__rccResetAPB2+0x34>)
 8001760:	4013      	ands	r3, r2
 8001762:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
  (void)RCC->APB2RSTR;
 8001766:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <__rccResetAPB2+0x34>)
 8001768:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
}
 800176c:	bf00      	nop
 800176e:	b002      	add	sp, #8
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	58024400 	.word	0x58024400
	...

08001780 <__rccResetAPB3>:

__STATIC_INLINE void __rccResetAPB3(uint32_t mask) {
 8001780:	b082      	sub	sp, #8
 8001782:	9001      	str	r0, [sp, #4]

  /* Resetting the peripherals.*/
  RCC->APB3RSTR |= mask;
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <__rccResetAPB3+0x34>)
 8001786:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800178a:	490a      	ldr	r1, [pc, #40]	@ (80017b4 <__rccResetAPB3+0x34>)
 800178c:	9b01      	ldr	r3, [sp, #4]
 800178e:	4313      	orrs	r3, r2
 8001790:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  RCC->APB3RSTR &= ~mask;
 8001794:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <__rccResetAPB3+0x34>)
 8001796:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800179a:	9b01      	ldr	r3, [sp, #4]
 800179c:	43db      	mvns	r3, r3
 800179e:	4905      	ldr	r1, [pc, #20]	@ (80017b4 <__rccResetAPB3+0x34>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  (void)RCC->APB3RSTR;
 80017a6:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <__rccResetAPB3+0x34>)
 80017a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80017ac:	bf00      	nop
 80017ae:	b002      	add	sp, #8
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	58024400 	.word	0x58024400
	...

080017c0 <__rccResetAPB4>:

__STATIC_INLINE void __rccResetAPB4(uint32_t mask) {
 80017c0:	b082      	sub	sp, #8
 80017c2:	9001      	str	r0, [sp, #4]

  /* Resetting the peripherals.*/
  RCC->APB4RSTR |= mask;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <__rccResetAPB4+0x34>)
 80017c6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80017ca:	490a      	ldr	r1, [pc, #40]	@ (80017f4 <__rccResetAPB4+0x34>)
 80017cc:	9b01      	ldr	r3, [sp, #4]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  RCC->APB4RSTR &= ~mask;
 80017d4:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <__rccResetAPB4+0x34>)
 80017d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80017da:	9b01      	ldr	r3, [sp, #4]
 80017dc:	43db      	mvns	r3, r3
 80017de:	4905      	ldr	r1, [pc, #20]	@ (80017f4 <__rccResetAPB4+0x34>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  (void)RCC->APB4RSTR;
 80017e6:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <__rccResetAPB4+0x34>)
 80017e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
}
 80017ec:	bf00      	nop
 80017ee:	b002      	add	sp, #8
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	58024400 	.word	0x58024400
	...

08001800 <__rccResetAHB1>:

__STATIC_INLINE void __rccResetAHB1(uint32_t mask) {
 8001800:	b082      	sub	sp, #8
 8001802:	9001      	str	r0, [sp, #4]

  /* Resetting the peripherals.*/
  RCC->AHB1RSTR |= mask;
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <__rccResetAHB1+0x34>)
 8001806:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800180a:	490a      	ldr	r1, [pc, #40]	@ (8001834 <__rccResetAHB1+0x34>)
 800180c:	9b01      	ldr	r3, [sp, #4]
 800180e:	4313      	orrs	r3, r2
 8001810:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
  RCC->AHB1RSTR &= ~mask;
 8001814:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <__rccResetAHB1+0x34>)
 8001816:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800181a:	9b01      	ldr	r3, [sp, #4]
 800181c:	43db      	mvns	r3, r3
 800181e:	4905      	ldr	r1, [pc, #20]	@ (8001834 <__rccResetAHB1+0x34>)
 8001820:	4013      	ands	r3, r2
 8001822:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
  (void)RCC->AHB1RSTR;
 8001826:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <__rccResetAHB1+0x34>)
 8001828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800182c:	bf00      	nop
 800182e:	b002      	add	sp, #8
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	58024400 	.word	0x58024400
	...

08001840 <__rccResetAHB2>:

__STATIC_INLINE void __rccResetAHB2(uint32_t mask) {
 8001840:	b082      	sub	sp, #8
 8001842:	9001      	str	r0, [sp, #4]

  /* Resetting the peripherals.*/
  RCC->AHB2RSTR |= mask;
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <__rccResetAHB2+0x34>)
 8001846:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800184a:	490a      	ldr	r1, [pc, #40]	@ (8001874 <__rccResetAHB2+0x34>)
 800184c:	9b01      	ldr	r3, [sp, #4]
 800184e:	4313      	orrs	r3, r2
 8001850:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
  RCC->AHB2RSTR &= ~mask;
 8001854:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <__rccResetAHB2+0x34>)
 8001856:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800185a:	9b01      	ldr	r3, [sp, #4]
 800185c:	43db      	mvns	r3, r3
 800185e:	4905      	ldr	r1, [pc, #20]	@ (8001874 <__rccResetAHB2+0x34>)
 8001860:	4013      	ands	r3, r2
 8001862:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
  (void)RCC->AHB2RSTR;
 8001866:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <__rccResetAHB2+0x34>)
 8001868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 800186c:	bf00      	nop
 800186e:	b002      	add	sp, #8
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	58024400 	.word	0x58024400
	...

08001880 <__rccResetAHB3>:

__STATIC_INLINE void __rccResetAHB3(uint32_t mask) {
 8001880:	b082      	sub	sp, #8
 8001882:	9001      	str	r0, [sp, #4]

  /* Resetting the peripherals.*/
  RCC->AHB3RSTR |= mask;
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <__rccResetAHB3+0x28>)
 8001886:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001888:	4907      	ldr	r1, [pc, #28]	@ (80018a8 <__rccResetAHB3+0x28>)
 800188a:	9b01      	ldr	r3, [sp, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RCC->AHB3RSTR &= ~mask;
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <__rccResetAHB3+0x28>)
 8001892:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001894:	9b01      	ldr	r3, [sp, #4]
 8001896:	43db      	mvns	r3, r3
 8001898:	4903      	ldr	r1, [pc, #12]	@ (80018a8 <__rccResetAHB3+0x28>)
 800189a:	4013      	ands	r3, r2
 800189c:	67cb      	str	r3, [r1, #124]	@ 0x7c
  (void)RCC->AHB3RSTR;
 800189e:	4b02      	ldr	r3, [pc, #8]	@ (80018a8 <__rccResetAHB3+0x28>)
 80018a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
}
 80018a2:	bf00      	nop
 80018a4:	b002      	add	sp, #8
 80018a6:	4770      	bx	lr
 80018a8:	58024400 	.word	0x58024400
 80018ac:	00000000 	.word	0x00000000

080018b0 <__rccResetAHB4.lto_priv.0>:

__STATIC_INLINE void __rccResetAHB4(uint32_t mask) {
 80018b0:	b082      	sub	sp, #8
 80018b2:	9001      	str	r0, [sp, #4]

  /* Resetting the peripherals.*/
  RCC->AHB4RSTR |= mask;
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <__rccResetAHB4.lto_priv.0+0x34>)
 80018b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80018ba:	490a      	ldr	r1, [pc, #40]	@ (80018e4 <__rccResetAHB4.lto_priv.0+0x34>)
 80018bc:	9b01      	ldr	r3, [sp, #4]
 80018be:	4313      	orrs	r3, r2
 80018c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->AHB4RSTR &= ~mask;
 80018c4:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <__rccResetAHB4.lto_priv.0+0x34>)
 80018c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80018ca:	9b01      	ldr	r3, [sp, #4]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4905      	ldr	r1, [pc, #20]	@ (80018e4 <__rccResetAHB4.lto_priv.0+0x34>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  (void)RCC->AHB4RSTR;
 80018d6:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <__rccResetAHB4.lto_priv.0+0x34>)
 80018d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80018dc:	bf00      	nop
 80018de:	b002      	add	sp, #8
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	58024400 	.word	0x58024400
	...

080018f0 <rccEnableAPB4>:
 * @param[in] mask              mask of peripherals to be enabled
 * @param[in] lp                low power enable flag
 *
 * @api
 */
__STATIC_INLINE void rccEnableAPB4(uint32_t mask, bool lp) {
 80018f0:	b082      	sub	sp, #8
 80018f2:	9001      	str	r0, [sp, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	f88d 3003 	strb.w	r3, [sp, #3]

#if STM32_TARGET_CORE == 1
  /* Allocating and enabling the peripherals.*/
  RCC_C1->APB4ENR |= mask;
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <rccEnableAPB4+0x54>)
 80018fc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001900:	4910      	ldr	r1, [pc, #64]	@ (8001944 <rccEnableAPB4+0x54>)
 8001902:	9b01      	ldr	r3, [sp, #4]
 8001904:	4313      	orrs	r3, r2
 8001906:	f8c1 30f4 	str.w	r3, [r1, #244]	@ 0xf4
  if (lp) {
 800190a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d008      	beq.n	8001924 <rccEnableAPB4+0x34>
    RCC_C1->APB4LPENR |= mask;
 8001912:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <rccEnableAPB4+0x54>)
 8001914:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8001918:	490a      	ldr	r1, [pc, #40]	@ (8001944 <rccEnableAPB4+0x54>)
 800191a:	9b01      	ldr	r3, [sp, #4]
 800191c:	4313      	orrs	r3, r2
 800191e:	f8c1 311c 	str.w	r3, [r1, #284]	@ 0x11c
 8001922:	e008      	b.n	8001936 <rccEnableAPB4+0x46>
  }
  else {
    RCC_C1->APB4LPENR &= ~mask;
 8001924:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <rccEnableAPB4+0x54>)
 8001926:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 800192a:	9b01      	ldr	r3, [sp, #4]
 800192c:	43db      	mvns	r3, r3
 800192e:	4905      	ldr	r1, [pc, #20]	@ (8001944 <rccEnableAPB4+0x54>)
 8001930:	4013      	ands	r3, r2
 8001932:	f8c1 311c 	str.w	r3, [r1, #284]	@ 0x11c
  }
  (void)RCC_C1->APB4LPENR;
 8001936:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <rccEnableAPB4+0x54>)
 8001938:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
  else {
    RCC_C2->APB4LPENR &= ~mask;
  }
  (void)RCC_C2->APB4LPENR;
#endif
}
 800193c:	bf00      	nop
 800193e:	b002      	add	sp, #8
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	58024400 	.word	0x58024400
	...

08001950 <rccEnableAHB2>:
 * @param[in] mask              mask of peripherals to be enabled
 * @param[in] lp                low power enable flag
 *
 * @api
 */
__STATIC_INLINE void rccEnableAHB2(uint32_t mask, bool lp) {
 8001950:	b082      	sub	sp, #8
 8001952:	9001      	str	r0, [sp, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	f88d 3003 	strb.w	r3, [sp, #3]

#if STM32_TARGET_CORE == 1
  /* Allocating and enabling the peripherals.*/
  RCC_C1->AHB2ENR |= mask;
 800195a:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <rccEnableAHB2+0x54>)
 800195c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8001960:	4910      	ldr	r1, [pc, #64]	@ (80019a4 <rccEnableAHB2+0x54>)
 8001962:	9b01      	ldr	r3, [sp, #4]
 8001964:	4313      	orrs	r3, r2
 8001966:	f8c1 30dc 	str.w	r3, [r1, #220]	@ 0xdc
  if (lp) {
 800196a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <rccEnableAHB2+0x34>
    RCC_C1->AHB2LPENR |= mask;
 8001972:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <rccEnableAHB2+0x54>)
 8001974:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001978:	490a      	ldr	r1, [pc, #40]	@ (80019a4 <rccEnableAHB2+0x54>)
 800197a:	9b01      	ldr	r3, [sp, #4]
 800197c:	4313      	orrs	r3, r2
 800197e:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
 8001982:	e008      	b.n	8001996 <rccEnableAHB2+0x46>
  }
  else {
    RCC_C1->AHB2LPENR &= ~mask;
 8001984:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <rccEnableAHB2+0x54>)
 8001986:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800198a:	9b01      	ldr	r3, [sp, #4]
 800198c:	43db      	mvns	r3, r3
 800198e:	4905      	ldr	r1, [pc, #20]	@ (80019a4 <rccEnableAHB2+0x54>)
 8001990:	4013      	ands	r3, r2
 8001992:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }
  (void)RCC_C1->AHB2LPENR;
 8001996:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <rccEnableAHB2+0x54>)
 8001998:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
  else {
    RCC_C2->AHB2LPENR &= ~mask;
  }
  (void)RCC_C2->AHB2LPENR;
#endif
}
 800199c:	bf00      	nop
 800199e:	b002      	add	sp, #8
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	58024400 	.word	0x58024400
	...

080019b0 <rccEnableAHB4.lto_priv.0>:
 * @param[in] mask              mask of peripherals to be enabled
 * @param[in] lp                low power enable flag
 *
 * @api
 */
__STATIC_INLINE void rccEnableAHB4(uint32_t mask, bool lp) {
 80019b0:	b082      	sub	sp, #8
 80019b2:	9001      	str	r0, [sp, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	f88d 3003 	strb.w	r3, [sp, #3]

#if STM32_TARGET_CORE == 1
  /* Allocating and enabling the peripherals.*/
  RCC_C1->AHB4ENR |= mask;
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <rccEnableAHB4.lto_priv.0+0x54>)
 80019bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80019c0:	4910      	ldr	r1, [pc, #64]	@ (8001a04 <rccEnableAHB4.lto_priv.0+0x54>)
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  if (lp) {
 80019ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <rccEnableAHB4.lto_priv.0+0x34>
    RCC_C1->AHB4LPENR |= mask;
 80019d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <rccEnableAHB4.lto_priv.0+0x54>)
 80019d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80019d8:	490a      	ldr	r1, [pc, #40]	@ (8001a04 <rccEnableAHB4.lto_priv.0+0x54>)
 80019da:	9b01      	ldr	r3, [sp, #4]
 80019dc:	4313      	orrs	r3, r2
 80019de:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
 80019e2:	e008      	b.n	80019f6 <rccEnableAHB4.lto_priv.0+0x46>
  }
  else {
    RCC_C1->AHB4LPENR &= ~mask;
 80019e4:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <rccEnableAHB4.lto_priv.0+0x54>)
 80019e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80019ea:	9b01      	ldr	r3, [sp, #4]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4905      	ldr	r1, [pc, #20]	@ (8001a04 <rccEnableAHB4.lto_priv.0+0x54>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }
  (void)RCC_C1->AHB4LPENR;
 80019f6:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <rccEnableAHB4.lto_priv.0+0x54>)
 80019f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  else {
    RCC_C2->AHB4LPENR &= ~mask;
  }
  (void)RCC_C2->AHB4LPENR;
#endif
}
 80019fc:	bf00      	nop
 80019fe:	b002      	add	sp, #8
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	58024400 	.word	0x58024400
	...

08001a10 <init_bkp_domain>:
 *          of the whole BKP domain.
 */
static inline void init_bkp_domain(void) {

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <init_bkp_domain+0x3c>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a1c:	d006      	beq.n	8001a2c <init_bkp_domain+0x1c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <init_bkp_domain+0x3c>)
 8001a20:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a24:	671a      	str	r2, [r3, #112]	@ 0x70
    RCC->BDCR = 0;
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <init_bkp_domain+0x3c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	671a      	str	r2, [r3, #112]	@ 0x70
#if defined(STM32_LSE_BYPASS)
  /* LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON | RCC_BDCR_LSEBYP;
#else
  /* No LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <init_bkp_domain+0x3c>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a30:	4a06      	ldr	r2, [pc, #24]	@ (8001a4c <init_bkp_domain+0x3c>)
 8001a32:	f043 0319 	orr.w	r3, r3, #25
 8001a36:	6713      	str	r3, [r2, #112]	@ 0x70
#endif
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
 8001a38:	bf00      	nop
 8001a3a:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <init_bkp_domain+0x3c>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f9      	beq.n	8001a3a <init_bkp_domain+0x2a>

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
#endif /* HAL_USE_RTC */
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	4770      	bx	lr
 8001a4c:	58024400 	.word	0x58024400

08001a50 <init_pwr>:

/**
 * @brief   Initializes the PWR unit.
 */
static inline void init_pwr(void) {
 8001a50:	b508      	push	{r3, lr}
  PWR_TypeDef *pwr = PWR; /* For inspection.*/
  (void)pwr;
#endif
  /* Lower C3 byte, it must be programmed at very first, then waiting for
     power supply to stabilize.*/
  PWR->CR3   = STM32_PWR_CR3 & 0x000000FFU;
 8001a52:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <init_pwr+0x68>)
 8001a54:	2202      	movs	r2, #2
 8001a56:	60da      	str	r2, [r3, #12]
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0)
 8001a58:	bf00      	nop
 8001a5a:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <init_pwr+0x68>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f9      	beq.n	8001a5a <init_pwr+0xa>
    ; /* CHTODO timeout handling.*/

  /* Backup domain access enabled and left open.*/
  PWR->CR1   = STM32_PWR_CR1 | 0xF0000000U | PWR_CR1_DBP;
 8001a66:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <init_pwr+0x68>)
 8001a68:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <init_pwr+0x6c>)
 8001a6a:	601a      	str	r2, [r3, #0]

  PWR->CR2   = STM32_PWR_CR2;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <init_pwr+0x68>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	609a      	str	r2, [r3, #8]
  PWR->CR3   = STM32_PWR_CR3;   /* Other bits, lower byte is not changed.   */
 8001a72:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <init_pwr+0x68>)
 8001a74:	4a12      	ldr	r2, [pc, #72]	@ (8001ac0 <init_pwr+0x70>)
 8001a76:	60da      	str	r2, [r3, #12]
  PWR->CPUCR = STM32_PWR_CPUCR;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <init_pwr+0x68>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
#if defined(HAL_LLD_TYPE3_H)
  PWR->SRDCR = STM32_VOS;
#else
  PWR->D3CR  = STM32_VOS;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab8 <init_pwr+0x68>)
 8001a80:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8001a84:	619a      	str	r2, [r3, #24]
#endif
#if defined(HAL_LLD_TYPE1_H)
#if !defined(STM32_ENFORCE_H7_REV_XY)
  SYSCFG->PWRCR = STM32_ODEN;
 8001a86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <init_pwr+0x74>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
#endif
#if defined(HAL_LLD_TYPE3_H)
  while ((PWR->SRDCR & PWR_SRDCR_VOSRDY) == 0)
#else
  while ((PWR->D3CR & PWR_D3CR_VOSRDY) == 0)
 8001a8c:	bf00      	nop
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <init_pwr+0x68>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f9      	beq.n	8001a8e <init_pwr+0x3e>
#endif
    ; /* CHTODO timeout handling.*/
#if STM32_PWR_CR2 & PWR_CR2_BREN
  while ((PWR->CR2 & PWR_CR2_BRRDY) == 0)
 8001a9a:	bf00      	nop
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <init_pwr+0x68>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f9      	beq.n	8001a9c <init_pwr+0x4c>
    ;
  rccEnableBKPRAM(true);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001aae:	f7ff ff7f 	bl	80019b0 <rccEnableAHB4.lto_priv.0>
#endif
}
 8001ab2:	bf00      	nop
 8001ab4:	bd08      	pop	{r3, pc}
 8001ab6:	bf00      	nop
 8001ab8:	58024800 	.word	0x58024800
 8001abc:	f000c100 	.word	0xf000c100
 8001ac0:	01000002 	.word	0x01000002
 8001ac4:	58000400 	.word	0x58000400
	...

08001ad0 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8001ad0:	b508      	push	{r3, lr}
     Note, GPIOs are not reset because initialized before this point in
     board files.
     Note that there is an undocumented bit in AHB1, presumably the cache
     reset, which must not be touched because the cache is write-back and
     latest writes could be lost.*/
  __rccResetAHB1(~RCC_AHB1RSTR_DONOTTOUCH);
 8001ad2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8001ad6:	f7ff fe93 	bl	8001800 <__rccResetAHB1>
  __rccResetAHB2(~0);
 8001ada:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ade:	f7ff feaf 	bl	8001840 <__rccResetAHB2>
  __rccResetAHB3(~(RCC_AHB3RSTR_FMCRST    |
 8001ae2:	480f      	ldr	r0, [pc, #60]	@ (8001b20 <hal_lld_init+0x50>)
 8001ae4:	f7ff fecc 	bl	8001880 <__rccResetAHB3>
                   RCC_AHB3RSTR_OSPI2RST  |
                   RCC_AHB3RSTR_IOMNGRRST |
                   RCC_AHB3RSTR_MDMARST   |
#endif
                   0x80000000U));   /* Was RCC_AHB3RSTR_CPURST in Rev-V.*/
  __rccResetAHB4(~(RCC_APB4RSTR_SYSCFGRST | STM32_GPIO_EN_MASK));
 8001ae8:	480e      	ldr	r0, [pc, #56]	@ (8001b24 <hal_lld_init+0x54>)
 8001aea:	f7ff fee1 	bl	80018b0 <__rccResetAHB4.lto_priv.0>
  __rccResetAPB1L(~0);
 8001aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001af2:	f7ff fde5 	bl	80016c0 <__rccResetAPB1L>
  __rccResetAPB1H(~0);
 8001af6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001afa:	f7ff fe01 	bl	8001700 <__rccResetAPB1H.lto_priv.0>
  __rccResetAPB2(~0);
 8001afe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b02:	f7ff fe1d 	bl	8001740 <__rccResetAPB2>
  __rccResetAPB3(~0);
 8001b06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b0a:	f7ff fe39 	bl	8001780 <__rccResetAPB3>
  __rccResetAPB4(~0);
 8001b0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b12:	f7ff fe55 	bl	80017c0 <__rccResetAPB4>
#if defined(STM32_MDMA_REQUIRED)
  mdmaInit();
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 8001b16:	f7ff fd7b 	bl	8001610 <irqInit>
       immediately.*/
    SCB_CleanInvalidateDCache();
#endif
  }
#endif
}
 8001b1a:	bf00      	nop
 8001b1c:	bd08      	pop	{r3, pc}
 8001b1e:	bf00      	nop
 8001b20:	7fffefff 	.word	0x7fffefff
 8001b24:	fffff800 	.word	0xfffff800
	...

08001b30 <stm32_clock_init>:
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
 8001b30:	b500      	push	{lr}
 8001b32:	b085      	sub	sp, #20
  *((volatile uint32_t *)(0x51000000 + 0x1108 + 0x7000)) = 0x00000001U;
#endif

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB4(RCC_APB4ENR_SYSCFGEN, true);
 8001b34:	2101      	movs	r1, #1
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7ff feda 	bl	80018f0 <rccEnableAPB4>

  /* PWR initialization.*/
  init_pwr();
 8001b3c:	f7ff ff88 	bl	8001a50 <init_pwr>

  /* Backup domain initialization.*/
  init_bkp_domain();
 8001b40:	f7ff ff66 	bl	8001a10 <init_bkp_domain>

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001b44:	4b89      	ldr	r3, [pc, #548]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a88      	ldr	r2, [pc, #544]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001b50:	bf00      	nop
 8001b52:	4b86      	ldr	r3, [pc, #536]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f9      	beq.n	8001b52 <stm32_clock_init+0x22>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. This is only required when using a debugger than can cause
     restarts.*/
  RCC->CFGR    = 0x00000000U;               /* Reset SW to HSI.             */
 8001b5e:	4b83      	ldr	r3, [pc, #524]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001b64:	bf00      	nop
 8001b66:	4b81      	ldr	r3, [pc, #516]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f9      	bne.n	8001b66 <stm32_clock_init+0x36>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers cleared to reset values.*/
  RCC->CR      = RCC_CR_HSION;             /* CR Reset value.              */
 8001b72:	4b7e      	ldr	r3, [pc, #504]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
  RCC->HSICFGR = 0x40000000U;              /* HSICFGR Reset value.         */
 8001b78:	4b7c      	ldr	r3, [pc, #496]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001b7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b7e:	605a      	str	r2, [r3, #4]
#if !defined(STM32_ENFORCE_H7_REV_XY)
  RCC->CSICFGR = 0x20000000U;              /* CSICFGR Reset value.         */
 8001b80:	4b7a      	ldr	r3, [pc, #488]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001b82:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b86:	60da      	str	r2, [r3, #12]
#endif
  RCC->CSR     = 0x00000000U;              /* CSR reset value.             */
 8001b88:	4b78      	ldr	r3, [pc, #480]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC->PLLCFGR = 0x01FF0000U;              /* PLLCFGR reset value.         */
 8001b8e:	4b77      	ldr	r3, [pc, #476]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001b90:	4a77      	ldr	r2, [pc, #476]	@ (8001d70 <stm32_clock_init+0x240>)
 8001b92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Other clock-related settings, done before other things because
     recommended in the RM.*/
  cfgr = STM32_MCO2SEL | RCC_CFGR_MCO2PRE_VALUE(STM32_MCO2PRE_VALUE) |
 8001b94:	4b77      	ldr	r3, [pc, #476]	@ (8001d74 <stm32_clock_init+0x244>)
 8001b96:	9303      	str	r3, [sp, #12]
         STM32_STOPKERWUCK | STM32_STOPWUCK;
#if !defined(HAL_LLD_TYPE3_H)
  cfgr |= STM32_HRTIMSEL;
#endif
#if STM32_TIMPRE_ENABLE == TRUE
  cfgr |= RCC_CFGR_TIMPRE;
 8001b98:	9b03      	ldr	r3, [sp, #12]
 8001b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b9e:	9303      	str	r3, [sp, #12]
#endif
  RCC->CFGR = cfgr;
 8001ba0:	4a72      	ldr	r2, [pc, #456]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001ba2:	9b03      	ldr	r3, [sp, #12]
 8001ba4:	6113      	str	r3, [r2, #16]

  /* HSE activation with optional bypass.*/
#if STM32_HSE_ENABLED == TRUE
#if defined(STM32_HSE_BYPASS)
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8001ba6:	4b71      	ldr	r3, [pc, #452]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a70      	ldr	r2, [pc, #448]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001bac:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8001bb0:	6013      	str	r3, [r2, #0]
#else
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001bb2:	bf00      	nop
 8001bb4:	4b6d      	ldr	r3, [pc, #436]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f9      	beq.n	8001bb4 <stm32_clock_init+0x84>
    ;                           /* Waits until HSE is stable.               */
#endif /* STM32_HSE_ENABLED == TRUE */

  /* HSI48 activation.*/
#if STM32_HSI48_ENABLED == TRUE
  RCC->CR |= RCC_CR_HSI48ON;
 8001bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a69      	ldr	r2, [pc, #420]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001bc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bca:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSI48RDY) == 0)
 8001bcc:	bf00      	nop
 8001bce:	4b67      	ldr	r3, [pc, #412]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f9      	beq.n	8001bce <stm32_clock_init+0x9e>

#endif /* STM32_HSI48_ENABLED == TRUE */

  /* CSI activation.*/
#if STM32_CSI_ENABLED == TRUE
  RCC->CR |= RCC_CR_CSION;
 8001bda:	4b64      	ldr	r3, [pc, #400]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a63      	ldr	r2, [pc, #396]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be4:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_CSIRDY) == 0)
 8001be6:	bf00      	nop
 8001be8:	4b60      	ldr	r3, [pc, #384]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f9      	beq.n	8001be8 <stm32_clock_init+0xb8>
    ;                           /* Waits until CSI is stable.               */
#endif /* STM32_CSI_ENABLED == TRUE */

  /* LSI activation.*/
#if STM32_LSI_ENABLED == TRUE
  RCC->CSR |= RCC_CSR_LSION;
 8001bf4:	4b5d      	ldr	r3, [pc, #372]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf8:	4a5c      	ldr	r2, [pc, #368]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6753      	str	r3, [r2, #116]	@ 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001c00:	bf00      	nop
 8001c02:	4b5a      	ldr	r3, [pc, #360]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f9      	beq.n	8001c02 <stm32_clock_init+0xd2>
     reduce boot time.*/
#if (STM32_PLL1_ENABLED == TRUE) ||                                         \
    (STM32_PLL2_ENABLED == TRUE) ||                                         \
    (STM32_PLL3_ENABLED == TRUE)
  {
    uint32_t onmask = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9302      	str	r3, [sp, #8]
    uint32_t rdymask = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	9301      	str	r3, [sp, #4]
    uint32_t cfgmask = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	9300      	str	r3, [sp, #0]

    RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM3_VALUE(STM32_PLL3_DIVM_VALUE) |
 8001c1a:	4b54      	ldr	r3, [pc, #336]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001c1c:	4a56      	ldr	r2, [pc, #344]	@ (8001d78 <stm32_clock_init+0x248>)
 8001c1e:	629a      	str	r2, [r3, #40]	@ 0x28
                     RCC_PLLCKSELR_DIVM2_VALUE(STM32_PLL2_DIVM_VALUE) |
                     RCC_PLLCKSELR_DIVM1_VALUE(STM32_PLL1_DIVM_VALUE) |
                     RCC_PLLCKSELR_PLLSRC_VALUE(STM32_PLLSRC);

    cfgmask = STM32_PLLCFGR_PLL3RGE | STM32_PLLCFGR_PLL3VCOSEL | RCC_PLLCFGR_PLL3FRACEN |
 8001c20:	f640 73f9 	movw	r3, #4089	@ 0xff9
 8001c24:	9300      	str	r3, [sp, #0]
              STM32_PLLCFGR_PLL2RGE | STM32_PLLCFGR_PLL2VCOSEL | RCC_PLLCFGR_PLL2FRACEN |
              STM32_PLLCFGR_PLL1RGE | STM32_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN;

#if STM32_PLL1_ENABLED == TRUE
    RCC->PLL1FRACR = STM32_PLL1_FRACN;
 8001c26:	4b51      	ldr	r3, [pc, #324]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->PLL1DIVR  = STM32_PLL1_DIVR | STM32_PLL1_DIVQ |
 8001c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001c2e:	4a53      	ldr	r2, [pc, #332]	@ (8001d7c <stm32_clock_init+0x24c>)
 8001c30:	631a      	str	r2, [r3, #48]	@ 0x30
                     STM32_PLL1_DIVP | STM32_PLL1_DIVN;
    onmask  |= RCC_CR_PLL1ON;
 8001c32:	9b02      	ldr	r3, [sp, #8]
 8001c34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c38:	9302      	str	r3, [sp, #8]
    rdymask |= RCC_CR_PLL1RDY;
 8001c3a:	9b01      	ldr	r3, [sp, #4]
 8001c3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c40:	9301      	str	r3, [sp, #4]
#if STM32_PLL1_P_ENABLED == TRUE
    cfgmask |= RCC_PLLCFGR_DIVP1EN;
 8001c42:	9b00      	ldr	r3, [sp, #0]
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c48:	9300      	str	r3, [sp, #0]
#endif
#if STM32_PLL1_Q_ENABLED == TRUE
    cfgmask |= RCC_PLLCFGR_DIVQ1EN;
 8001c4a:	9b00      	ldr	r3, [sp, #0]
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c50:	9300      	str	r3, [sp, #0]
#endif
#if STM32_PLL1_R_ENABLED == TRUE
    cfgmask |= RCC_PLLCFGR_DIVR1EN;
 8001c52:	9b00      	ldr	r3, [sp, #0]
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c58:	9300      	str	r3, [sp, #0]
#endif
#endif /* STM32_PLL1_ENABLED == TRUE */

#if STM32_PLL2_ENABLED == TRUE
    RCC->PLL2FRACR = STM32_PLL2_FRACN;
 8001c5a:	4b44      	ldr	r3, [pc, #272]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
    RCC->PLL2DIVR  = STM32_PLL2_DIVR | STM32_PLL2_DIVQ |
 8001c60:	4b42      	ldr	r3, [pc, #264]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001c62:	4a47      	ldr	r2, [pc, #284]	@ (8001d80 <stm32_clock_init+0x250>)
 8001c64:	639a      	str	r2, [r3, #56]	@ 0x38
                     STM32_PLL2_DIVP | STM32_PLL2_DIVN;
    onmask  |= RCC_CR_PLL2ON;
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c6c:	9302      	str	r3, [sp, #8]
    rdymask |= RCC_CR_PLL2RDY;
 8001c6e:	9b01      	ldr	r3, [sp, #4]
 8001c70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c74:	9301      	str	r3, [sp, #4]
#if STM32_PLL2_P_ENABLED == TRUE
    cfgmask |= RCC_PLLCFGR_DIVP2EN;
 8001c76:	9b00      	ldr	r3, [sp, #0]
 8001c78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c7c:	9300      	str	r3, [sp, #0]
#endif
#if STM32_PLL2_Q_ENABLED == TRUE
    cfgmask |= RCC_PLLCFGR_DIVQ2EN;
 8001c7e:	9b00      	ldr	r3, [sp, #0]
 8001c80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c84:	9300      	str	r3, [sp, #0]
#endif
#if STM32_PLL2_R_ENABLED == TRUE
    cfgmask |= RCC_PLLCFGR_DIVR2EN;
 8001c86:	9b00      	ldr	r3, [sp, #0]
 8001c88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c8c:	9300      	str	r3, [sp, #0]
#endif
#endif /* STM32_PLL2_ENABLED == TRUE */

#if STM32_PLL3_ENABLED == TRUE
    RCC->PLL3FRACR = STM32_PLL3_FRACN;
 8001c8e:	4b37      	ldr	r3, [pc, #220]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	645a      	str	r2, [r3, #68]	@ 0x44
    RCC->PLL3DIVR  = STM32_PLL3_DIVR | STM32_PLL3_DIVQ |
 8001c94:	4b35      	ldr	r3, [pc, #212]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001c96:	4a3b      	ldr	r2, [pc, #236]	@ (8001d84 <stm32_clock_init+0x254>)
 8001c98:	641a      	str	r2, [r3, #64]	@ 0x40
                     STM32_PLL3_DIVP | STM32_PLL3_DIVN;
    onmask  |= RCC_CR_PLL3ON;
 8001c9a:	9b02      	ldr	r3, [sp, #8]
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	9302      	str	r3, [sp, #8]
    rdymask |= RCC_CR_PLL3RDY;
 8001ca2:	9b01      	ldr	r3, [sp, #4]
 8001ca4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ca8:	9301      	str	r3, [sp, #4]
#if STM32_PLL3_P_ENABLED == TRUE
    cfgmask |= RCC_PLLCFGR_DIVP3EN;
 8001caa:	9b00      	ldr	r3, [sp, #0]
 8001cac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cb0:	9300      	str	r3, [sp, #0]
#endif
#if STM32_PLL3_Q_ENABLED == TRUE
    cfgmask |= RCC_PLLCFGR_DIVQ3EN;
 8001cb2:	9b00      	ldr	r3, [sp, #0]
 8001cb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cb8:	9300      	str	r3, [sp, #0]
#endif
#if STM32_PLL3_R_ENABLED == TRUE
    cfgmask |= RCC_PLLCFGR_DIVR3EN;
 8001cba:	9b00      	ldr	r3, [sp, #0]
 8001cbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cc0:	9300      	str	r3, [sp, #0]
#endif
#endif /* STM32_PLL3_ENABLED == TRUE */

    /* Activating enabled PLLs and waiting for all of them to become ready.*/
    RCC->PLLCFGR = cfgmask & STM32_PLLCFGR_MASK;
 8001cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001cc4:	9b00      	ldr	r3, [sp, #0]
 8001cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    RCC->CR     |= onmask;
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4927      	ldr	r1, [pc, #156]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001cce:	9b02      	ldr	r3, [sp, #8]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
    while ((RCC->CR & rdymask) != rdymask)
 8001cd4:	bf00      	nop
 8001cd6:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	9b01      	ldr	r3, [sp, #4]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	9a01      	ldr	r2, [sp, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d1f8      	bne.n	8001cd6 <stm32_clock_init+0x1a6>
#if defined(HAL_LLD_TYPE3_H)
  RCC->CDCFGR1 = STM32_CDCPRE  | STM32_CDPPRE | STM32_CDHPRE;
  RCC->CDCFGR2 = STM32_CDPPRE2 | STM32_CDPPRE1;
  RCC->SRDCFGR = STM32_SRDPPRE;
#else
  RCC->D1CFGR = STM32_D1CPRE  | STM32_D1PPRE3 | STM32_D1HPRE;
 8001ce4:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001ce6:	2248      	movs	r2, #72	@ 0x48
 8001ce8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = STM32_D2PPRE2 | STM32_D2PPRE1;
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001cec:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8001cf0:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = STM32_D3PPRE4;
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001cf4:	2240      	movs	r2, #64	@ 0x40
 8001cf6:	621a      	str	r2, [r3, #32]
#endif

  /* Peripherals clocks.*/
#if defined(HAL_LLD_TYPE1_H)
  RCC->D1CCIPR  = STM32_CKPERSEL   | STM32_SDMMCSEL    | STM32_QSPISEL       |
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001cfa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001cfe:	64da      	str	r2, [r3, #76]	@ 0x4c
                  STM32_FMCSEL;
  RCC->D2CCIP1R = STM32_SWPSEL     | STM32_FDCANSEL    | STM32_DFSDM1SEL     |
 8001d00:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d06:	651a      	str	r2, [r3, #80]	@ 0x50
                  STM32_SPDIFSEL   | STM32_SPDIFSEL    | STM32_SPI45SEL      |
                  STM32_SPI123SEL  | STM32_SAI23SEL    | STM32_SAI1SEL;
  RCC->D2CCIP2R = STM32_LPTIM1SEL  | STM32_CECSEL      | STM32_USBSEL        |
 8001d08:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001d0a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001d0e:	655a      	str	r2, [r3, #84]	@ 0x54
                  STM32_I2C123SEL  | STM32_RNGSEL      | STM32_USART16SEL    |
                  STM32_USART234578SEL;
  RCC->D3CCIPR  = STM32_SPI6SEL    | STM32_SAI4BSEL    | STM32_SAI4ASEL      |
 8001d10:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	659a      	str	r2, [r3, #88]	@ 0x58
                  STM32_LPTIM3SEL  | STM32_LPTIM2SEL   | STM32_I2C4SEL       |
                  STM32_LPUART1SEL;
#endif

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_WRHIGHFREQ_1 | FLASH_ACR_WRHIGHFREQ_0 |
 8001d16:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <stm32_clock_init+0x258>)
 8001d18:	2234      	movs	r2, #52	@ 0x34
 8001d1a:	601a      	str	r2, [r3, #0]
               STM32_FLASHBITS;
  while ((FLASH->ACR & FLASH_ACR_LATENCY) !=
 8001d1c:	bf00      	nop
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <stm32_clock_init+0x258>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d1f9      	bne.n	8001d1e <stm32_clock_init+0x1ee>
  }

  /* Switching to the configured clock source if it is different
     from HSI.*/
#if STM32_SW != STM32_SW_HSI_CK
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001d30:	f043 0303 	orr.w	r3, r3, #3
 8001d34:	6113      	str	r3, [r2, #16]
  while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != (STM32_SW << RCC_CFGR_SWS_Pos))
 8001d36:	bf00      	nop
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <stm32_clock_init+0x23c>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d40:	2b18      	cmp	r3, #24
 8001d42:	d1f9      	bne.n	8001d38 <stm32_clock_init+0x208>
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;
#endif

  /* RAM1 2 and 3 clocks enabled.*/
  rccEnableSRAM1(true);
 8001d44:	2101      	movs	r1, #1
 8001d46:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8001d4a:	f7ff fe01 	bl	8001950 <rccEnableAHB2>
  rccEnableSRAM2(true);
 8001d4e:	2101      	movs	r1, #1
 8001d50:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001d54:	f7ff fdfc 	bl	8001950 <rccEnableAHB2>
#if !(defined(HAL_LLD_TYPE2_H) || defined(HAL_LLD_TYPE3_H))
  rccEnableSRAM3(true);
 8001d58:	2101      	movs	r1, #1
 8001d5a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8001d5e:	f7ff fdf7 	bl	8001950 <rccEnableAHB2>
#endif
#endif /* STM32_NO_INIT */
}
 8001d62:	bf00      	nop
 8001d64:	b005      	add	sp, #20
 8001d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d6a:	bf00      	nop
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	01ff0000 	.word	0x01ff0000
 8001d74:	08100800 	.word	0x08100800
 8001d78:	00202052 	.word	0x00202052
 8001d7c:	010e02bf 	.word	0x010e02bf
 8001d80:	0101020b 	.word	0x0101020b
 8001d84:	0001020b 	.word	0x0001020b
 8001d88:	52002000 	.word	0x52002000
 8001d8c:	00000000 	.word	0x00000000

08001d90 <chTimeAddX.lto_priv.0>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 8001d90:	b082      	sub	sp, #8
 8001d92:	9001      	str	r0, [sp, #4]
 8001d94:	9100      	str	r1, [sp, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8001d96:	9a01      	ldr	r2, [sp, #4]
 8001d98:	9b00      	ldr	r3, [sp, #0]
 8001d9a:	4413      	add	r3, r2
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	b002      	add	sp, #8
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
	...

08001db0 <chTimeIsInRangeX.lto_priv.0>:
 *
 * @xclass
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {
 8001db0:	b084      	sub	sp, #16
 8001db2:	9003      	str	r0, [sp, #12]
 8001db4:	9102      	str	r1, [sp, #8]
 8001db6:	9201      	str	r2, [sp, #4]

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8001db8:	9a03      	ldr	r2, [sp, #12]
 8001dba:	9b02      	ldr	r3, [sp, #8]
 8001dbc:	1ad2      	subs	r2, r2, r3
                (systime_t)((systime_t)end - (systime_t)start));
 8001dbe:	9901      	ldr	r1, [sp, #4]
 8001dc0:	9b02      	ldr	r3, [sp, #8]
 8001dc2:	1acb      	subs	r3, r1, r3
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	bf34      	ite	cc
 8001dc8:	2301      	movcc	r3, #1
 8001dca:	2300      	movcs	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	b004      	add	sp, #16
 8001dd2:	4770      	bx	lr
	...

08001de0 <port_timer_get_time.lto_priv.0>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 8001de0:	b508      	push	{r3, lr}

  return stGetCounter();
 8001de2:	f7fe fc7d 	bl	80006e0 <stGetCounter>
 8001de6:	4603      	mov	r3, r0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd08      	pop	{r3, pc}
 8001dec:	0000      	movs	r0, r0
	...

08001df0 <chSysLockFromISR.lto_priv.0>:
 *          not be limited to disabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8001df0:	b082      	sub	sp, #8
 8001df2:	2330      	movs	r3, #48	@ 0x30
 8001df4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001df6:	9b01      	ldr	r3, [sp, #4]
 8001df8:	f383 8811 	msr	BASEPRI, r3
}
 8001dfc:	bf00      	nop
}
 8001dfe:	bf00      	nop
 * @note    Same as @p port_lock() in this port.
 */
__STATIC_FORCEINLINE void port_lock_from_isr(void) {

  port_lock();
}
 8001e00:	bf00      	nop

  port_lock_from_isr();
  __stats_start_measure_crit_isr();
  __dbg_check_lock_from_isr();
}
 8001e02:	bf00      	nop
 8001e04:	b002      	add	sp, #8
 8001e06:	4770      	bx	lr
	...

08001e10 <chSysUnlockFromISR.lto_priv.0>:
 *          not be limited to enabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8001e10:	b082      	sub	sp, #8
 8001e12:	2300      	movs	r3, #0
 8001e14:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001e16:	9b01      	ldr	r3, [sp, #4]
 8001e18:	f383 8811 	msr	BASEPRI, r3
}
 8001e1c:	bf00      	nop
}
 8001e1e:	bf00      	nop
 * @note    Same as @p port_unlock() in this port.
 */
__STATIC_FORCEINLINE void port_unlock_from_isr(void) {

  port_unlock();
}
 8001e20:	bf00      	nop

  __dbg_check_unlock_from_isr();
  __stats_stop_measure_crit_isr();
  port_unlock_from_isr();
}
 8001e22:	bf00      	nop
 8001e24:	b002      	add	sp, #8
 8001e26:	4770      	bx	lr
	...

08001e30 <chVTGetSystemTimeX.lto_priv.0>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8001e30:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8001e32:	f7ff ffd5 	bl	8001de0 <port_timer_get_time.lto_priv.0>
 8001e36:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd08      	pop	{r3, pc}
 8001e3c:	0000      	movs	r0, r0
	...

08001e40 <chThdSleepS.lto_priv.0>:
static inline void chThdSleepS(sysinterval_t ticks) {
 8001e40:	b500      	push	{lr}
 8001e42:	b083      	sub	sp, #12
 8001e44:	9001      	str	r0, [sp, #4]
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001e46:	9901      	ldr	r1, [sp, #4]
 8001e48:	2008      	movs	r0, #8
 8001e4a:	f001 fe91 	bl	8003b70 <chSchGoSleepTimeoutS>
}
 8001e4e:	bf00      	nop
 8001e50:	b003      	add	sp, #12
 8001e52:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e56:	bf00      	nop
	...

08001e60 <osalSysLockFromISR.lto_priv.0>:
static inline void osalSysLockFromISR(void) {
 8001e60:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8001e62:	f7ff ffc5 	bl	8001df0 <chSysLockFromISR.lto_priv.0>
}
 8001e66:	bf00      	nop
 8001e68:	bd08      	pop	{r3, pc}
 8001e6a:	bf00      	nop
 8001e6c:	0000      	movs	r0, r0
	...

08001e70 <osalSysUnlockFromISR.lto_priv.0>:
static inline void osalSysUnlockFromISR(void) {
 8001e70:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8001e72:	f7ff ffcd 	bl	8001e10 <chSysUnlockFromISR.lto_priv.0>
}
 8001e76:	bf00      	nop
 8001e78:	bd08      	pop	{r3, pc}
 8001e7a:	bf00      	nop
 8001e7c:	0000      	movs	r0, r0
	...

08001e80 <osalOsGetSystemTimeX>:
static inline systime_t osalOsGetSystemTimeX(void) {
 8001e80:	b508      	push	{r3, lr}
  return chVTGetSystemTimeX();
 8001e82:	f7ff ffd5 	bl	8001e30 <chVTGetSystemTimeX.lto_priv.0>
 8001e86:	4603      	mov	r3, r0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd08      	pop	{r3, pc}
 8001e8c:	0000      	movs	r0, r0
	...

08001e90 <osalTimeAddX>:
                                     sysinterval_t interval) {
 8001e90:	b500      	push	{lr}
 8001e92:	b083      	sub	sp, #12
 8001e94:	9001      	str	r0, [sp, #4]
 8001e96:	9100      	str	r1, [sp, #0]
  return chTimeAddX(systime, interval);
 8001e98:	9900      	ldr	r1, [sp, #0]
 8001e9a:	9801      	ldr	r0, [sp, #4]
 8001e9c:	f7ff ff78 	bl	8001d90 <chTimeAddX.lto_priv.0>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	b003      	add	sp, #12
 8001ea6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eaa:	bf00      	nop
 8001eac:	0000      	movs	r0, r0
	...

08001eb0 <osalTimeIsInRangeX>:
                                      systime_t end) {
 8001eb0:	b500      	push	{lr}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	9003      	str	r0, [sp, #12]
 8001eb6:	9102      	str	r1, [sp, #8]
 8001eb8:	9201      	str	r2, [sp, #4]
  return chTimeIsInRangeX(time, start, end);
 8001eba:	9a01      	ldr	r2, [sp, #4]
 8001ebc:	9902      	ldr	r1, [sp, #8]
 8001ebe:	9803      	ldr	r0, [sp, #12]
 8001ec0:	f7ff ff76 	bl	8001db0 <chTimeIsInRangeX.lto_priv.0>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	b005      	add	sp, #20
 8001eca:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ece:	bf00      	nop

08001ed0 <osalThreadSleepS>:
static inline void osalThreadSleepS(sysinterval_t delay) {
 8001ed0:	b500      	push	{lr}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	9001      	str	r0, [sp, #4]
  chThdSleepS(delay);
 8001ed6:	9801      	ldr	r0, [sp, #4]
 8001ed8:	f7ff ffb2 	bl	8001e40 <chThdSleepS.lto_priv.0>
}
 8001edc:	bf00      	nop
 8001ede:	b003      	add	sp, #12
 8001ee0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001ef0 <osalThreadDequeueAllI.lto_priv.3>:
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001ef0:	b500      	push	{lr}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	9001      	str	r0, [sp, #4]
 8001ef6:	9100      	str	r1, [sp, #0]
  chThdDequeueAllI(tqp, msg);
 8001ef8:	9900      	ldr	r1, [sp, #0]
 8001efa:	9801      	ldr	r0, [sp, #4]
 8001efc:	f002 fa08 	bl	8004310 <chThdDequeueAllI>
}
 8001f00:	bf00      	nop
 8001f02:	b003      	add	sp, #12
 8001f04:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001f10 <osalEventBroadcastFlagsI.lto_priv.3>:
                                            eventflags_t flags) {
 8001f10:	b500      	push	{lr}
 8001f12:	b083      	sub	sp, #12
 8001f14:	9001      	str	r0, [sp, #4]
 8001f16:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8001f18:	9900      	ldr	r1, [sp, #0]
 8001f1a:	9801      	ldr	r0, [sp, #4]
 8001f1c:	f002 fb40 	bl	80045a0 <chEvtBroadcastFlagsI>
}
 8001f20:	bf00      	nop
 8001f22:	b003      	add	sp, #12
 8001f24:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001f30 <__rccResetAPB1H.lto_priv.1>:
__STATIC_INLINE void __rccResetAPB1H(uint32_t mask) {
 8001f30:	b082      	sub	sp, #8
 8001f32:	9001      	str	r0, [sp, #4]
  RCC->APB1HRSTR |= mask;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <__rccResetAPB1H.lto_priv.1+0x34>)
 8001f36:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8001f3a:	490a      	ldr	r1, [pc, #40]	@ (8001f64 <__rccResetAPB1H.lto_priv.1+0x34>)
 8001f3c:	9b01      	ldr	r3, [sp, #4]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  RCC->APB1HRSTR &= ~mask;
 8001f44:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <__rccResetAPB1H.lto_priv.1+0x34>)
 8001f46:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8001f4a:	9b01      	ldr	r3, [sp, #4]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4905      	ldr	r1, [pc, #20]	@ (8001f64 <__rccResetAPB1H.lto_priv.1+0x34>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  (void)RCC->APB1HRSTR;
 8001f56:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <__rccResetAPB1H.lto_priv.1+0x34>)
 8001f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
}
 8001f5c:	bf00      	nop
 8001f5e:	b002      	add	sp, #8
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	58024400 	.word	0x58024400
	...

08001f70 <rccEnableAPB1H>:
__STATIC_INLINE void rccEnableAPB1H(uint32_t mask, bool lp) {
 8001f70:	b082      	sub	sp, #8
 8001f72:	9001      	str	r0, [sp, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	f88d 3003 	strb.w	r3, [sp, #3]
  RCC_C1->APB1HENR |= mask;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <rccEnableAPB1H+0x54>)
 8001f7c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8001f80:	4910      	ldr	r1, [pc, #64]	@ (8001fc4 <rccEnableAPB1H+0x54>)
 8001f82:	9b01      	ldr	r3, [sp, #4]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
  if (lp) {
 8001f8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <rccEnableAPB1H+0x34>
    RCC_C1->APB1HLPENR |= mask;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <rccEnableAPB1H+0x54>)
 8001f94:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8001f98:	490a      	ldr	r1, [pc, #40]	@ (8001fc4 <rccEnableAPB1H+0x54>)
 8001f9a:	9b01      	ldr	r3, [sp, #4]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3114 	str.w	r3, [r1, #276]	@ 0x114
 8001fa2:	e008      	b.n	8001fb6 <rccEnableAPB1H+0x46>
    RCC_C1->APB1HLPENR &= ~mask;
 8001fa4:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <rccEnableAPB1H+0x54>)
 8001fa6:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8001faa:	9b01      	ldr	r3, [sp, #4]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4905      	ldr	r1, [pc, #20]	@ (8001fc4 <rccEnableAPB1H+0x54>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	f8c1 3114 	str.w	r3, [r1, #276]	@ 0x114
  (void)RCC_C1->APB1HLPENR;
 8001fb6:	4b03      	ldr	r3, [pc, #12]	@ (8001fc4 <rccEnableAPB1H+0x54>)
 8001fb8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
}
 8001fbc:	bf00      	nop
 8001fbe:	b002      	add	sp, #8
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	58024400 	.word	0x58024400
	...

08001fd0 <rccResetAPB1H>:
__STATIC_INLINE void rccResetAPB1H(uint32_t mask) {
 8001fd0:	b500      	push	{lr}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	9001      	str	r0, [sp, #4]
  __rccResetAPB1H(mask);
 8001fd6:	9801      	ldr	r0, [sp, #4]
 8001fd8:	f7ff ffaa 	bl	8001f30 <__rccResetAPB1H.lto_priv.1>
}
 8001fdc:	bf00      	nop
 8001fde:	b003      	add	sp, #12
 8001fe0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001ff0 <fdcan_clock_stop>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static bool fdcan_clock_stop(CANDriver *canp) {
 8001ff0:	b500      	push	{lr}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	9001      	str	r0, [sp, #4]
  systime_t start, end;

  /* Requesting clock stop then waiting for it to happen.*/
  canp->fdcan->CCCR |= FDCAN_CCCR_CSR;
 8001ff6:	9b01      	ldr	r3, [sp, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	699a      	ldr	r2, [r3, #24]
 8001ffc:	9b01      	ldr	r3, [sp, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002000:	f042 0210 	orr.w	r2, r2, #16
 8002004:	619a      	str	r2, [r3, #24]
  start = osalOsGetSystemTimeX();
 8002006:	f7ff ff3b 	bl	8001e80 <osalOsGetSystemTimeX>
 800200a:	9003      	str	r0, [sp, #12]
  end = osalTimeAddX(start, TIME_MS2I(TIMEOUT_INIT_MS));
 800200c:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8002010:	9803      	ldr	r0, [sp, #12]
 8002012:	f7ff ff3d 	bl	8001e90 <osalTimeAddX>
 8002016:	9002      	str	r0, [sp, #8]
  while ((canp->fdcan->CCCR & FDCAN_CCCR_CSA) == 0U) {
 8002018:	e012      	b.n	8002040 <fdcan_clock_stop+0x50>
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 800201a:	f7ff ff31 	bl	8001e80 <osalOsGetSystemTimeX>
 800201e:	4603      	mov	r3, r0
 8002020:	9a02      	ldr	r2, [sp, #8]
 8002022:	9903      	ldr	r1, [sp, #12]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff43 	bl	8001eb0 <osalTimeIsInRangeX>
 800202a:	4603      	mov	r3, r0
 800202c:	f083 0301 	eor.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <fdcan_clock_stop+0x4a>
      return true;
 8002036:	2301      	movs	r3, #1
 8002038:	e00a      	b.n	8002050 <fdcan_clock_stop+0x60>
    }
    osalThreadSleepS(1);
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff ff48 	bl	8001ed0 <osalThreadSleepS>
  while ((canp->fdcan->CCCR & FDCAN_CCCR_CSA) == 0U) {
 8002040:	9b01      	ldr	r3, [sp, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0e5      	beq.n	800201a <fdcan_clock_stop+0x2a>
  }

  return false;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	b005      	add	sp, #20
 8002054:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002060 <fdcan_init_mode>:

static bool fdcan_init_mode(CANDriver *canp) {
 8002060:	b500      	push	{lr}
 8002062:	b085      	sub	sp, #20
 8002064:	9001      	str	r0, [sp, #4]
  systime_t start, end;

  /* Going in initialization mode then waiting for it to happen.*/
  canp->fdcan->CCCR |= FDCAN_CCCR_INIT;
 8002066:	9b01      	ldr	r3, [sp, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	699a      	ldr	r2, [r3, #24]
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	619a      	str	r2, [r3, #24]
  start = osalOsGetSystemTimeX();
 8002076:	f7ff ff03 	bl	8001e80 <osalOsGetSystemTimeX>
 800207a:	9003      	str	r0, [sp, #12]
  end = osalTimeAddX(start, TIME_MS2I(TIMEOUT_INIT_MS));
 800207c:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8002080:	9803      	ldr	r0, [sp, #12]
 8002082:	f7ff ff05 	bl	8001e90 <osalTimeAddX>
 8002086:	9002      	str	r0, [sp, #8]
  while ((canp->fdcan->CCCR & FDCAN_CCCR_INIT) == 0U) {
 8002088:	e012      	b.n	80020b0 <fdcan_init_mode+0x50>
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 800208a:	f7ff fef9 	bl	8001e80 <osalOsGetSystemTimeX>
 800208e:	4603      	mov	r3, r0
 8002090:	9a02      	ldr	r2, [sp, #8]
 8002092:	9903      	ldr	r1, [sp, #12]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff0b 	bl	8001eb0 <osalTimeIsInRangeX>
 800209a:	4603      	mov	r3, r0
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <fdcan_init_mode+0x4a>
      return true;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e00a      	b.n	80020c0 <fdcan_init_mode+0x60>
    }
    osalThreadSleepS(1);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7ff ff10 	bl	8001ed0 <osalThreadSleepS>
  while ((canp->fdcan->CCCR & FDCAN_CCCR_INIT) == 0U) {
 80020b0:	9b01      	ldr	r3, [sp, #4]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0e5      	beq.n	800208a <fdcan_init_mode+0x2a>
  }

  return false;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	b005      	add	sp, #20
 80020c4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080020d0 <fdcan_active_mode>:

static bool fdcan_active_mode(CANDriver *canp) {
 80020d0:	b500      	push	{lr}
 80020d2:	b085      	sub	sp, #20
 80020d4:	9001      	str	r0, [sp, #4]
  systime_t start, end;

  /* Going in active mode then waiting for it to happen.*/
  canp->fdcan->CCCR &= ~FDCAN_CCCR_INIT;
 80020d6:	9b01      	ldr	r3, [sp, #4]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	9b01      	ldr	r3, [sp, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	619a      	str	r2, [r3, #24]
  start = osalOsGetSystemTimeX();
 80020e6:	f7ff fecb 	bl	8001e80 <osalOsGetSystemTimeX>
 80020ea:	9003      	str	r0, [sp, #12]
  end = osalTimeAddX(start, TIME_MS2I(TIMEOUT_INIT_MS));
 80020ec:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80020f0:	9803      	ldr	r0, [sp, #12]
 80020f2:	f7ff fecd 	bl	8001e90 <osalTimeAddX>
 80020f6:	9002      	str	r0, [sp, #8]
  while ((canp->fdcan->CCCR & FDCAN_CCCR_INIT) != 0U) {
 80020f8:	e012      	b.n	8002120 <fdcan_active_mode+0x50>
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 80020fa:	f7ff fec1 	bl	8001e80 <osalOsGetSystemTimeX>
 80020fe:	4603      	mov	r3, r0
 8002100:	9a02      	ldr	r2, [sp, #8]
 8002102:	9903      	ldr	r1, [sp, #12]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fed3 	bl	8001eb0 <osalTimeIsInRangeX>
 800210a:	4603      	mov	r3, r0
 800210c:	f083 0301 	eor.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <fdcan_active_mode+0x4a>
      return true;
 8002116:	2301      	movs	r3, #1
 8002118:	e00a      	b.n	8002130 <fdcan_active_mode+0x60>
    }
    osalThreadSleepS(1);
 800211a:	2001      	movs	r0, #1
 800211c:	f7ff fed8 	bl	8001ed0 <osalThreadSleepS>
  while ((canp->fdcan->CCCR & FDCAN_CCCR_INIT) != 0U) {
 8002120:	9b01      	ldr	r3, [sp, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1e5      	bne.n	80020fa <fdcan_active_mode+0x2a>
  }

  return false;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	b005      	add	sp, #20
 8002134:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002140 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 8002140:	b508      	push	{r3, lr}

  /* Unit reset.*/
  rccResetFDCAN();
 8002142:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002146:	f7ff ff43 	bl	8001fd0 <rccResetAPB1H>

#if STM32_CAN_USE_FDCAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 800214a:	480a      	ldr	r0, [pc, #40]	@ (8002174 <can_lld_init+0x34>)
 800214c:	f7fe fea0 	bl	8000e90 <canObjectInit>
  CAND1.fdcan = FDCAN1;
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <can_lld_init+0x34>)
 8002152:	4a09      	ldr	r2, [pc, #36]	@ (8002178 <can_lld_init+0x38>)
 8002154:	631a      	str	r2, [r3, #48]	@ 0x30
  CAND1.ram_base = ((uint32_t *)SRAMCAN_BASE + (CAN1_OFFSET_INSTANCE * SRAMCAN_SIZE));
 8002156:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <can_lld_init+0x34>)
 8002158:	4a08      	ldr	r2, [pc, #32]	@ (800217c <can_lld_init+0x3c>)
 800215a:	635a      	str	r2, [r3, #52]	@ 0x34
#endif

#if STM32_CAN_USE_FDCAN2
  /* Driver initialization.*/
  canObjectInit(&CAND2);
 800215c:	4808      	ldr	r0, [pc, #32]	@ (8002180 <can_lld_init+0x40>)
 800215e:	f7fe fe97 	bl	8000e90 <canObjectInit>
  CAND2.fdcan = FDCAN2;
 8002162:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <can_lld_init+0x40>)
 8002164:	4a07      	ldr	r2, [pc, #28]	@ (8002184 <can_lld_init+0x44>)
 8002166:	631a      	str	r2, [r3, #48]	@ 0x30
  CAND2.ram_base = ((uint32_t *)SRAMCAN_BASE + (CAN2_OFFSET_INSTANCE * SRAMCAN_SIZE));
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <can_lld_init+0x40>)
 800216a:	4a07      	ldr	r2, [pc, #28]	@ (8002188 <can_lld_init+0x48>)
 800216c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Driver initialization.*/
  canObjectInit(&CAND3);
  CAND3.fdcan = FDCAN3;
  CAND3.ram_base = ((uint32_t *)SRAMCAN_BASE + (CAN3_OFFSET_INSTANCE * SRAMCAN_SIZE));
#endif
}
 800216e:	bf00      	nop
 8002170:	bd08      	pop	{r3, pc}
 8002172:	bf00      	nop
 8002174:	24000000 	.word	0x24000000
 8002178:	4000a000 	.word	0x4000a000
 800217c:	4000ac00 	.word	0x4000ac00
 8002180:	24000038 	.word	0x24000038
 8002184:	4000a400 	.word	0x4000a400
 8002188:	4000bfc0 	.word	0x4000bfc0
 800218c:	00000000 	.word	0x00000000

08002190 <can_lld_start>:
 * @retval false        if the operation succeeded.
 * @retval true         if the operation failed.
 *
 * @notapi
 */
bool can_lld_start(CANDriver *canp) {
 8002190:	b500      	push	{lr}
 8002192:	b085      	sub	sp, #20
 8002194:	9001      	str	r0, [sp, #4]

  /* Clock activation.*/
  rccEnableFDCAN(true);
 8002196:	2101      	movs	r1, #1
 8002198:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800219c:	f7ff fee8 	bl	8001f70 <rccEnableAPB1H>

  /* If it is the first activation then performing some extra
     initializations.*/
  for (uint32_t *wp = canp->ram_base;
 80021a0:	9b01      	ldr	r3, [sp, #4]
 80021a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a4:	9303      	str	r3, [sp, #12]
 80021a6:	e005      	b.n	80021b4 <can_lld_start+0x24>
       wp < canp->ram_base + SRAMCAN_SIZE;
       wp += 1U) {
    *wp = (uint32_t)0U;
 80021a8:	9b03      	ldr	r3, [sp, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
       wp += 1U) {
 80021ae:	9b03      	ldr	r3, [sp, #12]
 80021b0:	3304      	adds	r3, #4
 80021b2:	9303      	str	r3, [sp, #12]
       wp < canp->ram_base + SRAMCAN_SIZE;
 80021b4:	9b01      	ldr	r3, [sp, #4]
 80021b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b8:	f503 539e 	add.w	r3, r3, #5056	@ 0x13c0
 80021bc:	9a03      	ldr	r2, [sp, #12]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d3f2      	bcc.n	80021a8 <can_lld_start+0x18>
  }

  /* Requesting clock stop.*/
  if (fdcan_clock_stop(canp)) {
 80021c2:	9801      	ldr	r0, [sp, #4]
 80021c4:	f7ff ff14 	bl	8001ff0 <fdcan_clock_stop>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <can_lld_start+0x42>
    osalDbgAssert(false, "CAN clock stop failed, check clocks and pin config");
    return true;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0ea      	b.n	80023a8 <can_lld_start+0x218>
  }

  /* Going in initialization mode.*/
  if (fdcan_init_mode(canp)) {
 80021d2:	9801      	ldr	r0, [sp, #4]
 80021d4:	f7ff ff44 	bl	8002060 <fdcan_init_mode>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <can_lld_start+0x52>
    osalDbgAssert(false, "CAN initialization failed, check clocks and pin config");
    return true;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0e2      	b.n	80023a8 <can_lld_start+0x218>
  }

  /* Configuration of element size (RAM words). */
  if (canp->config->op_mode == OPMODE_FDCAN) {
 80021e2:	9b01      	ldr	r3, [sp, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d104      	bne.n	80021f6 <can_lld_start+0x66>
    canp->word_size = FDCAN_SIZE_RAM_WORDS;
 80021ec:	9b01      	ldr	r3, [sp, #4]
 80021ee:	2212      	movs	r2, #18
 80021f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80021f4:	e008      	b.n	8002208 <can_lld_start+0x78>
  }
  else if(canp->config->op_mode == OPMODE_CAN) {
 80021f6:	9b01      	ldr	r3, [sp, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d103      	bne.n	8002208 <can_lld_start+0x78>
    canp->word_size = CAN_SIZE_RAM_WORDS;
 8002200:	9b01      	ldr	r3, [sp, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else {
    osalDbgAssert(false, "CAN initialization failed, invalid FDCAN operation mode");
  }

  /* Configuration can be performed now.*/
  canp->fdcan->CCCR |= FDCAN_CCCR_CCE;
 8002208:	9b01      	ldr	r3, [sp, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	9b01      	ldr	r3, [sp, #4]
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f042 0202 	orr.w	r2, r2, #2
 8002216:	619a      	str	r2, [r3, #24]

  /* Setting up operation mode except driver-controlled bits.*/
  canp->fdcan->NBTP = canp->config->NBTP;
 8002218:	9b01      	ldr	r3, [sp, #4]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	9b01      	ldr	r3, [sp, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	6852      	ldr	r2, [r2, #4]
 8002222:	61da      	str	r2, [r3, #28]
  canp->fdcan->DBTP = canp->config->DBTP;
 8002224:	9b01      	ldr	r3, [sp, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	9b01      	ldr	r3, [sp, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222c:	6892      	ldr	r2, [r2, #8]
 800222e:	60da      	str	r2, [r3, #12]
  canp->fdcan->CCCR |= canp->config->CCCR;
 8002230:	9b01      	ldr	r3, [sp, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	6999      	ldr	r1, [r3, #24]
 8002236:	9b01      	ldr	r3, [sp, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	9b01      	ldr	r3, [sp, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002240:	430a      	orrs	r2, r1
 8002242:	619a      	str	r2, [r3, #24]

  /* TEST is only writable when FDCAN_CCCR_TEST is set and FDCAN is still in
   * configuration mode */
  if (canp->config->CCCR & FDCAN_CCCR_TEST) {
 8002244:	9b01      	ldr	r3, [sp, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <can_lld_start+0xce>
    canp->fdcan->TEST = canp->config->TEST;
 8002252:	9b01      	ldr	r3, [sp, #4]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	9b01      	ldr	r3, [sp, #4]
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	6912      	ldr	r2, [r2, #16]
 800225c:	611a      	str	r2, [r3, #16]
  }

  canp->fdcan->GFC = canp->config->RXGFC;
 800225e:	9b01      	ldr	r3, [sp, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	9b01      	ldr	r3, [sp, #4]
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	6952      	ldr	r2, [r2, #20]
 8002268:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

#if STM32_CAN_USE_FDCAN1
  if (&CAND1 == canp) {
 800226c:	9b01      	ldr	r3, [sp, #4]
 800226e:	4a50      	ldr	r2, [pc, #320]	@ (80023b0 <can_lld_start+0x220>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d124      	bne.n	80022be <can_lld_start+0x12e>
    /* H7 version of FDCAN has configurable memory layout, so configure it */
    canp->fdcan->SIDFC = FDCAN_CONFIG_SIDFC_LSS(STM32_FDCAN_FLS_NBR) |
 8002274:	9b01      	ldr	r3, [sp, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800227c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                         FDCAN_CONFIG_SIDFC_FLSSA((CAN1_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_FLSSA);
    canp->fdcan->XIDFC = FDCAN_CONFIG_XIDFC_LSE(STM32_FDCAN_FLE_NBR) |
 8002280:	9b01      	ldr	r3, [sp, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	4a4b      	ldr	r2, [pc, #300]	@ (80023b4 <can_lld_start+0x224>)
 8002286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                         FDCAN_CONFIG_XIDFC_FLESA((CAN1_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_FLESA);
    canp->fdcan->RXF0C = FDCAN_CONFIG_RXF0C_F0S(STM32_FDCAN_RF0_NBR) |
 800228a:	9b01      	ldr	r3, [sp, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	4a4a      	ldr	r2, [pc, #296]	@ (80023b8 <can_lld_start+0x228>)
 8002290:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
                         FDCAN_CONFIG_RXF0C_F0SA((CAN1_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_RF0SA);
    canp->fdcan->RXF1C = FDCAN_CONFIG_RXF1C_F1S(STM32_FDCAN_RF1_NBR) |
 8002294:	9b01      	ldr	r3, [sp, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	4a48      	ldr	r2, [pc, #288]	@ (80023bc <can_lld_start+0x22c>)
 800229a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
                         FDCAN_CONFIG_RXF1C_F1SA((CAN1_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_RF1SA);
    canp->fdcan->RXBC  = FDCAN_CONFIG_RXBC_RBSA((CAN1_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_RBSA);
 800229e:	9b01      	ldr	r3, [sp, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80022a6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    canp->fdcan->TXEFC = FDCAN_CONFIG_TXEFC_EFS(STM32_FDCAN_TEF_NBR) |
 80022aa:	9b01      	ldr	r3, [sp, #4]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a44      	ldr	r2, [pc, #272]	@ (80023c0 <can_lld_start+0x230>)
 80022b0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
                         FDCAN_CONFIG_TXEFC_EFSA((CAN1_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_TEFSA);
    /* NB: this doesn't set NDTB, but sets TFQS to run in FIFO mode with no dedicated buffers */
    canp->fdcan->TXBC  = FDCAN_CONFIG_TXBC_TFQS(STM32_FDCAN_TB_NBR) |
 80022b4:	9b01      	ldr	r3, [sp, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	4a42      	ldr	r2, [pc, #264]	@ (80023c4 <can_lld_start+0x234>)
 80022ba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                         FDCAN_CONFIG_TXBC_TBSA((CAN1_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_TBSA);
  }
#endif

#if STM32_CAN_USE_FDCAN2
  if (&CAND2 == canp) {
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	4a41      	ldr	r2, [pc, #260]	@ (80023c8 <can_lld_start+0x238>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d123      	bne.n	800230e <can_lld_start+0x17e>
    /* H7 version of FDCAN has configurable memory layout, so configure it */
    canp->fdcan->SIDFC = FDCAN_CONFIG_SIDFC_LSS(STM32_FDCAN_FLS_NBR) |
 80022c6:	9b01      	ldr	r3, [sp, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a40      	ldr	r2, [pc, #256]	@ (80023cc <can_lld_start+0x23c>)
 80022cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                         FDCAN_CONFIG_SIDFC_FLSSA((CAN2_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_FLSSA);
    canp->fdcan->XIDFC = FDCAN_CONFIG_XIDFC_LSE(STM32_FDCAN_FLE_NBR) |
 80022d0:	9b01      	ldr	r3, [sp, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	4a3e      	ldr	r2, [pc, #248]	@ (80023d0 <can_lld_start+0x240>)
 80022d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                         FDCAN_CONFIG_XIDFC_FLESA((CAN2_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_FLESA);
    canp->fdcan->RXF0C = FDCAN_CONFIG_RXF0C_F0S(STM32_FDCAN_RF0_NBR) |
 80022da:	9b01      	ldr	r3, [sp, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a3d      	ldr	r2, [pc, #244]	@ (80023d4 <can_lld_start+0x244>)
 80022e0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
                         FDCAN_CONFIG_RXF0C_F0SA((CAN2_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_RF0SA);
    canp->fdcan->RXF1C = FDCAN_CONFIG_RXF1C_F1S(STM32_FDCAN_RF1_NBR) |
 80022e4:	9b01      	ldr	r3, [sp, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	4a3b      	ldr	r2, [pc, #236]	@ (80023d8 <can_lld_start+0x248>)
 80022ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
                         FDCAN_CONFIG_RXF1C_F1SA((CAN2_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_RF1SA);
    canp->fdcan->RXBC  = FDCAN_CONFIG_RXBC_RBSA((CAN2_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_RBSA);
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f44f 52ee 	mov.w	r2, #7616	@ 0x1dc0
 80022f6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    canp->fdcan->TXEFC = FDCAN_CONFIG_TXEFC_EFS(STM32_FDCAN_TEF_NBR) |
 80022fa:	9b01      	ldr	r3, [sp, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	4a37      	ldr	r2, [pc, #220]	@ (80023dc <can_lld_start+0x24c>)
 8002300:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
                         FDCAN_CONFIG_TXEFC_EFSA((CAN2_OFFSET_INSTANCE * SRAMCAN_SIZE) + SRAMCAN_TEFSA);
    /* NB: this doesn't set NDTB, but sets TFQS to run in FIFO mode with no dedicated buffers */
    canp->fdcan->TXBC  = FDCAN_CONFIG_TXBC_TFQS(STM32_FDCAN_TB_NBR) |
 8002304:	9b01      	ldr	r3, [sp, #4]
 8002306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002308:	4a35      	ldr	r2, [pc, #212]	@ (80023e0 <can_lld_start+0x250>)
 800230a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }
#endif

  /* Data field. Data field sizes > 8
     bytes are intended for CAN FD operation only. */
  if (canp->config->op_mode == OPMODE_FDCAN) {
 800230e:	9b01      	ldr	r3, [sp, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d10b      	bne.n	8002330 <can_lld_start+0x1a0>
    canp->fdcan->TXESC = FDCAN_CONFIG_TXESC_TBDS_64BDF;
 8002318:	9b01      	ldr	r3, [sp, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	2207      	movs	r2, #7
 800231e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    canp->fdcan->RXESC = FDCAN_CONFIG_RXESC_F0DS_64BDF | FDCAN_CONFIG_RXESC_F1DS_64BDF |
 8002322:	9b01      	ldr	r3, [sp, #4]
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f240 7277 	movw	r2, #1911	@ 0x777
 800232a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 800232e:	e009      	b.n	8002344 <can_lld_start+0x1b4>
                         FDCAN_CONFIG_RXESC_RBDS_64BDF;
  }
  else {
    canp->fdcan->TXESC = FDCAN_CONFIG_TXESC_TBDS_8BDF;
 8002330:	9b01      	ldr	r3, [sp, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	2200      	movs	r2, #0
 8002336:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    canp->fdcan->RXESC = FDCAN_CONFIG_RXESC_F0DS_8BDF | FDCAN_CONFIG_RXESC_F1DS_8BDF |
 800233a:	9b01      	ldr	r3, [sp, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	2200      	movs	r2, #0
 8002340:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
                         FDCAN_CONFIG_RXESC_RBDS_8BDF;
  }

  /* Start clock and disable configuration mode.*/
  canp->fdcan->CCCR &= ~(FDCAN_CCCR_CSR);
 8002344:	9b01      	ldr	r3, [sp, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	9b01      	ldr	r3, [sp, #4]
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f022 0210 	bic.w	r2, r2, #16
 8002352:	619a      	str	r2, [r3, #24]

  /* Enable FDCAN operation. */
  if (canp->config->op_mode == OPMODE_FDCAN) {
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d107      	bne.n	800236e <can_lld_start+0x1de>
    canp->fdcan->CCCR |= FDCAN_CCCR_FDOE;
 800235e:	9b01      	ldr	r3, [sp, #4]
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	9b01      	ldr	r3, [sp, #4]
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800236c:	619a      	str	r2, [r3, #24]
  }

  /* Enabling interrupts, only using interrupt zero.*/
  canp->fdcan->IR     = (uint32_t)-1;
 800236e:	9b01      	ldr	r3, [sp, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002376:	651a      	str	r2, [r3, #80]	@ 0x50
  canp->fdcan->IE     = FDCAN_IE_RF1FE | FDCAN_IE_RF1LE |
 8002378:	9b01      	ldr	r3, [sp, #4]
 800237a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237c:	f44f 7233 	mov.w	r2, #716	@ 0x2cc
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54
                        FDCAN_IE_RF0FE | FDCAN_IE_RF0LE |
                        FDCAN_IE_TCE;
  canp->fdcan->TXBTIE = FDCAN_TXBTIE_TIE;
 8002382:	9b01      	ldr	r3, [sp, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800238a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  canp->fdcan->ILE    = FDCAN_ILE_EINT0;
 800238e:	9b01      	ldr	r3, [sp, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	2201      	movs	r2, #1
 8002394:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Going in active mode.*/
  if (fdcan_active_mode(canp)) {
 8002396:	9801      	ldr	r0, [sp, #4]
 8002398:	f7ff fe9a 	bl	80020d0 <fdcan_active_mode>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <can_lld_start+0x216>
    osalDbgAssert(false, "CAN initialization failed, check clocks and pin config");
    return true;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <can_lld_start+0x218>
  }

  return false;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	b005      	add	sp, #20
 80023ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80023b0:	24000000 	.word	0x24000000
 80023b4:	00100080 	.word	0x00100080
 80023b8:	00100100 	.word	0x00100100
 80023bc:	00100580 	.word	0x00100580
 80023c0:	00080e80 	.word	0x00080e80
 80023c4:	10000ec0 	.word	0x10000ec0
 80023c8:	24000038 	.word	0x24000038
 80023cc:	002013c0 	.word	0x002013c0
 80023d0:	00101440 	.word	0x00101440
 80023d4:	001014c0 	.word	0x001014c0
 80023d8:	00101940 	.word	0x00101940
 80023dc:	00082240 	.word	0x00082240
 80023e0:	10002280 	.word	0x10002280
	...

080023f0 <can_lld_is_tx_empty>:
 * @retval false        no space in the transmit queue.
 * @retval true         transmit slot available.
 *
 * @notapi
 */
bool can_lld_is_tx_empty(CANDriver *canp, canmbx_t mailbox) {
 80023f0:	b082      	sub	sp, #8
 80023f2:	9001      	str	r0, [sp, #4]
 80023f4:	9100      	str	r1, [sp, #0]

  (void)mailbox;

  return (bool)(((canp->fdcan->TXFQS & FDCAN_TXFQS_TFQF) == 0U) &&
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <can_lld_is_tx_empty+0x2a>
                ((canp->fdcan->TXFQS & FDCAN_TXFQS_TFFL) > 0U));
 8002406:	9b01      	ldr	r3, [sp, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800240e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  return (bool)(((canp->fdcan->TXFQS & FDCAN_TXFQS_TFQF) == 0U) &&
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <can_lld_is_tx_empty+0x2a>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <can_lld_is_tx_empty+0x2c>
 800241a:	2300      	movs	r3, #0
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
}
 8002422:	4618      	mov	r0, r3
 8002424:	b002      	add	sp, #8
 8002426:	4770      	bx	lr
	...

08002430 <can_lld_transmit>:
 * @param[in] ctfp      pointer to the CAN frame to be transmitted
 * @param[in] mailbox   mailbox number,  @p CAN_ANY_MAILBOX for any mailbox
 *
 * @notapi
 */
void can_lld_transmit(CANDriver *canp, canmbx_t mailbox, const CANTxFrame *ctfp) {
 8002430:	b500      	push	{lr}
 8002432:	b089      	sub	sp, #36	@ 0x24
 8002434:	9003      	str	r0, [sp, #12]
 8002436:	9102      	str	r1, [sp, #8]
 8002438:	9201      	str	r2, [sp, #4]
  uint32_t put_index = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	9305      	str	r3, [sp, #20]
  uint32_t *tx_address = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	9307      	str	r3, [sp, #28]
  (void)mailbox;

  osalDbgCheck(dlc_to_bytes[ctfp->DLC] <= CAN_MAX_DLC_BYTES);

  /* Retrieve the TX FIFO put index.*/
  put_index = ((canp->fdcan->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002442:	9b03      	ldr	r3, [sp, #12]
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800244a:	0c1b      	lsrs	r3, r3, #16
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	9305      	str	r3, [sp, #20]

  /* Writing frame. */
  tx_address = canp->ram_base + (SRAMCAN_TBSA + (put_index * canp->word_size));
 8002452:	9b03      	ldr	r3, [sp, #12]
 8002454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002456:	9b03      	ldr	r3, [sp, #12]
 8002458:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800245c:	4619      	mov	r1, r3
 800245e:	9b05      	ldr	r3, [sp, #20]
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	9307      	str	r3, [sp, #28]

  *tx_address++ = ctfp->header32[0];
 800246e:	9b07      	ldr	r3, [sp, #28]
 8002470:	1d1a      	adds	r2, r3, #4
 8002472:	9207      	str	r2, [sp, #28]
 8002474:	9a01      	ldr	r2, [sp, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	601a      	str	r2, [r3, #0]
  *tx_address++ = ctfp->header32[1];
 800247a:	9b07      	ldr	r3, [sp, #28]
 800247c:	1d1a      	adds	r2, r3, #4
 800247e:	9207      	str	r2, [sp, #28]
 8002480:	9a01      	ldr	r2, [sp, #4]
 8002482:	6852      	ldr	r2, [r2, #4]
 8002484:	601a      	str	r2, [r3, #0]
  for (unsigned i = 0U; i < dlc_to_bytes[ctfp->DLC]; i += 4U) {
 8002486:	2300      	movs	r3, #0
 8002488:	9306      	str	r3, [sp, #24]
 800248a:	e00c      	b.n	80024a6 <can_lld_transmit+0x76>
    *tx_address++ = ctfp->data32[i / 4U];
 800248c:	9b06      	ldr	r3, [sp, #24]
 800248e:	0899      	lsrs	r1, r3, #2
 8002490:	9b07      	ldr	r3, [sp, #28]
 8002492:	1d1a      	adds	r2, r3, #4
 8002494:	9207      	str	r2, [sp, #28]
 8002496:	9a01      	ldr	r2, [sp, #4]
 8002498:	3102      	adds	r1, #2
 800249a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800249e:	601a      	str	r2, [r3, #0]
  for (unsigned i = 0U; i < dlc_to_bytes[ctfp->DLC]; i += 4U) {
 80024a0:	9b06      	ldr	r3, [sp, #24]
 80024a2:	3304      	adds	r3, #4
 80024a4:	9306      	str	r3, [sp, #24]
 80024a6:	9b01      	ldr	r3, [sp, #4]
 80024a8:	799b      	ldrb	r3, [r3, #6]
 80024aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b0a      	ldr	r3, [pc, #40]	@ (80024dc <can_lld_transmit+0xac>)
 80024b4:	5c9b      	ldrb	r3, [r3, r2]
 80024b6:	461a      	mov	r2, r3
 80024b8:	9b06      	ldr	r3, [sp, #24]
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d3e6      	bcc.n	800248c <can_lld_transmit+0x5c>
  }

  /* Starting transmission.*/
  canp->fdcan->TXBAR = ((uint32_t)1 << put_index);
 80024be:	9b03      	ldr	r3, [sp, #12]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	2101      	movs	r1, #1
 80024c4:	9a05      	ldr	r2, [sp, #20]
 80024c6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ca:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  /*
   * FIXME This sleep not needed if we send two frames with different SID/EID
   *       why?
   */
  chThdSleepS(OSAL_MS2I(1));
 80024ce:	200a      	movs	r0, #10
 80024d0:	f7ff fcb6 	bl	8001e40 <chThdSleepS.lto_priv.0>
}
 80024d4:	bf00      	nop
 80024d6:	b009      	add	sp, #36	@ 0x24
 80024d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80024dc:	08004d1c 	.word	0x08004d1c

080024e0 <can_lld_is_rx_nonempty>:
 * @retval false        no new messages available.
 * @retval true         new messages available.
 *
 * @notapi
 */
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {
 80024e0:	b500      	push	{lr}
 80024e2:	b083      	sub	sp, #12
 80024e4:	9001      	str	r0, [sp, #4]
 80024e6:	9100      	str	r1, [sp, #0]

  switch (mailbox) {
 80024e8:	9b00      	ldr	r3, [sp, #0]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d02a      	beq.n	8002544 <can_lld_is_rx_nonempty+0x64>
 80024ee:	9b00      	ldr	r3, [sp, #0]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d833      	bhi.n	800255c <can_lld_is_rx_nonempty+0x7c>
 80024f4:	9b00      	ldr	r3, [sp, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <can_lld_is_rx_nonempty+0x22>
 80024fa:	9b00      	ldr	r3, [sp, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d015      	beq.n	800252c <can_lld_is_rx_nonempty+0x4c>
 8002500:	e02c      	b.n	800255c <can_lld_is_rx_nonempty+0x7c>
    case CAN_ANY_MAILBOX:
      return can_lld_is_rx_nonempty(canp, 1U) ||
 8002502:	2101      	movs	r1, #1
 8002504:	9801      	ldr	r0, [sp, #4]
 8002506:	f7ff ffeb 	bl	80024e0 <can_lld_is_rx_nonempty>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d106      	bne.n	800251e <can_lld_is_rx_nonempty+0x3e>
             can_lld_is_rx_nonempty(canp, 2U);
 8002510:	2102      	movs	r1, #2
 8002512:	9801      	ldr	r0, [sp, #4]
 8002514:	f7ff ffe4 	bl	80024e0 <can_lld_is_rx_nonempty>
 8002518:	4603      	mov	r3, r0
      return can_lld_is_rx_nonempty(canp, 1U) ||
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <can_lld_is_rx_nonempty+0x42>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <can_lld_is_rx_nonempty+0x44>
 8002522:	2300      	movs	r3, #0
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e018      	b.n	800255e <can_lld_is_rx_nonempty+0x7e>
    case 1:
      return (bool)((canp->fdcan->RXF0S & FDCAN_RXF0S_F0FL) != 0U);
 800252c:	9b01      	ldr	r3, [sp, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002530:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e00c      	b.n	800255e <can_lld_is_rx_nonempty+0x7e>
    case 2:
      return (bool)((canp->fdcan->RXF1S & FDCAN_RXF1S_F1FL) != 0U);
 8002544:	9b01      	ldr	r3, [sp, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800254c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e000      	b.n	800255e <can_lld_is_rx_nonempty+0x7e>
    default:
      return false;
 800255c:	2300      	movs	r3, #0
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	b003      	add	sp, #12
 8002562:	f85d fb04 	ldr.w	pc, [sp], #4
 8002566:	bf00      	nop
	...

08002570 <can_lld_receive>:
 * @param[in] mailbox   mailbox number, @p CAN_ANY_MAILBOX for any mailbox
 * @param[out] crfp     pointer to the buffer where the CAN frame is copied
 *
 * @notapi
 */
void can_lld_receive(CANDriver *canp, canmbx_t mailbox, CANRxFrame *crfp) {
 8002570:	b500      	push	{lr}
 8002572:	b08b      	sub	sp, #44	@ 0x2c
 8002574:	9003      	str	r0, [sp, #12]
 8002576:	9102      	str	r1, [sp, #8]
 8002578:	9201      	str	r2, [sp, #4]
  uint32_t get_index;
  uint32_t *rx_address;

  if (mailbox == CAN_ANY_MAILBOX) {
 800257a:	9b02      	ldr	r3, [sp, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d113      	bne.n	80025a8 <can_lld_receive+0x38>
    if (can_lld_is_rx_nonempty(canp, 1U)) {
 8002580:	2101      	movs	r1, #1
 8002582:	9803      	ldr	r0, [sp, #12]
 8002584:	f7ff ffac 	bl	80024e0 <can_lld_is_rx_nonempty>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <can_lld_receive+0x24>
      mailbox = 1U;
 800258e:	2301      	movs	r3, #1
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	e009      	b.n	80025a8 <can_lld_receive+0x38>
    }
    else if (can_lld_is_rx_nonempty(canp, 2U)) {
 8002594:	2102      	movs	r1, #2
 8002596:	9803      	ldr	r0, [sp, #12]
 8002598:	f7ff ffa2 	bl	80024e0 <can_lld_is_rx_nonempty>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80b6 	beq.w	8002710 <can_lld_receive+0x1a0>
      mailbox = 2U;
 80025a4:	2302      	movs	r3, #2
 80025a6:	9302      	str	r3, [sp, #8]
    else {
      return;
    }
  }

  if (mailbox == 1U) {
 80025a8:	9b02      	ldr	r3, [sp, #8]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d115      	bne.n	80025da <can_lld_receive+0x6a>
     /* GET index RXF0, add it and the length to the rx_address.*/
     get_index = (canp->fdcan->RXF0S & FDCAN_RXF0S_F0GI_Msk) >> FDCAN_RXF0S_F0GI_Pos;
 80025ae:	9b03      	ldr	r3, [sp, #12]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025bc:	9309      	str	r3, [sp, #36]	@ 0x24
     rx_address = canp->ram_base + ((SRAMCAN_RF0SA + (get_index * canp->word_size)));
 80025be:	9b03      	ldr	r3, [sp, #12]
 80025c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025c2:	9b03      	ldr	r3, [sp, #12]
 80025c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80025c8:	4619      	mov	r1, r3
 80025ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	3340      	adds	r3, #64	@ 0x40
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	9308      	str	r3, [sp, #32]
 80025d8:	e015      	b.n	8002606 <can_lld_receive+0x96>
  }
  else {
     /* GET index RXF1, add it and the length to the rx_address.*/
     get_index = (canp->fdcan->RXF1S & FDCAN_RXF1S_F1GI_Msk) >> FDCAN_RXF1S_F1GI_Pos;
 80025da:	9b03      	ldr	r3, [sp, #12]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025e8:	9309      	str	r3, [sp, #36]	@ 0x24
     rx_address = canp->ram_base + ((SRAMCAN_RF1SA + (get_index * canp->word_size)));
 80025ea:	9b03      	ldr	r3, [sp, #12]
 80025ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ee:	9b03      	ldr	r3, [sp, #12]
 80025f0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80025f4:	4619      	mov	r1, r3
 80025f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	9308      	str	r3, [sp, #32]
  }
  crfp->header32[0] = *rx_address++;
 8002606:	9b08      	ldr	r3, [sp, #32]
 8002608:	1d1a      	adds	r2, r3, #4
 800260a:	9208      	str	r2, [sp, #32]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	9b01      	ldr	r3, [sp, #4]
 8002610:	601a      	str	r2, [r3, #0]
  crfp->header32[1] = *rx_address++;
 8002612:	9b08      	ldr	r3, [sp, #32]
 8002614:	1d1a      	adds	r2, r3, #4
 8002616:	9208      	str	r2, [sp, #32]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	9b01      	ldr	r3, [sp, #4]
 800261c:	605a      	str	r2, [r3, #4]

  /* Copy message from FDCAN peripheral's SRAM to structure. RAM is restricted
     to word aligned accesses, so up to 3 extra bytes may be copied.*/
  for (unsigned i = 0U; i < dlc_to_bytes[crfp->DLC]; i += 4U) {
 800261e:	2300      	movs	r3, #0
 8002620:	9307      	str	r3, [sp, #28]
 8002622:	e00c      	b.n	800263e <can_lld_receive+0xce>
    crfp->data32[i / 4U] = *rx_address++;
 8002624:	9b08      	ldr	r3, [sp, #32]
 8002626:	1d1a      	adds	r2, r3, #4
 8002628:	9208      	str	r2, [sp, #32]
 800262a:	9a07      	ldr	r2, [sp, #28]
 800262c:	0892      	lsrs	r2, r2, #2
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	9b01      	ldr	r3, [sp, #4]
 8002632:	3202      	adds	r2, #2
 8002634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (unsigned i = 0U; i < dlc_to_bytes[crfp->DLC]; i += 4U) {
 8002638:	9b07      	ldr	r3, [sp, #28]
 800263a:	3304      	adds	r3, #4
 800263c:	9307      	str	r3, [sp, #28]
 800263e:	9b01      	ldr	r3, [sp, #4]
 8002640:	799b      	ldrb	r3, [r3, #6]
 8002642:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	4b33      	ldr	r3, [pc, #204]	@ (8002718 <can_lld_receive+0x1a8>)
 800264c:	5c9b      	ldrb	r3, [r3, r2]
 800264e:	461a      	mov	r2, r3
 8002650:	9b07      	ldr	r3, [sp, #28]
 8002652:	4293      	cmp	r3, r2
 8002654:	d3e6      	bcc.n	8002624 <can_lld_receive+0xb4>
  }

  /* Acknowledge receipt by writing the get-index to the acknowledge
     register RXFxA then re-enable RX FIFO message arrived interrupt once
     the FIFO is emptied.*/
  if (mailbox == 1U) {
 8002656:	9b02      	ldr	r3, [sp, #8]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d12c      	bne.n	80026b6 <can_lld_receive+0x146>
    uint32_t rxf0a = canp->fdcan->RXF0A;
 800265c:	9b03      	ldr	r3, [sp, #12]
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002664:	9305      	str	r3, [sp, #20]
    rxf0a &= ~FDCAN_RXF0A_F0AI_Msk;
 8002666:	9b05      	ldr	r3, [sp, #20]
 8002668:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800266c:	9305      	str	r3, [sp, #20]
    rxf0a |= get_index << FDCAN_RXF0A_F0AI_Pos;
 800266e:	9a05      	ldr	r2, [sp, #20]
 8002670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002672:	4313      	orrs	r3, r2
 8002674:	9305      	str	r3, [sp, #20]
    canp->fdcan->RXF0A = rxf0a;
 8002676:	9b03      	ldr	r3, [sp, #12]
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	9a05      	ldr	r2, [sp, #20]
 800267c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    if (!can_lld_is_rx_nonempty(canp, mailbox)) {
 8002680:	9902      	ldr	r1, [sp, #8]
 8002682:	9803      	ldr	r0, [sp, #12]
 8002684:	f7ff ff2c 	bl	80024e0 <can_lld_is_rx_nonempty>
 8002688:	4603      	mov	r3, r0
 800268a:	f083 0301 	eor.w	r3, r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03e      	beq.n	8002712 <can_lld_receive+0x1a2>
      canp->fdcan->IR |= FDCAN_IR_RF0F;
 8002694:	9b03      	ldr	r3, [sp, #12]
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800269a:	9b03      	ldr	r3, [sp, #12]
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f042 0204 	orr.w	r2, r2, #4
 80026a2:	651a      	str	r2, [r3, #80]	@ 0x50
      canp->fdcan->IE |= FDCAN_IE_RF0FE;
 80026a4:	9b03      	ldr	r3, [sp, #12]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026aa:	9b03      	ldr	r3, [sp, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f042 0204 	orr.w	r2, r2, #4
 80026b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80026b4:	e02d      	b.n	8002712 <can_lld_receive+0x1a2>
    }
  }
  else {
    uint32_t rxf1a = canp->fdcan->RXF1A;
 80026b6:	9b03      	ldr	r3, [sp, #12]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80026be:	9306      	str	r3, [sp, #24]
    rxf1a &= ~FDCAN_RXF1A_F1AI_Msk;
 80026c0:	9b06      	ldr	r3, [sp, #24]
 80026c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026c6:	9306      	str	r3, [sp, #24]
    rxf1a |= get_index << FDCAN_RXF1A_F1AI_Pos;
 80026c8:	9a06      	ldr	r2, [sp, #24]
 80026ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80026cc:	4313      	orrs	r3, r2
 80026ce:	9306      	str	r3, [sp, #24]
    canp->fdcan->RXF1A = rxf1a;
 80026d0:	9b03      	ldr	r3, [sp, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	9a06      	ldr	r2, [sp, #24]
 80026d6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

    if (!can_lld_is_rx_nonempty(canp, mailbox)) {
 80026da:	9902      	ldr	r1, [sp, #8]
 80026dc:	9803      	ldr	r0, [sp, #12]
 80026de:	f7ff feff 	bl	80024e0 <can_lld_is_rx_nonempty>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f083 0301 	eor.w	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d011      	beq.n	8002712 <can_lld_receive+0x1a2>
      canp->fdcan->IR |= FDCAN_IR_RF1F;
 80026ee:	9b03      	ldr	r3, [sp, #12]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026f4:	9b03      	ldr	r3, [sp, #12]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026fc:	651a      	str	r2, [r3, #80]	@ 0x50
      canp->fdcan->IE |= FDCAN_IE_RF1FE;
 80026fe:	9b03      	ldr	r3, [sp, #12]
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002704:	9b03      	ldr	r3, [sp, #12]
 8002706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800270c:	655a      	str	r2, [r3, #84]	@ 0x54
 800270e:	e000      	b.n	8002712 <can_lld_receive+0x1a2>
      return;
 8002710:	bf00      	nop
    }
  }
}
 8002712:	b00b      	add	sp, #44	@ 0x2c
 8002714:	f85d fb04 	ldr.w	pc, [sp], #4
 8002718:	08004d1c 	.word	0x08004d1c
 800271c:	00000000 	.word	0x00000000

08002720 <can_lld_serve_interrupt>:
 *
 * @param[in] canp      pointer to the @p CANDriver object
 *
 * @notapi
 */
void can_lld_serve_interrupt(CANDriver *canp) {
 8002720:	b500      	push	{lr}
 8002722:	b085      	sub	sp, #20
 8002724:	9001      	str	r0, [sp, #4]
  uint32_t ir = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	9303      	str	r3, [sp, #12]

  /* Getting and clearing active IRQs.*/
  ir = canp->fdcan->IR;
 800272a:	9b01      	ldr	r3, [sp, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002730:	9303      	str	r3, [sp, #12]
  canp->fdcan->IR = ir;
 8002732:	9b01      	ldr	r3, [sp, #4]
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	9a03      	ldr	r2, [sp, #12]
 8002738:	651a      	str	r2, [r3, #80]	@ 0x50

  /* RX events.*/
  if ((ir & FDCAN_IR_RF0F) != 0U) {
 800273a:	9b03      	ldr	r3, [sp, #12]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d017      	beq.n	8002774 <can_lld_serve_interrupt+0x54>
    /* Disabling this source until the queue is emptied.*/
    canp->fdcan->IE &= ~FDCAN_IE_RF0FE;
 8002744:	9b01      	ldr	r3, [sp, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002748:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800274a:	9b01      	ldr	r3, [sp, #4]
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	f022 0204 	bic.w	r2, r2, #4
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
 8002754:	f7ff fb84 	bl	8001e60 <osalSysLockFromISR.lto_priv.0>
 8002758:	9b01      	ldr	r3, [sp, #4]
 800275a:	3310      	adds	r3, #16
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fbc6 	bl	8001ef0 <osalThreadDequeueAllI.lto_priv.3>
 8002764:	9b01      	ldr	r3, [sp, #4]
 8002766:	3318      	adds	r3, #24
 8002768:	2101      	movs	r1, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fbd0 	bl	8001f10 <osalEventBroadcastFlagsI.lto_priv.3>
 8002770:	f7ff fb7e 	bl	8001e70 <osalSysUnlockFromISR.lto_priv.0>
  }
  if ((ir & FDCAN_IR_RF1F) != 0U) {
 8002774:	9b03      	ldr	r3, [sp, #12]
 8002776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d017      	beq.n	80027ae <can_lld_serve_interrupt+0x8e>
    /* Disabling this source until the queue is emptied.*/
    canp->fdcan->IE &= ~FDCAN_IE_RF1FE;
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002784:	9b01      	ldr	r3, [sp, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800278c:	655a      	str	r2, [r3, #84]	@ 0x54
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
 800278e:	f7ff fb67 	bl	8001e60 <osalSysLockFromISR.lto_priv.0>
 8002792:	9b01      	ldr	r3, [sp, #4]
 8002794:	3310      	adds	r3, #16
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fba9 	bl	8001ef0 <osalThreadDequeueAllI.lto_priv.3>
 800279e:	9b01      	ldr	r3, [sp, #4]
 80027a0:	3318      	adds	r3, #24
 80027a2:	2102      	movs	r1, #2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fbb3 	bl	8001f10 <osalEventBroadcastFlagsI.lto_priv.3>
 80027aa:	f7ff fb61 	bl	8001e70 <osalSysUnlockFromISR.lto_priv.0>
  }

  /* Overflow events.*/
  if (((ir & FDCAN_IR_RF0L) != 0U) || ((ir & FDCAN_IR_RF1L) != 0U)) {
 80027ae:	9b03      	ldr	r3, [sp, #12]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d104      	bne.n	80027c2 <can_lld_serve_interrupt+0xa2>
 80027b8:	9b03      	ldr	r3, [sp, #12]
 80027ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <can_lld_serve_interrupt+0xb6>
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
 80027c2:	f7ff fb4d 	bl	8001e60 <osalSysLockFromISR.lto_priv.0>
 80027c6:	9b01      	ldr	r3, [sp, #4]
 80027c8:	3320      	adds	r3, #32
 80027ca:	2110      	movs	r1, #16
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fb9f 	bl	8001f10 <osalEventBroadcastFlagsI.lto_priv.3>
 80027d2:	f7ff fb4d 	bl	8001e70 <osalSysUnlockFromISR.lto_priv.0>
  }

  /* TX events.*/
  if ((ir & FDCAN_IR_TC) != 0U) {
 80027d6:	9b03      	ldr	r3, [sp, #12]
 80027d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d015      	beq.n	800280c <can_lld_serve_interrupt+0xec>
    eventflags_t flags = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	9302      	str	r3, [sp, #8]

    flags |= 1U;
 80027e4:	9b02      	ldr	r3, [sp, #8]
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	9302      	str	r3, [sp, #8]
    _can_tx_empty_isr(canp, flags);
 80027ec:	f7ff fb38 	bl	8001e60 <osalSysLockFromISR.lto_priv.0>
 80027f0:	9b01      	ldr	r3, [sp, #4]
 80027f2:	3308      	adds	r3, #8
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fb7a 	bl	8001ef0 <osalThreadDequeueAllI.lto_priv.3>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	331c      	adds	r3, #28
 8002800:	9902      	ldr	r1, [sp, #8]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fb84 	bl	8001f10 <osalEventBroadcastFlagsI.lto_priv.3>
 8002808:	f7ff fb32 	bl	8001e70 <osalSysUnlockFromISR.lto_priv.0>
  }
}
 800280c:	bf00      	nop
 800280e:	b005      	add	sp, #20
 8002810:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002820 <_pal_lld_init>:

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
 8002820:	bf00      	nop
 8002822:	4770      	bx	lr
	...

08002830 <chSysLockFromISR.lto_priv.1>:
static inline void chSysLockFromISR(void) {
 8002830:	b082      	sub	sp, #8
 8002832:	2330      	movs	r3, #48	@ 0x30
 8002834:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002836:	9b01      	ldr	r3, [sp, #4]
 8002838:	f383 8811 	msr	BASEPRI, r3
}
 800283c:	bf00      	nop
}
 800283e:	bf00      	nop
}
 8002840:	bf00      	nop
}
 8002842:	bf00      	nop
 8002844:	b002      	add	sp, #8
 8002846:	4770      	bx	lr
	...

08002850 <chSysUnlockFromISR.lto_priv.1>:
static inline void chSysUnlockFromISR(void) {
 8002850:	b082      	sub	sp, #8
 8002852:	2300      	movs	r3, #0
 8002854:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002856:	9b01      	ldr	r3, [sp, #4]
 8002858:	f383 8811 	msr	BASEPRI, r3
}
 800285c:	bf00      	nop
}
 800285e:	bf00      	nop
}
 8002860:	bf00      	nop
}
 8002862:	bf00      	nop
 8002864:	b002      	add	sp, #8
 8002866:	4770      	bx	lr
	...

08002870 <osalSysLockFromISR.lto_priv.1>:
static inline void osalSysLockFromISR(void) {
 8002870:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8002872:	f7ff ffdd 	bl	8002830 <chSysLockFromISR.lto_priv.1>
}
 8002876:	bf00      	nop
 8002878:	bd08      	pop	{r3, pc}
 800287a:	bf00      	nop
 800287c:	0000      	movs	r0, r0
	...

08002880 <osalSysUnlockFromISR.lto_priv.1>:
static inline void osalSysUnlockFromISR(void) {
 8002880:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8002882:	f7ff ffe5 	bl	8002850 <chSysUnlockFromISR.lto_priv.1>
}
 8002886:	bf00      	nop
 8002888:	bd08      	pop	{r3, pc}
 800288a:	bf00      	nop
 800288c:	0000      	movs	r0, r0
	...

08002890 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 8002890:	b508      	push	{r3, lr}
  chSysTimerHandlerI();
 8002892:	f000 fb55 	bl	8002f40 <chSysTimerHandlerI>
}
 8002896:	bf00      	nop
 8002898:	bd08      	pop	{r3, pc}
 800289a:	bf00      	nop
 800289c:	0000      	movs	r0, r0
	...

080028a0 <rccEnableAPB1L.lto_priv.0>:
__STATIC_INLINE void rccEnableAPB1L(uint32_t mask, bool lp) {
 80028a0:	b082      	sub	sp, #8
 80028a2:	9001      	str	r0, [sp, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	f88d 3003 	strb.w	r3, [sp, #3]
  RCC_C1->APB1LENR |= mask;
 80028aa:	4b12      	ldr	r3, [pc, #72]	@ (80028f4 <rccEnableAPB1L.lto_priv.0+0x54>)
 80028ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80028b0:	4910      	ldr	r1, [pc, #64]	@ (80028f4 <rccEnableAPB1L.lto_priv.0+0x54>)
 80028b2:	9b01      	ldr	r3, [sp, #4]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  if (lp) {
 80028ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <rccEnableAPB1L.lto_priv.0+0x34>
    RCC_C1->APB1LLPENR |= mask;
 80028c2:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <rccEnableAPB1L.lto_priv.0+0x54>)
 80028c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80028c8:	490a      	ldr	r1, [pc, #40]	@ (80028f4 <rccEnableAPB1L.lto_priv.0+0x54>)
 80028ca:	9b01      	ldr	r3, [sp, #4]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
 80028d2:	e008      	b.n	80028e6 <rccEnableAPB1L.lto_priv.0+0x46>
    RCC_C1->APB1LLPENR &= ~mask;
 80028d4:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <rccEnableAPB1L.lto_priv.0+0x54>)
 80028d6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80028da:	9b01      	ldr	r3, [sp, #4]
 80028dc:	43db      	mvns	r3, r3
 80028de:	4905      	ldr	r1, [pc, #20]	@ (80028f4 <rccEnableAPB1L.lto_priv.0+0x54>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
  (void)RCC_C1->APB1LLPENR;
 80028e6:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <rccEnableAPB1L.lto_priv.0+0x54>)
 80028e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
}
 80028ec:	bf00      	nop
 80028ee:	b002      	add	sp, #8
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	58024400 	.word	0x58024400
	...

08002900 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8002900:	b508      	push	{r3, lr}
                "clock rounding error");
  osalDbgAssert(((ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1U) < 0x10000,
                "clock prescaler overflow");

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002902:	2101      	movs	r1, #1
 8002904:	2001      	movs	r0, #1
 8002906:	f7ff ffcb 	bl	80028a0 <rccEnableAPB1L.lto_priv.0>

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800290a:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <st_lld_init+0x60>)
 800290c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290e:	4a14      	ldr	r2, [pc, #80]	@ (8002960 <st_lld_init+0x60>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002916:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800291a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800291e:	629a      	str	r2, [r3, #40]	@ 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002920:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002924:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002928:	62da      	str	r2, [r3, #44]	@ 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800292a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8002932:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002936:	2200      	movs	r2, #0
 8002938:	635a      	str	r2, [r3, #52]	@ 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 800293a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8002942:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002946:	2200      	movs	r2, #0
 8002948:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800294a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800294e:	2201      	movs	r2, #1
 8002950:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002952:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 800295a:	bf00      	nop
 800295c:	bd08      	pop	{r3, pc}
 800295e:	bf00      	nop
 8002960:	5c001000 	.word	0x5c001000
	...

08002970 <st_lld_serve_interrupt>:

/**
 * @brief   IRQ handling code.
 */
void st_lld_serve_interrupt(void) {
 8002970:	b500      	push	{lr}
 8002972:	b083      	sub	sp, #12
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;
 8002974:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002978:	9301      	str	r3, [sp, #4]

  sr  = timp->SR;
 800297a:	9b01      	ldr	r3, [sp, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	9300      	str	r3, [sp, #0]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8002980:	9b01      	ldr	r3, [sp, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	9a00      	ldr	r2, [sp, #0]
 8002988:	4013      	ands	r3, r2
 800298a:	9300      	str	r3, [sp, #0]
  timp->SR = ~sr;
 800298c:	9b00      	ldr	r3, [sp, #0]
 800298e:	43da      	mvns	r2, r3
 8002990:	9b01      	ldr	r3, [sp, #4]
 8002992:	611a      	str	r2, [r3, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
 8002994:	9b00      	ldr	r3, [sp, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <st_lld_serve_interrupt+0x3a>
#endif
  {
    osalSysLockFromISR();
 800299e:	f7ff ff67 	bl	8002870 <osalSysLockFromISR.lto_priv.1>
    osalOsTimerHandlerI();
 80029a2:	f7ff ff75 	bl	8002890 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 80029a6:	f7ff ff6b 	bl	8002880 <osalSysUnlockFromISR.lto_priv.1>
      st_callbacks[3](3U);
    }
  }
#endif
#endif
}
 80029aa:	bf00      	nop
 80029ac:	b003      	add	sp, #12
 80029ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80029b2:	bf00      	nop
	...

080029c0 <chSysLockFromISR.lto_priv.2>:
static inline void chSysLockFromISR(void) {
 80029c0:	b082      	sub	sp, #8
 80029c2:	2330      	movs	r3, #48	@ 0x30
 80029c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80029c6:	9b01      	ldr	r3, [sp, #4]
 80029c8:	f383 8811 	msr	BASEPRI, r3
}
 80029cc:	bf00      	nop
}
 80029ce:	bf00      	nop
}
 80029d0:	bf00      	nop
}
 80029d2:	bf00      	nop
 80029d4:	b002      	add	sp, #8
 80029d6:	4770      	bx	lr
	...

080029e0 <chSysUnlockFromISR.lto_priv.2>:
static inline void chSysUnlockFromISR(void) {
 80029e0:	b082      	sub	sp, #8
 80029e2:	2300      	movs	r3, #0
 80029e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80029e6:	9b01      	ldr	r3, [sp, #4]
 80029e8:	f383 8811 	msr	BASEPRI, r3
}
 80029ec:	bf00      	nop
}
 80029ee:	bf00      	nop
}
 80029f0:	bf00      	nop
}
 80029f2:	bf00      	nop
 80029f4:	b002      	add	sp, #8
 80029f6:	4770      	bx	lr
	...

08002a00 <osalSysLockFromISR.lto_priv.2>:
static inline void osalSysLockFromISR(void) {
 8002a00:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8002a02:	f7ff ffdd 	bl	80029c0 <chSysLockFromISR.lto_priv.2>
}
 8002a06:	bf00      	nop
 8002a08:	bd08      	pop	{r3, pc}
 8002a0a:	bf00      	nop
 8002a0c:	0000      	movs	r0, r0
	...

08002a10 <osalSysUnlockFromISR.lto_priv.2>:
static inline void osalSysUnlockFromISR(void) {
 8002a10:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8002a12:	f7ff ffe5 	bl	80029e0 <chSysUnlockFromISR.lto_priv.2>
}
 8002a16:	bf00      	nop
 8002a18:	bd08      	pop	{r3, pc}
 8002a1a:	bf00      	nop
 8002a1c:	0000      	movs	r0, r0
	...

08002a20 <osalEventBroadcastFlagsI.lto_priv.4>:
                                            eventflags_t flags) {
 8002a20:	b500      	push	{lr}
 8002a22:	b083      	sub	sp, #12
 8002a24:	9001      	str	r0, [sp, #4]
 8002a26:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8002a28:	9900      	ldr	r1, [sp, #0]
 8002a2a:	9801      	ldr	r0, [sp, #4]
 8002a2c:	f001 fdb8 	bl	80045a0 <chEvtBroadcastFlagsI>
}
 8002a30:	bf00      	nop
 8002a32:	b003      	add	sp, #12
 8002a34:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002a40 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] isr       USART ISR register value
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
 8002a40:	b500      	push	{lr}
 8002a42:	b085      	sub	sp, #20
 8002a44:	9001      	str	r0, [sp, #4]
 8002a46:	9100      	str	r1, [sp, #0]
  eventflags_t sts = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9303      	str	r3, [sp, #12]

  if (isr & USART_ISR_ORE)
 8002a4c:	9b00      	ldr	r3, [sp, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <set_error+0x1e>
    sts |= SD_OVERRUN_ERROR;
 8002a56:	9b03      	ldr	r3, [sp, #12]
 8002a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5c:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_PE)
 8002a5e:	9b00      	ldr	r3, [sp, #0]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <set_error+0x30>
    sts |= SD_PARITY_ERROR;
 8002a68:	9b03      	ldr	r3, [sp, #12]
 8002a6a:	f043 0320 	orr.w	r3, r3, #32
 8002a6e:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_FE)
 8002a70:	9b00      	ldr	r3, [sp, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <set_error+0x42>
    sts |= SD_FRAMING_ERROR;
 8002a7a:	9b03      	ldr	r3, [sp, #12]
 8002a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a80:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_NE)
 8002a82:	9b00      	ldr	r3, [sp, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <set_error+0x54>
    sts |= SD_NOISE_ERROR;
 8002a8c:	9b03      	ldr	r3, [sp, #12]
 8002a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a92:	9303      	str	r3, [sp, #12]
  osalSysLockFromISR();
 8002a94:	f7ff ffb4 	bl	8002a00 <osalSysLockFromISR.lto_priv.2>
  chnAddFlagsI(sdp, sts);
 8002a98:	9b01      	ldr	r3, [sp, #4]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	9903      	ldr	r1, [sp, #12]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ffbe 	bl	8002a20 <osalEventBroadcastFlagsI.lto_priv.4>
  osalSysUnlockFromISR();
 8002aa4:	f7ff ffb4 	bl	8002a10 <osalSysUnlockFromISR.lto_priv.2>
}
 8002aa8:	bf00      	nop
 8002aaa:	b005      	add	sp, #20
 8002aac:	f85d fb04 	ldr.w	pc, [sp], #4

08002ab0 <notify3>:
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
}
#endif

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8002ab4:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <notify3+0x18>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a03      	ldr	r2, [pc, #12]	@ (8002ac8 <notify3+0x18>)
 8002aba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002abe:	6013      	str	r3, [r2, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	b002      	add	sp, #8
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40004800 	.word	0x40004800
 8002acc:	00000000 	.word	0x00000000

08002ad0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8002ad0:	b500      	push	{lr}
 8002ad2:	b083      	sub	sp, #12
  nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
#endif
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3);
 8002ad4:	480e      	ldr	r0, [pc, #56]	@ (8002b10 <sd_lld_init+0x40>)
 8002ad6:	f7fe fb93 	bl	8001200 <sdObjectInit>
  iqObjectInit(&SD3.iqueue, sd_in_buf3, sizeof sd_in_buf3, NULL, &SD3);
 8002ada:	4b0d      	ldr	r3, [pc, #52]	@ (8002b10 <sd_lld_init+0x40>)
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	490c      	ldr	r1, [pc, #48]	@ (8002b14 <sd_lld_init+0x44>)
 8002ae4:	480c      	ldr	r0, [pc, #48]	@ (8002b18 <sd_lld_init+0x48>)
 8002ae6:	f7fd ff6b 	bl	80009c0 <iqObjectInit>
  oqObjectInit(&SD3.oqueue, sd_out_buf3, sizeof sd_out_buf3, notify3, &SD3);
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <sd_lld_init+0x40>)
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <sd_lld_init+0x4c>)
 8002af0:	2210      	movs	r2, #16
 8002af2:	490b      	ldr	r1, [pc, #44]	@ (8002b20 <sd_lld_init+0x50>)
 8002af4:	480b      	ldr	r0, [pc, #44]	@ (8002b24 <sd_lld_init+0x54>)
 8002af6:	f7fe f84b 	bl	8000b90 <oqObjectInit>
  SD3.usart = USART3;
 8002afa:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <sd_lld_init+0x40>)
 8002afc:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <sd_lld_init+0x58>)
 8002afe:	655a      	str	r2, [r3, #84]	@ 0x54
  SD3.clock = STM32_USART3CLK;
 8002b00:	4b03      	ldr	r3, [pc, #12]	@ (8002b10 <sd_lld_init+0x40>)
 8002b02:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <sd_lld_init+0x5c>)
 8002b04:	659a      	str	r2, [r3, #88]	@ 0x58
  LPSD1.clock = STM32_LPUART1CLK;
#if !defined(STM32_LPUART1_SUPPRESS_ISR) && defined(STM32_LPUART1_NUMBER)
  nvicEnableVector(STM32_LPUART1_NUMBER, STM32_SERIAL_LPUART1_PRIORITY);
#endif
#endif
}
 8002b06:	bf00      	nop
 8002b08:	b003      	add	sp, #12
 8002b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b0e:	bf00      	nop
 8002b10:	24000070 	.word	0x24000070
 8002b14:	240000d0 	.word	0x240000d0
 8002b18:	2400007c 	.word	0x2400007c
 8002b1c:	08002ab1 	.word	0x08002ab1
 8002b20:	240000e0 	.word	0x240000e0
 8002b24:	240000a0 	.word	0x240000a0
 8002b28:	40004800 	.word	0x40004800
 8002b2c:	07270e00 	.word	0x07270e00

08002b30 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8002b30:	b500      	push	{lr}
 8002b32:	b087      	sub	sp, #28
 8002b34:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
 8002b36:	9b01      	ldr	r3, [sp, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	9303      	str	r3, [sp, #12]
  uint32_t cr1;
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 8002b3c:	9b03      	ldr	r3, [sp, #12]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	9304      	str	r3, [sp, #16]
  u->ICR = isr;
 8002b42:	9b03      	ldr	r3, [sp, #12]
 8002b44:	9a04      	ldr	r2, [sp, #16]
 8002b46:	621a      	str	r2, [r3, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8002b48:	9b04      	ldr	r3, [sp, #16]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <sd_lld_serve_interrupt+0x2a>
    set_error(sdp, isr);
 8002b52:	9904      	ldr	r1, [sp, #16]
 8002b54:	9801      	ldr	r0, [sp, #4]
 8002b56:	f7ff ff73 	bl	8002a40 <set_error>

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 8002b5a:	9b04      	ldr	r3, [sp, #16]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01e      	beq.n	8002ba2 <sd_lld_serve_interrupt+0x72>
    osalSysLockFromISR();
 8002b64:	f7ff ff4c 	bl	8002a00 <osalSysLockFromISR.lto_priv.2>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 8002b68:	9b01      	ldr	r3, [sp, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff55 	bl	8002a20 <osalEventBroadcastFlagsI.lto_priv.4>
    osalSysUnlockFromISR();
 8002b76:	f7ff ff4b 	bl	8002a10 <osalSysUnlockFromISR.lto_priv.2>
  /* Data available, note it is a while in order to handle two situations:
     1) Another byte arrived after removing the previous one, this would cause
        an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to empty
        the FIFO.*/
  while (isr & USART_ISR_RXNE) {
 8002b7a:	e012      	b.n	8002ba2 <sd_lld_serve_interrupt+0x72>
    osalSysLockFromISR();
 8002b7c:	f7ff ff40 	bl	8002a00 <osalSysLockFromISR.lto_priv.2>
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 8002b80:	9b03      	ldr	r3, [sp, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	9b01      	ldr	r3, [sp, #4]
 8002b88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	4619      	mov	r1, r3
 8002b92:	9801      	ldr	r0, [sp, #4]
 8002b94:	f7fe fb4c 	bl	8001230 <sdIncomingDataI>
    osalSysUnlockFromISR();
 8002b98:	f7ff ff3a 	bl	8002a10 <osalSysUnlockFromISR.lto_priv.2>

    isr = u->ISR;
 8002b9c:	9b03      	ldr	r3, [sp, #12]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	9304      	str	r3, [sp, #16]
  while (isr & USART_ISR_RXNE) {
 8002ba2:	9b04      	ldr	r3, [sp, #16]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e7      	bne.n	8002b7c <sd_lld_serve_interrupt+0x4c>
  }

  /* Caching CR1.*/
  cr1 = u->CR1;
 8002bac:	9b03      	ldr	r3, [sp, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	9305      	str	r3, [sp, #20]
     situations:
     1) The data registers has been emptied immediately after writing it, this
        would cause an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to fill
        the FIFO.*/
  if (cr1 & USART_CR1_TXEIE) {
 8002bb2:	9b05      	ldr	r3, [sp, #20]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d025      	beq.n	8002c08 <sd_lld_serve_interrupt+0xd8>
    while (isr & USART_ISR_TXE) {
 8002bbc:	e01f      	b.n	8002bfe <sd_lld_serve_interrupt+0xce>
      msg_t b;

      osalSysLockFromISR();
 8002bbe:	f7ff ff1f 	bl	8002a00 <osalSysLockFromISR.lto_priv.2>
      b = oqGetI(&sdp->oqueue);
 8002bc2:	9b01      	ldr	r3, [sp, #4]
 8002bc4:	3330      	adds	r3, #48	@ 0x30
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe f852 	bl	8000c70 <oqGetI>
 8002bcc:	9002      	str	r0, [sp, #8]
      if (b < MSG_OK) {
 8002bce:	9b02      	ldr	r3, [sp, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	da0c      	bge.n	8002bee <sd_lld_serve_interrupt+0xbe>
        chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8002bd4:	9b01      	ldr	r3, [sp, #4]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	2108      	movs	r1, #8
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff20 	bl	8002a20 <osalEventBroadcastFlagsI.lto_priv.4>
        cr1 &= ~USART_CR1_TXEIE;
 8002be0:	9b05      	ldr	r3, [sp, #20]
 8002be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002be6:	9305      	str	r3, [sp, #20]
        osalSysUnlockFromISR();
 8002be8:	f7ff ff12 	bl	8002a10 <osalSysUnlockFromISR.lto_priv.2>
        break;
 8002bec:	e00c      	b.n	8002c08 <sd_lld_serve_interrupt+0xd8>
      }
      u->TDR = b;
 8002bee:	9a02      	ldr	r2, [sp, #8]
 8002bf0:	9b03      	ldr	r3, [sp, #12]
 8002bf2:	629a      	str	r2, [r3, #40]	@ 0x28
      osalSysUnlockFromISR();
 8002bf4:	f7ff ff0c 	bl	8002a10 <osalSysUnlockFromISR.lto_priv.2>

      isr = u->ISR;
 8002bf8:	9b03      	ldr	r3, [sp, #12]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	9304      	str	r3, [sp, #16]
    while (isr & USART_ISR_TXE) {
 8002bfe:	9b04      	ldr	r3, [sp, #16]
 8002c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1da      	bne.n	8002bbe <sd_lld_serve_interrupt+0x8e>
    }
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_ISR_TC)) {
 8002c08:	9b05      	ldr	r3, [sp, #20]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d024      	beq.n	8002c5c <sd_lld_serve_interrupt+0x12c>
 8002c12:	9b04      	ldr	r3, [sp, #16]
 8002c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01f      	beq.n	8002c5c <sd_lld_serve_interrupt+0x12c>
    osalSysLockFromISR();
 8002c1c:	f7ff fef0 	bl	8002a00 <osalSysLockFromISR.lto_priv.2>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8002c20:	9b01      	ldr	r3, [sp, #4]
 8002c22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c24:	9b01      	ldr	r3, [sp, #4]
 8002c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d105      	bne.n	8002c38 <sd_lld_serve_interrupt+0x108>
 8002c2c:	9b01      	ldr	r3, [sp, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <sd_lld_serve_interrupt+0x108>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <sd_lld_serve_interrupt+0x10a>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <sd_lld_serve_interrupt+0x128>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8002c44:	9b01      	ldr	r3, [sp, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	2110      	movs	r1, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fee8 	bl	8002a20 <osalEventBroadcastFlagsI.lto_priv.4>
      cr1 &= ~USART_CR1_TCIE;
 8002c50:	9b05      	ldr	r3, [sp, #20]
 8002c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c56:	9305      	str	r3, [sp, #20]
    }
    osalSysUnlockFromISR();
 8002c58:	f7ff feda 	bl	8002a10 <osalSysUnlockFromISR.lto_priv.2>
  }

  /* Writing CR1 once.*/
  u->CR1 = cr1;
 8002c5c:	9b03      	ldr	r3, [sp, #12]
 8002c5e:	9a05      	ldr	r2, [sp, #20]
 8002c60:	601a      	str	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	b007      	add	sp, #28
 8002c66:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c6a:	bf00      	nop
 8002c6c:	0000      	movs	r0, r0
	...

08002c70 <__rccResetAHB4.lto_priv.1>:
__STATIC_INLINE void __rccResetAHB4(uint32_t mask) {
 8002c70:	b082      	sub	sp, #8
 8002c72:	9001      	str	r0, [sp, #4]
  RCC->AHB4RSTR |= mask;
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <__rccResetAHB4.lto_priv.1+0x34>)
 8002c76:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c7a:	490a      	ldr	r1, [pc, #40]	@ (8002ca4 <__rccResetAHB4.lto_priv.1+0x34>)
 8002c7c:	9b01      	ldr	r3, [sp, #4]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->AHB4RSTR &= ~mask;
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <__rccResetAHB4.lto_priv.1+0x34>)
 8002c86:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c8a:	9b01      	ldr	r3, [sp, #4]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	4905      	ldr	r1, [pc, #20]	@ (8002ca4 <__rccResetAHB4.lto_priv.1+0x34>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  (void)RCC->AHB4RSTR;
 8002c96:	4b03      	ldr	r3, [pc, #12]	@ (8002ca4 <__rccResetAHB4.lto_priv.1+0x34>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002c9c:	bf00      	nop
 8002c9e:	b002      	add	sp, #8
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	58024400 	.word	0x58024400
	...

08002cb0 <rccEnableAHB4.lto_priv.1>:
__STATIC_INLINE void rccEnableAHB4(uint32_t mask, bool lp) {
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	9001      	str	r0, [sp, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	f88d 3003 	strb.w	r3, [sp, #3]
  RCC_C1->AHB4ENR |= mask;
 8002cba:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <rccEnableAHB4.lto_priv.1+0x54>)
 8002cbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002cc0:	4910      	ldr	r1, [pc, #64]	@ (8002d04 <rccEnableAHB4.lto_priv.1+0x54>)
 8002cc2:	9b01      	ldr	r3, [sp, #4]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  if (lp) {
 8002cca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <rccEnableAHB4.lto_priv.1+0x34>
    RCC_C1->AHB4LPENR |= mask;
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <rccEnableAHB4.lto_priv.1+0x54>)
 8002cd4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002cd8:	490a      	ldr	r1, [pc, #40]	@ (8002d04 <rccEnableAHB4.lto_priv.1+0x54>)
 8002cda:	9b01      	ldr	r3, [sp, #4]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
 8002ce2:	e008      	b.n	8002cf6 <rccEnableAHB4.lto_priv.1+0x46>
    RCC_C1->AHB4LPENR &= ~mask;
 8002ce4:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <rccEnableAHB4.lto_priv.1+0x54>)
 8002ce6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002cea:	9b01      	ldr	r3, [sp, #4]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	4905      	ldr	r1, [pc, #20]	@ (8002d04 <rccEnableAHB4.lto_priv.1+0x54>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  (void)RCC_C1->AHB4LPENR;
 8002cf6:	4b03      	ldr	r3, [pc, #12]	@ (8002d04 <rccEnableAHB4.lto_priv.1+0x54>)
 8002cf8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
}
 8002cfc:	bf00      	nop
 8002cfe:	b002      	add	sp, #8
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	58024400 	.word	0x58024400
	...

08002d10 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
 8002d10:	b082      	sub	sp, #8
 8002d12:	9001      	str	r0, [sp, #4]
 8002d14:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
 8002d16:	9b00      	ldr	r3, [sp, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	9b01      	ldr	r3, [sp, #4]
 8002d1c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002d1e:	9b00      	ldr	r3, [sp, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	9b01      	ldr	r3, [sp, #4]
 8002d24:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8002d26:	9b00      	ldr	r3, [sp, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	9b01      	ldr	r3, [sp, #4]
 8002d2c:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8002d2e:	9b00      	ldr	r3, [sp, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	9b01      	ldr	r3, [sp, #4]
 8002d34:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8002d36:	9b00      	ldr	r3, [sp, #0]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	9b01      	ldr	r3, [sp, #4]
 8002d3c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8002d3e:	9b00      	ldr	r3, [sp, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	9b01      	ldr	r3, [sp, #4]
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 8002d46:	9b00      	ldr	r3, [sp, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	9b01      	ldr	r3, [sp, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	b002      	add	sp, #8
 8002d52:	4770      	bx	lr
	...

08002d60 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 8002d60:	b508      	push	{r3, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  __rccResetAHB4(STM32_GPIO_EN_MASK);
 8002d62:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8002d66:	f7ff ff83 	bl	8002c70 <__rccResetAHB4.lto_priv.1>
  rccEnableAHB4(STM32_GPIO_EN_MASK, true);
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8002d70:	f7ff ff9e 	bl	8002cb0 <rccEnableAHB4.lto_priv.1>

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 8002d74:	4916      	ldr	r1, [pc, #88]	@ (8002dd0 <stm32_gpio_init+0x70>)
 8002d76:	4817      	ldr	r0, [pc, #92]	@ (8002dd4 <stm32_gpio_init+0x74>)
 8002d78:	f7ff ffca 	bl	8002d10 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 8002d7c:	4916      	ldr	r1, [pc, #88]	@ (8002dd8 <stm32_gpio_init+0x78>)
 8002d7e:	4817      	ldr	r0, [pc, #92]	@ (8002ddc <stm32_gpio_init+0x7c>)
 8002d80:	f7ff ffc6 	bl	8002d10 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 8002d84:	4916      	ldr	r1, [pc, #88]	@ (8002de0 <stm32_gpio_init+0x80>)
 8002d86:	4817      	ldr	r0, [pc, #92]	@ (8002de4 <stm32_gpio_init+0x84>)
 8002d88:	f7ff ffc2 	bl	8002d10 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 8002d8c:	4916      	ldr	r1, [pc, #88]	@ (8002de8 <stm32_gpio_init+0x88>)
 8002d8e:	4817      	ldr	r0, [pc, #92]	@ (8002dec <stm32_gpio_init+0x8c>)
 8002d90:	f7ff ffbe 	bl	8002d10 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 8002d94:	4916      	ldr	r1, [pc, #88]	@ (8002df0 <stm32_gpio_init+0x90>)
 8002d96:	4817      	ldr	r0, [pc, #92]	@ (8002df4 <stm32_gpio_init+0x94>)
 8002d98:	f7ff ffba 	bl	8002d10 <gpio_init>
#endif
#if STM32_HAS_GPIOF
  gpio_init(GPIOF, &gpio_default_config.PFData);
 8002d9c:	4916      	ldr	r1, [pc, #88]	@ (8002df8 <stm32_gpio_init+0x98>)
 8002d9e:	4817      	ldr	r0, [pc, #92]	@ (8002dfc <stm32_gpio_init+0x9c>)
 8002da0:	f7ff ffb6 	bl	8002d10 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
 8002da4:	4916      	ldr	r1, [pc, #88]	@ (8002e00 <stm32_gpio_init+0xa0>)
 8002da6:	4817      	ldr	r0, [pc, #92]	@ (8002e04 <stm32_gpio_init+0xa4>)
 8002da8:	f7ff ffb2 	bl	8002d10 <gpio_init>
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 8002dac:	4916      	ldr	r1, [pc, #88]	@ (8002e08 <stm32_gpio_init+0xa8>)
 8002dae:	4817      	ldr	r0, [pc, #92]	@ (8002e0c <stm32_gpio_init+0xac>)
 8002db0:	f7ff ffae 	bl	8002d10 <gpio_init>
#endif
#if STM32_HAS_GPIOI
  gpio_init(GPIOI, &gpio_default_config.PIData);
 8002db4:	4916      	ldr	r1, [pc, #88]	@ (8002e10 <stm32_gpio_init+0xb0>)
 8002db6:	4817      	ldr	r0, [pc, #92]	@ (8002e14 <stm32_gpio_init+0xb4>)
 8002db8:	f7ff ffaa 	bl	8002d10 <gpio_init>
#endif
#if STM32_HAS_GPIOJ
  gpio_init(GPIOJ, &gpio_default_config.PJData);
 8002dbc:	4916      	ldr	r1, [pc, #88]	@ (8002e18 <stm32_gpio_init+0xb8>)
 8002dbe:	4817      	ldr	r0, [pc, #92]	@ (8002e1c <stm32_gpio_init+0xbc>)
 8002dc0:	f7ff ffa6 	bl	8002d10 <gpio_init>
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
 8002dc4:	4916      	ldr	r1, [pc, #88]	@ (8002e20 <stm32_gpio_init+0xc0>)
 8002dc6:	4817      	ldr	r0, [pc, #92]	@ (8002e24 <stm32_gpio_init+0xc4>)
 8002dc8:	f7ff ffa2 	bl	8002d10 <gpio_init>
#endif
}
 8002dcc:	bf00      	nop
 8002dce:	bd08      	pop	{r3, pc}
 8002dd0:	08004d2c 	.word	0x08004d2c
 8002dd4:	58020000 	.word	0x58020000
 8002dd8:	08004d48 	.word	0x08004d48
 8002ddc:	58020400 	.word	0x58020400
 8002de0:	08004d64 	.word	0x08004d64
 8002de4:	58020800 	.word	0x58020800
 8002de8:	08004d80 	.word	0x08004d80
 8002dec:	58020c00 	.word	0x58020c00
 8002df0:	08004d9c 	.word	0x08004d9c
 8002df4:	58021000 	.word	0x58021000
 8002df8:	08004db8 	.word	0x08004db8
 8002dfc:	58021400 	.word	0x58021400
 8002e00:	08004dd4 	.word	0x08004dd4
 8002e04:	58021800 	.word	0x58021800
 8002e08:	08004df0 	.word	0x08004df0
 8002e0c:	58021c00 	.word	0x58021c00
 8002e10:	08004e0c 	.word	0x08004e0c
 8002e14:	58022000 	.word	0x58022000
 8002e18:	08004e28 	.word	0x08004e28
 8002e1c:	58022400 	.word	0x58022400
 8002e20:	08004e44 	.word	0x08004e44
 8002e24:	58022800 	.word	0x58022800
	...

08002e30 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8002e30:	b508      	push	{r3, lr}

  stm32_gpio_init();
 8002e32:	f7ff ff95 	bl	8002d60 <stm32_gpio_init>
  stm32_clock_init();
 8002e36:	f7fe fe7b 	bl	8001b30 <stm32_clock_init>
}
 8002e3a:	bf00      	nop
 8002e3c:	bd08      	pop	{r3, pc}
 8002e3e:	bf00      	nop

08002e40 <boardInit>:
 * @brief   Board-specific initialization code.
 * @note    You can add your board-specific code here.
 */
void boardInit(void) {

}
 8002e40:	bf00      	nop
 8002e42:	4770      	bx	lr
	...

08002e50 <__tm_calibration_object_init>:
 *
 * @param[out] tcp      pointer to the @p tm_calibration_t structure
 *
 * @notapi
 */
static inline void __tm_calibration_object_init(tm_calibration_t *tcp) {
 8002e50:	b500      	push	{lr}
 8002e52:	b08b      	sub	sp, #44	@ 0x2c
 8002e54:	9001      	str	r0, [sp, #4]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 8002e56:	9b01      	ldr	r3, [sp, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
  chTMObjectInit(&tm);
 8002e5c:	ab02      	add	r3, sp, #8
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 faa6 	bl	80043b0 <chTMObjectInit>
  i = TM_CALIBRATION_LOOP;
 8002e64:	2304      	movs	r3, #4
 8002e66:	9309      	str	r3, [sp, #36]	@ 0x24
  do {
    chTMStartMeasurementX(&tm);
 8002e68:	ab02      	add	r3, sp, #8
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 fac0 	bl	80043f0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8002e70:	ab02      	add	r3, sp, #8
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 facc 	bl	8004410 <chTMStopMeasurementX>
    i--;
 8002e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	9309      	str	r3, [sp, #36]	@ 0x24
  } while (i > 0U);
 8002e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f1      	bne.n	8002e68 <__tm_calibration_object_init+0x18>
  tcp->offset = tm.best;
 8002e84:	9a02      	ldr	r2, [sp, #8]
 8002e86:	9b01      	ldr	r3, [sp, #4]
 8002e88:	601a      	str	r2, [r3, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	b00b      	add	sp, #44	@ 0x2c
 8002e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e92:	bf00      	nop
	...

08002ea0 <chSysUnlock.lto_priv.4>:
static inline void chSysUnlock(void) {
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002ea6:	9b01      	ldr	r3, [sp, #4]
 8002ea8:	f383 8811 	msr	BASEPRI, r3
}
 8002eac:	bf00      	nop
}
 8002eae:	bf00      	nop
}
 8002eb0:	bf00      	nop
 8002eb2:	b002      	add	sp, #8
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
	...

08002ec0 <__oslib_init>:
/**
 * @brief   Initialization of all library modules.
 *
 * @notapi
 */
static inline void __oslib_init(void) {
 8002ec0:	b508      	push	{r3, lr}

#if CH_CFG_USE_MEMCORE == TRUE
  __core_init();
 8002ec2:	f001 fbfd 	bl	80046c0 <__core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  __heap_init();
 8002ec6:	f001 fc4b 	bl	8004760 <__heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  __factory_init();
 8002eca:	f001 fca1 	bl	8004810 <__factory_init>
#endif
}
 8002ece:	bf00      	nop
 8002ed0:	bd08      	pop	{r3, pc}
 8002ed2:	bf00      	nop
	...

08002ee0 <chSysInit>:
 *          interrupts are enabled.
 * @post    the system is in @p ch_sys_running state.
 *
 * @special
 */
void chSysInit(void) {
 8002ee0:	b500      	push	{lr}
 8002ee2:	b083      	sub	sp, #12
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
 8002ee4:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <chSysInit+0x4c>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 8002eea:	2300      	movs	r3, #0
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	e008      	b.n	8002f02 <chSysInit+0x22>
    ch_system.instances[i] = NULL;
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8002f2c <chSysInit+0x4c>)
 8002ef2:	9b01      	ldr	r3, [sp, #4]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	2200      	movs	r2, #0
 8002efa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 8002efc:	9b01      	ldr	r3, [sp, #4]
 8002efe:	3301      	adds	r3, #1
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	9b01      	ldr	r3, [sp, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f3      	beq.n	8002ef0 <chSysInit+0x10>
  }

#if CH_CFG_USE_TM == TRUE
  /* Time Measurement calibration.*/
  __tm_calibration_object_init(&ch_system.tmc);
 8002f08:	4809      	ldr	r0, [pc, #36]	@ (8002f30 <chSysInit+0x50>)
 8002f0a:	f7ff ffa1 	bl	8002e50 <__tm_calibration_object_init>

  /* User system initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* OS library modules.*/
  __oslib_init();
 8002f0e:	f7ff ffd7 	bl	8002ec0 <__oslib_init>

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);
 8002f12:	4908      	ldr	r1, [pc, #32]	@ (8002f34 <chSysInit+0x54>)
 8002f14:	4808      	ldr	r0, [pc, #32]	@ (8002f38 <chSysInit+0x58>)
 8002f16:	f000 ff63 	bl	8003de0 <chInstanceObjectInit>

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
 8002f1a:	4b04      	ldr	r3, [pc, #16]	@ (8002f2c <chSysInit+0x4c>)
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	701a      	strb	r2, [r3, #0]
  chSysUnlock();
 8002f20:	f7ff ffbe 	bl	8002ea0 <chSysUnlock.lto_priv.4>
}
 8002f24:	bf00      	nop
 8002f26:	b003      	add	sp, #12
 8002f28:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f2c:	240000f0 	.word	0x240000f0
 8002f30:	240000f8 	.word	0x240000f8
 8002f34:	08004e8c 	.word	0x08004e8c
 8002f38:	24000100 	.word	0x24000100
 8002f3c:	00000000 	.word	0x00000000

08002f40 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8002f40:	b508      	push	{r3, lr}
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
 8002f42:	f000 fbed 	bl	8003720 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 8002f46:	bf00      	nop
 8002f48:	bd08      	pop	{r3, pc}
 8002f4a:	bf00      	nop
 8002f4c:	0000      	movs	r0, r0
	...

08002f50 <chRFCUCollectFaultsI>:
/**
 * @brief   Adds fault flags to the current mask.
 *
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {
 8002f50:	b082      	sub	sp, #8
 8002f52:	9001      	str	r0, [sp, #4]

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8002f54:	4b04      	ldr	r3, [pc, #16]	@ (8002f68 <chRFCUCollectFaultsI+0x18>)
 8002f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f58:	9b01      	ldr	r3, [sp, #4]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	4a02      	ldr	r2, [pc, #8]	@ (8002f68 <chRFCUCollectFaultsI+0x18>)
 8002f5e:	6353      	str	r3, [r2, #52]	@ 0x34
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 8002f60:	bf00      	nop
 8002f62:	b002      	add	sp, #8
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	24000100 	.word	0x24000100
 8002f6c:	00000000 	.word	0x00000000

08002f70 <port_timer_get_time.lto_priv.1>:
static inline systime_t port_timer_get_time(void) {
 8002f70:	b508      	push	{r3, lr}
  return stGetCounter();
 8002f72:	f7fd fbb5 	bl	80006e0 <stGetCounter>
 8002f76:	4603      	mov	r3, r0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd08      	pop	{r3, pc}
 8002f7c:	0000      	movs	r0, r0
	...

08002f80 <chVTGetSystemTimeX.lto_priv.1>:
static inline systime_t chVTGetSystemTimeX(void) {
 8002f80:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8002f82:	f7ff fff5 	bl	8002f70 <port_timer_get_time.lto_priv.1>
 8002f86:	4603      	mov	r3, r0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd08      	pop	{r3, pc}
 8002f8c:	0000      	movs	r0, r0
	...

08002f90 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
NOINLINE static void trace_next(os_instance_t *oip) {
 8002f90:	b510      	push	{r4, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	9001      	str	r0, [sp, #4]

  oip->trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8002f96:	9b01      	ldr	r3, [sp, #4]
 8002f98:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 8002f9c:	f7ff fff0 	bl	8002f80 <chVTGetSystemTimeX.lto_priv.1>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	6063      	str	r3, [r4, #4]
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <trace_next+0x5c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
#if PORT_SUPPORTS_RT == TRUE
  oip->trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8002fa8:	9a01      	ldr	r2, [sp, #4]
 8002faa:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8002fae:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8002fb2:	6813      	ldr	r3, [r2, #0]
 8002fb4:	f361 231f 	bfi	r3, r1, #8, #24
 8002fb8:	6013      	str	r3, [r2, #0]
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(oip->trace_buffer.ptr);

  if (++oip->trace_buffer.ptr >= &oip->trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
 8002fba:	9b01      	ldr	r3, [sp, #4]
 8002fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fc0:	f103 0210 	add.w	r2, r3, #16
 8002fc4:	9b01      	ldr	r3, [sp, #4]
 8002fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8002fca:	9b01      	ldr	r3, [sp, #4]
 8002fcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002fd0:	9b01      	ldr	r3, [sp, #4]
 8002fd2:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d305      	bcc.n	8002fe6 <trace_next+0x56>
    oip->trace_buffer.ptr = &oip->trace_buffer.buffer[0];
 8002fda:	9b01      	ldr	r3, [sp, #4]
 8002fdc:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8002fe0:	9b01      	ldr	r3, [sp, #4]
 8002fe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd10      	pop	{r4, pc}
 8002fec:	e0001000 	.word	0xe0001000

08002ff0 <__trace_object_init>:
 *
 * @param[out] tbp      pointer to the @p trace_buffer_t structure
 *
 * @notapi
 */
void __trace_object_init(trace_buffer_t *tbp) {
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	9001      	str	r0, [sp, #4]
  unsigned i;

  tbp->suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8002ff4:	9b01      	ldr	r3, [sp, #4]
 8002ff6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ffa:	801a      	strh	r2, [r3, #0]
  tbp->size      = CH_DBG_TRACE_BUFFER_SIZE;
 8002ffc:	9b01      	ldr	r3, [sp, #4]
 8002ffe:	2280      	movs	r2, #128	@ 0x80
 8003000:	805a      	strh	r2, [r3, #2]
  tbp->ptr       = &tbp->buffer[0];
 8003002:	9b01      	ldr	r3, [sp, #4]
 8003004:	f103 0208 	add.w	r2, r3, #8
 8003008:	9b01      	ldr	r3, [sp, #4]
 800300a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 800300c:	2300      	movs	r3, #0
 800300e:	9303      	str	r3, [sp, #12]
 8003010:	e00c      	b.n	800302c <__trace_object_init+0x3c>
    tbp->buffer[i].type = CH_TRACE_TYPE_UNUSED;
 8003012:	9a01      	ldr	r2, [sp, #4]
 8003014:	9b03      	ldr	r3, [sp, #12]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	4413      	add	r3, r2
 800301a:	f103 0208 	add.w	r2, r3, #8
 800301e:	7813      	ldrb	r3, [r2, #0]
 8003020:	f023 0307 	bic.w	r3, r3, #7
 8003024:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8003026:	9b03      	ldr	r3, [sp, #12]
 8003028:	3301      	adds	r3, #1
 800302a:	9303      	str	r3, [sp, #12]
 800302c:	9b03      	ldr	r3, [sp, #12]
 800302e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003030:	d9ef      	bls.n	8003012 <__trace_object_init+0x22>
  }
}
 8003032:	bf00      	nop
 8003034:	bf00      	nop
 8003036:	b004      	add	sp, #16
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	0000      	movs	r0, r0
	...

08003040 <__trace_ready>:
 * @param[in] tp        the thread that just become ready
 * @param[in] msg       the thread ready message
 *
 * @notapi
 */
void __trace_ready(thread_t *tp, msg_t msg) {
 8003040:	b500      	push	{lr}
 8003042:	b085      	sub	sp, #20
 8003044:	9001      	str	r0, [sp, #4]
 8003046:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
 8003048:	4b17      	ldr	r3, [pc, #92]	@ (80030a8 <__trace_ready+0x68>)
 800304a:	9303      	str	r3, [sp, #12]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_READY) == 0U) {
 800304c:	9b03      	ldr	r3, [sp, #12]
 800304e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d122      	bne.n	80030a0 <__trace_ready+0x60>
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_READY;
 800305a:	9b03      	ldr	r3, [sp, #12]
 800305c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003060:	7813      	ldrb	r3, [r2, #0]
 8003062:	2101      	movs	r1, #1
 8003064:	f361 0302 	bfi	r3, r1, #0, #3
 8003068:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = (uint8_t)tp->state;
 800306a:	9b01      	ldr	r3, [sp, #4]
 800306c:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 8003070:	9b03      	ldr	r3, [sp, #12]
 8003072:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003076:	460b      	mov	r3, r1
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	b2d9      	uxtb	r1, r3
 800307e:	7813      	ldrb	r3, [r2, #0]
 8003080:	f361 03c7 	bfi	r3, r1, #3, #5
 8003084:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.rdy.tp    = tp;
 8003086:	9b03      	ldr	r3, [sp, #12]
 8003088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800308c:	9a01      	ldr	r2, [sp, #4]
 800308e:	609a      	str	r2, [r3, #8]
    oip->trace_buffer.ptr->u.rdy.msg   = msg;
 8003090:	9b03      	ldr	r3, [sp, #12]
 8003092:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003096:	9a00      	ldr	r2, [sp, #0]
 8003098:	60da      	str	r2, [r3, #12]
    trace_next(oip);
 800309a:	9803      	ldr	r0, [sp, #12]
 800309c:	f7ff ff78 	bl	8002f90 <trace_next>
  }
}
 80030a0:	bf00      	nop
 80030a2:	b005      	add	sp, #20
 80030a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80030a8:	24000100 	.word	0x24000100
 80030ac:	00000000 	.word	0x00000000

080030b0 <__trace_switch>:
 * @param[in] ntp       the thread being switched in
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void __trace_switch(thread_t *ntp, thread_t *otp) {
 80030b0:	b500      	push	{lr}
 80030b2:	b085      	sub	sp, #20
 80030b4:	9001      	str	r0, [sp, #4]
 80030b6:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
 80030b8:	4b18      	ldr	r3, [pc, #96]	@ (800311c <__trace_switch+0x6c>)
 80030ba:	9303      	str	r3, [sp, #12]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 80030bc:	9b03      	ldr	r3, [sp, #12]
 80030be:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d123      	bne.n	8003112 <__trace_switch+0x62>
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80030d0:	7813      	ldrb	r3, [r2, #0]
 80030d2:	2102      	movs	r1, #2
 80030d4:	f361 0302 	bfi	r3, r1, #0, #3
 80030d8:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = (uint8_t)otp->state;
 80030da:	9b00      	ldr	r3, [sp, #0]
 80030dc:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 80030e0:	9b03      	ldr	r3, [sp, #12]
 80030e2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80030e6:	460b      	mov	r3, r1
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	b2d9      	uxtb	r1, r3
 80030ee:	7813      	ldrb	r3, [r2, #0]
 80030f0:	f361 03c7 	bfi	r3, r1, #3, #5
 80030f4:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.sw.ntp    = ntp;
 80030f6:	9b03      	ldr	r3, [sp, #12]
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030fc:	9a01      	ldr	r2, [sp, #4]
 80030fe:	609a      	str	r2, [r3, #8]
    oip->trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8003100:	9b03      	ldr	r3, [sp, #12]
 8003102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003106:	9a00      	ldr	r2, [sp, #0]
 8003108:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800310a:	60da      	str	r2, [r3, #12]
    trace_next(oip);
 800310c:	9803      	ldr	r0, [sp, #12]
 800310e:	f7ff ff3f 	bl	8002f90 <trace_next>
  }
}
 8003112:	bf00      	nop
 8003114:	b005      	add	sp, #20
 8003116:	f85d fb04 	ldr.w	pc, [sp], #4
 800311a:	bf00      	nop
 800311c:	24000100 	.word	0x24000100

08003120 <__trace_isr_enter>:
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void __trace_isr_enter(const char *isr) {
 8003120:	b500      	push	{lr}
 8003122:	b087      	sub	sp, #28
 8003124:	9001      	str	r0, [sp, #4]
  os_instance_t *oip = currcore;
 8003126:	4b1a      	ldr	r3, [pc, #104]	@ (8003190 <__trace_isr_enter+0x70>)
 8003128:	9305      	str	r3, [sp, #20]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 800312a:	9b05      	ldr	r3, [sp, #20]
 800312c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d126      	bne.n	8003186 <__trace_isr_enter+0x66>
 8003138:	2330      	movs	r3, #48	@ 0x30
 800313a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800313c:	9b03      	ldr	r3, [sp, #12]
 800313e:	f383 8811 	msr	BASEPRI, r3
}
 8003142:	bf00      	nop
}
 8003144:	bf00      	nop
}
 8003146:	bf00      	nop
    port_lock_from_isr();
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8003148:	9b05      	ldr	r3, [sp, #20]
 800314a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800314e:	7813      	ldrb	r3, [r2, #0]
 8003150:	2103      	movs	r1, #3
 8003152:	f361 0302 	bfi	r3, r1, #0, #3
 8003156:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = 0U;
 8003158:	9b05      	ldr	r3, [sp, #20]
 800315a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800315e:	7813      	ldrb	r3, [r2, #0]
 8003160:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003164:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.isr.name  = isr;
 8003166:	9b05      	ldr	r3, [sp, #20]
 8003168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800316c:	9a01      	ldr	r2, [sp, #4]
 800316e:	609a      	str	r2, [r3, #8]
    trace_next(oip);
 8003170:	9805      	ldr	r0, [sp, #20]
 8003172:	f7ff ff0d 	bl	8002f90 <trace_next>
 8003176:	2300      	movs	r3, #0
 8003178:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800317a:	9b04      	ldr	r3, [sp, #16]
 800317c:	f383 8811 	msr	BASEPRI, r3
}
 8003180:	bf00      	nop
}
 8003182:	bf00      	nop
}
 8003184:	bf00      	nop
    port_unlock_from_isr();
  }
}
 8003186:	bf00      	nop
 8003188:	b007      	add	sp, #28
 800318a:	f85d fb04 	ldr.w	pc, [sp], #4
 800318e:	bf00      	nop
 8003190:	24000100 	.word	0x24000100
	...

080031a0 <__trace_isr_leave>:
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void __trace_isr_leave(const char *isr) {
 80031a0:	b500      	push	{lr}
 80031a2:	b087      	sub	sp, #28
 80031a4:	9001      	str	r0, [sp, #4]
  os_instance_t *oip = currcore;
 80031a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003210 <__trace_isr_leave+0x70>)
 80031a8:	9305      	str	r3, [sp, #20]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80031aa:	9b05      	ldr	r3, [sp, #20]
 80031ac:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d126      	bne.n	8003206 <__trace_isr_leave+0x66>
 80031b8:	2330      	movs	r3, #48	@ 0x30
 80031ba:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80031bc:	9b03      	ldr	r3, [sp, #12]
 80031be:	f383 8811 	msr	BASEPRI, r3
}
 80031c2:	bf00      	nop
}
 80031c4:	bf00      	nop
}
 80031c6:	bf00      	nop
    port_lock_from_isr();
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 80031c8:	9b05      	ldr	r3, [sp, #20]
 80031ca:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80031ce:	7813      	ldrb	r3, [r2, #0]
 80031d0:	2104      	movs	r1, #4
 80031d2:	f361 0302 	bfi	r3, r1, #0, #3
 80031d6:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = 0U;
 80031d8:	9b05      	ldr	r3, [sp, #20]
 80031da:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80031de:	7813      	ldrb	r3, [r2, #0]
 80031e0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80031e4:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.isr.name  = isr;
 80031e6:	9b05      	ldr	r3, [sp, #20]
 80031e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031ec:	9a01      	ldr	r2, [sp, #4]
 80031ee:	609a      	str	r2, [r3, #8]
    trace_next(oip);
 80031f0:	9805      	ldr	r0, [sp, #20]
 80031f2:	f7ff fecd 	bl	8002f90 <trace_next>
 80031f6:	2300      	movs	r3, #0
 80031f8:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80031fa:	9b04      	ldr	r3, [sp, #16]
 80031fc:	f383 8811 	msr	BASEPRI, r3
}
 8003200:	bf00      	nop
}
 8003202:	bf00      	nop
}
 8003204:	bf00      	nop
    port_unlock_from_isr();
  }
}
 8003206:	bf00      	nop
 8003208:	b007      	add	sp, #28
 800320a:	f85d fb04 	ldr.w	pc, [sp], #4
 800320e:	bf00      	nop
 8003210:	24000100 	.word	0x24000100
	...

08003220 <chTimeAddX.lto_priv.1>:
                                   sysinterval_t interval) {
 8003220:	b082      	sub	sp, #8
 8003222:	9001      	str	r0, [sp, #4]
 8003224:	9100      	str	r1, [sp, #0]
  return systime + (systime_t)interval;
 8003226:	9a01      	ldr	r2, [sp, #4]
 8003228:	9b00      	ldr	r3, [sp, #0]
 800322a:	4413      	add	r3, r2
}
 800322c:	4618      	mov	r0, r3
 800322e:	b002      	add	sp, #8
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
	...

08003240 <chTimeDiffX.lto_priv.0>:
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 8003240:	b082      	sub	sp, #8
 8003242:	9001      	str	r0, [sp, #4]
 8003244:	9100      	str	r1, [sp, #0]
  return (sysinterval_t)((systime_t)(end - start));
 8003246:	9a00      	ldr	r2, [sp, #0]
 8003248:	9b01      	ldr	r3, [sp, #4]
 800324a:	1ad3      	subs	r3, r2, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	b002      	add	sp, #8
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
	...

08003260 <ch_dlist_isempty>:
 * @param[in] dlhp      pointer to the delta list header
 * @return              The status of the delta list.
 *
 * @notapi
 */
static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {
 8003260:	b082      	sub	sp, #8
 8003262:	9001      	str	r0, [sp, #4]

  return (bool)(dlhp == dlhp->next);
 8003264:	9b01      	ldr	r3, [sp, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	9a01      	ldr	r2, [sp, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	b002      	add	sp, #8
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	0000      	movs	r0, r0
	...

08003280 <ch_dlist_isfirst>:
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline bool ch_dlist_isfirst(ch_delta_list_t *dlhp,
                                    ch_delta_list_t *dlp) {
 8003280:	b082      	sub	sp, #8
 8003282:	9001      	str	r0, [sp, #4]
 8003284:	9100      	str	r1, [sp, #0]

  return (bool)(dlhp->next == dlp);
 8003286:	9b01      	ldr	r3, [sp, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	9a00      	ldr	r2, [sp, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
}
 8003296:	4618      	mov	r0, r3
 8003298:	b002      	add	sp, #8
 800329a:	4770      	bx	lr
 800329c:	0000      	movs	r0, r0
	...

080032a0 <ch_dlist_insert_after>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {
 80032a0:	b084      	sub	sp, #16
 80032a2:	9003      	str	r0, [sp, #12]
 80032a4:	9102      	str	r1, [sp, #8]
 80032a6:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
 80032a8:	9b02      	ldr	r3, [sp, #8]
 80032aa:	9a01      	ldr	r2, [sp, #4]
 80032ac:	609a      	str	r2, [r3, #8]
  dlp->prev       = dlhp;
 80032ae:	9b02      	ldr	r3, [sp, #8]
 80032b0:	9a03      	ldr	r2, [sp, #12]
 80032b2:	605a      	str	r2, [r3, #4]
  dlp->next       = dlp->prev->next;
 80032b4:	9b02      	ldr	r3, [sp, #8]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	9b02      	ldr	r3, [sp, #8]
 80032bc:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp;
 80032be:	9b02      	ldr	r3, [sp, #8]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	9a02      	ldr	r2, [sp, #8]
 80032c4:	605a      	str	r2, [r3, #4]
  dlhp->next      = dlp;
 80032c6:	9b03      	ldr	r3, [sp, #12]
 80032c8:	9a02      	ldr	r2, [sp, #8]
 80032ca:	601a      	str	r2, [r3, #0]
}
 80032cc:	bf00      	nop
 80032ce:	b004      	add	sp, #16
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
	...

080032e0 <ch_dlist_insert_before>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {
 80032e0:	b084      	sub	sp, #16
 80032e2:	9003      	str	r0, [sp, #12]
 80032e4:	9102      	str	r1, [sp, #8]
 80032e6:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
 80032e8:	9b02      	ldr	r3, [sp, #8]
 80032ea:	9a01      	ldr	r2, [sp, #4]
 80032ec:	609a      	str	r2, [r3, #8]
  dlp->next       = dlhp;
 80032ee:	9b02      	ldr	r3, [sp, #8]
 80032f0:	9a03      	ldr	r2, [sp, #12]
 80032f2:	601a      	str	r2, [r3, #0]
  dlp->prev       = dlp->next->prev;
 80032f4:	9b02      	ldr	r3, [sp, #8]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	9b02      	ldr	r3, [sp, #8]
 80032fc:	605a      	str	r2, [r3, #4]
  dlp->prev->next = dlp;
 80032fe:	9b02      	ldr	r3, [sp, #8]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	9a02      	ldr	r2, [sp, #8]
 8003304:	601a      	str	r2, [r3, #0]
  dlhp->prev      = dlp;
 8003306:	9b03      	ldr	r3, [sp, #12]
 8003308:	9a02      	ldr	r2, [sp, #8]
 800330a:	605a      	str	r2, [r3, #4]
}
 800330c:	bf00      	nop
 800330e:	b004      	add	sp, #16
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
	...

08003320 <ch_dlist_insert>:
 *
 * @notapi
 */
static inline void ch_dlist_insert(ch_delta_list_t *dlhp,
                                   ch_delta_list_t *dlep,
                                   sysinterval_t delta) {
 8003320:	b500      	push	{lr}
 8003322:	b087      	sub	sp, #28
 8003324:	9003      	str	r0, [sp, #12]
 8003326:	9102      	str	r1, [sp, #8]
 8003328:	9201      	str	r2, [sp, #4]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
 800332a:	9b03      	ldr	r3, [sp, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
 8003330:	e007      	b.n	8003342 <ch_dlist_insert+0x22>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
 8003332:	9b05      	ldr	r3, [sp, #20]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	9a01      	ldr	r2, [sp, #4]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	9301      	str	r3, [sp, #4]
    dlp = dlp->next;
 800333c:	9b05      	ldr	r3, [sp, #20]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
 8003342:	9b05      	ldr	r3, [sp, #20]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	9a01      	ldr	r2, [sp, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	bf8c      	ite	hi
 800334c:	2301      	movhi	r3, #1
 800334e:	2300      	movls	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ed      	bne.n	8003332 <ch_dlist_insert+0x12>
  }

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);
 8003356:	9a01      	ldr	r2, [sp, #4]
 8003358:	9902      	ldr	r1, [sp, #8]
 800335a:	9805      	ldr	r0, [sp, #20]
 800335c:	f7ff ffc0 	bl	80032e0 <ch_dlist_insert_before>

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 8003360:	9b05      	ldr	r3, [sp, #20]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	9b01      	ldr	r3, [sp, #4]
 8003366:	1ad2      	subs	r2, r2, r3
 8003368:	9b05      	ldr	r3, [sp, #20]
 800336a:	609a      	str	r2, [r3, #8]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 800336c:	9b03      	ldr	r3, [sp, #12]
 800336e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	bf00      	nop
 8003376:	b007      	add	sp, #28
 8003378:	f85d fb04 	ldr.w	pc, [sp], #4
 800337c:	0000      	movs	r0, r0
	...

08003380 <ch_dlist_remove_first>:
 *
 * @param[in] dlhp      pointer to the delta list header
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_remove_first(ch_delta_list_t *dlhp) {
 8003380:	b084      	sub	sp, #16
 8003382:	9001      	str	r0, [sp, #4]
  ch_delta_list_t *dlp = dlhp->next;
 8003384:	9b01      	ldr	r3, [sp, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	9303      	str	r3, [sp, #12]

  dlhp->next       = dlp->next;
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	9b01      	ldr	r3, [sp, #4]
 8003390:	601a      	str	r2, [r3, #0]
  dlhp->next->prev = dlhp;
 8003392:	9b01      	ldr	r3, [sp, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	9a01      	ldr	r2, [sp, #4]
 8003398:	605a      	str	r2, [r3, #4]

  return dlp;
 800339a:	9b03      	ldr	r3, [sp, #12]
}
 800339c:	4618      	mov	r0, r3
 800339e:	b004      	add	sp, #16
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
	...

080033b0 <ch_dlist_dequeue>:
 *
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {
 80033b0:	b082      	sub	sp, #8
 80033b2:	9001      	str	r0, [sp, #4]

  dlp->prev->next = dlp->next;
 80033b4:	9b01      	ldr	r3, [sp, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	9a01      	ldr	r2, [sp, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp->prev;
 80033be:	9b01      	ldr	r3, [sp, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	9a01      	ldr	r2, [sp, #4]
 80033c4:	6852      	ldr	r2, [r2, #4]
 80033c6:	605a      	str	r2, [r3, #4]

  return dlp;
 80033c8:	9b01      	ldr	r3, [sp, #4]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	b002      	add	sp, #8
 80033ce:	4770      	bx	lr

080033d0 <port_timer_start_alarm>:
static inline void port_timer_start_alarm(systime_t time) {
 80033d0:	b500      	push	{lr}
 80033d2:	b083      	sub	sp, #12
 80033d4:	9001      	str	r0, [sp, #4]
  stStartAlarm(time);
 80033d6:	9801      	ldr	r0, [sp, #4]
 80033d8:	f7fd f98a 	bl	80006f0 <stStartAlarm>
}
 80033dc:	bf00      	nop
 80033de:	b003      	add	sp, #12
 80033e0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080033f0 <port_timer_stop_alarm>:
static inline void port_timer_stop_alarm(void) {
 80033f0:	b508      	push	{r3, lr}
  stStopAlarm();
 80033f2:	f7fd f98d 	bl	8000710 <stStopAlarm>
}
 80033f6:	bf00      	nop
 80033f8:	bd08      	pop	{r3, pc}
 80033fa:	bf00      	nop
 80033fc:	0000      	movs	r0, r0
	...

08003400 <port_timer_set_alarm>:
static inline void port_timer_set_alarm(systime_t time) {
 8003400:	b500      	push	{lr}
 8003402:	b083      	sub	sp, #12
 8003404:	9001      	str	r0, [sp, #4]
  stSetAlarm(time);
 8003406:	9801      	ldr	r0, [sp, #4]
 8003408:	f7fd f98a 	bl	8000720 <stSetAlarm>
}
 800340c:	bf00      	nop
 800340e:	b003      	add	sp, #12
 8003410:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003420 <port_timer_get_time.lto_priv.2>:
static inline systime_t port_timer_get_time(void) {
 8003420:	b508      	push	{r3, lr}
  return stGetCounter();
 8003422:	f7fd f95d 	bl	80006e0 <stGetCounter>
 8003426:	4603      	mov	r3, r0
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd08      	pop	{r3, pc}
 800342c:	0000      	movs	r0, r0
	...

08003430 <chSysLockFromISR.lto_priv.4>:
static inline void chSysLockFromISR(void) {
 8003430:	b082      	sub	sp, #8
 8003432:	2330      	movs	r3, #48	@ 0x30
 8003434:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003436:	9b01      	ldr	r3, [sp, #4]
 8003438:	f383 8811 	msr	BASEPRI, r3
}
 800343c:	bf00      	nop
}
 800343e:	bf00      	nop
}
 8003440:	bf00      	nop
}
 8003442:	bf00      	nop
 8003444:	b002      	add	sp, #8
 8003446:	4770      	bx	lr
	...

08003450 <chSysUnlockFromISR.lto_priv.4>:
static inline void chSysUnlockFromISR(void) {
 8003450:	b082      	sub	sp, #8
 8003452:	2300      	movs	r3, #0
 8003454:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003456:	9b01      	ldr	r3, [sp, #4]
 8003458:	f383 8811 	msr	BASEPRI, r3
}
 800345c:	bf00      	nop
}
 800345e:	bf00      	nop
}
 8003460:	bf00      	nop
}
 8003462:	bf00      	nop
 8003464:	b002      	add	sp, #8
 8003466:	4770      	bx	lr
	...

08003470 <chVTGetSystemTimeX.lto_priv.2>:
static inline systime_t chVTGetSystemTimeX(void) {
 8003470:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8003472:	f7ff ffd5 	bl	8003420 <port_timer_get_time.lto_priv.2>
 8003476:	4603      	mov	r3, r0
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd08      	pop	{r3, pc}
 800347c:	0000      	movs	r0, r0
	...

08003480 <vt_set_alarm>:
 *          in order to compensate for the event.
 *
 * @param[in] now       last known system time
 * @param[in] delay     delay over @p now
 */
static void vt_set_alarm(systime_t now, sysinterval_t delay) {
 8003480:	b500      	push	{lr}
 8003482:	b087      	sub	sp, #28
 8003484:	9001      	str	r0, [sp, #4]
 8003486:	9100      	str	r1, [sp, #0]
  sysinterval_t currdelta;

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003488:	2302      	movs	r3, #2
 800348a:	9305      	str	r3, [sp, #20]

  if (delay < currdelta) {
 800348c:	9a00      	ldr	r2, [sp, #0]
 800348e:	9b05      	ldr	r3, [sp, #20]
 8003490:	429a      	cmp	r2, r3
 8003492:	d201      	bcs.n	8003498 <vt_set_alarm+0x18>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
 8003494:	9b05      	ldr	r3, [sp, #20]
 8003496:	9300      	str	r3, [sp, #0]
  while (true) {
    sysinterval_t nowdelta;
    systime_t newnow;

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, delay));
 8003498:	9900      	ldr	r1, [sp, #0]
 800349a:	9801      	ldr	r0, [sp, #4]
 800349c:	f7ff fec0 	bl	8003220 <chTimeAddX.lto_priv.1>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff ffac 	bl	8003400 <port_timer_set_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
 80034a8:	f7ff ffe2 	bl	8003470 <chVTGetSystemTimeX.lto_priv.2>
 80034ac:	9004      	str	r0, [sp, #16]
    nowdelta = chTimeDiffX(now, newnow);
 80034ae:	9904      	ldr	r1, [sp, #16]
 80034b0:	9801      	ldr	r0, [sp, #4]
 80034b2:	f7ff fec5 	bl	8003240 <chTimeDiffX.lto_priv.0>
 80034b6:	9003      	str	r0, [sp, #12]
    if (likely(nowdelta < delay)) {
 80034b8:	9a03      	ldr	r2, [sp, #12]
 80034ba:	9b00      	ldr	r3, [sp, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	bf34      	ite	cc
 80034c0:	2301      	movcc	r3, #1
 80034c2:	2300      	movcs	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d107      	bne.n	80034da <vt_set_alarm+0x5a>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 80034ca:	9b05      	ldr	r3, [sp, #20]
 80034cc:	3301      	adds	r3, #1
 80034ce:	9305      	str	r3, [sp, #20]

    /* Current time becomes the new "base" time.*/
    now = newnow;
 80034d0:	9b04      	ldr	r3, [sp, #16]
 80034d2:	9301      	str	r3, [sp, #4]
    delay = currdelta;
 80034d4:	9b05      	ldr	r3, [sp, #20]
 80034d6:	9300      	str	r3, [sp, #0]
  while (true) {
 80034d8:	e7de      	b.n	8003498 <vt_set_alarm+0x18>
      break;
 80034da:	bf00      	nop
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 80034dc:	9b05      	ldr	r3, [sp, #20]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d902      	bls.n	80034e8 <vt_set_alarm+0x68>
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 80034e2:	2001      	movs	r0, #1
 80034e4:	f7ff fd34 	bl	8002f50 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 80034e8:	bf00      	nop
 80034ea:	b007      	add	sp, #28
 80034ec:	f85d fb04 	ldr.w	pc, [sp], #4

080034f0 <vt_insert_first>:
 * @note    This is the special case when the delta list is initially empty.
 */
static void vt_insert_first(virtual_timers_list_t *vtlp,
                            virtual_timer_t *vtp,
                            systime_t now,
                            sysinterval_t delay) {
 80034f0:	b500      	push	{lr}
 80034f2:	b087      	sub	sp, #28
 80034f4:	9003      	str	r0, [sp, #12]
 80034f6:	9102      	str	r1, [sp, #8]
 80034f8:	9201      	str	r2, [sp, #4]
 80034fa:	9300      	str	r3, [sp, #0]
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 80034fc:	9b03      	ldr	r3, [sp, #12]
 80034fe:	9a01      	ldr	r2, [sp, #4]
 8003500:	60da      	str	r2, [r3, #12]
  ch_dlist_insert_after(&vtlp->dlist, &vtp->dlist, delay);
 8003502:	9b03      	ldr	r3, [sp, #12]
 8003504:	9902      	ldr	r1, [sp, #8]
 8003506:	9a00      	ldr	r2, [sp, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fec9 	bl	80032a0 <ch_dlist_insert_after>

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800350e:	2302      	movs	r3, #2
 8003510:	9305      	str	r3, [sp, #20]

  /* If the requested delay is lower than the minimum safe delta then it
     is raised to the minimum safe value.*/
  if (delay < currdelta) {
 8003512:	9a00      	ldr	r2, [sp, #0]
 8003514:	9b05      	ldr	r3, [sp, #20]
 8003516:	429a      	cmp	r2, r3
 8003518:	d201      	bcs.n	800351e <vt_insert_first+0x2e>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
 800351a:	9b05      	ldr	r3, [sp, #20]
 800351c:	9300      	str	r3, [sp, #0]
  }
#endif

  /* Being the first element inserted in the list the alarm timer
     is started.*/
  port_timer_start_alarm(chTimeAddX(vtlp->lasttime, delay));
 800351e:	9b03      	ldr	r3, [sp, #12]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	9900      	ldr	r1, [sp, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fe7b 	bl	8003220 <chTimeAddX.lto_priv.1>
 800352a:	4603      	mov	r3, r0
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff4f 	bl	80033d0 <port_timer_start_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
 8003532:	f7ff ff9d 	bl	8003470 <chVTGetSystemTimeX.lto_priv.2>
 8003536:	9004      	str	r0, [sp, #16]
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8003538:	9904      	ldr	r1, [sp, #16]
 800353a:	9801      	ldr	r0, [sp, #4]
 800353c:	f7ff fe80 	bl	8003240 <chTimeDiffX.lto_priv.0>
 8003540:	4602      	mov	r2, r0
 8003542:	9b00      	ldr	r3, [sp, #0]
 8003544:	4293      	cmp	r3, r2
 8003546:	bf8c      	ite	hi
 8003548:	2301      	movhi	r3, #1
 800354a:	2300      	movls	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <vt_insert_first+0x82>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 8003552:	9b05      	ldr	r3, [sp, #20]
 8003554:	3301      	adds	r3, #1
 8003556:	9305      	str	r3, [sp, #20]

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, currdelta));
 8003558:	9905      	ldr	r1, [sp, #20]
 800355a:	9801      	ldr	r0, [sp, #4]
 800355c:	f7ff fe60 	bl	8003220 <chTimeAddX.lto_priv.1>
 8003560:	4603      	mov	r3, r0
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ff4c 	bl	8003400 <port_timer_set_alarm>

    /* Current time becomes the new "base" time.*/
    now = newnow;
 8003568:	9b04      	ldr	r3, [sp, #16]
 800356a:	9301      	str	r3, [sp, #4]
    delay = currdelta;
 800356c:	9b05      	ldr	r3, [sp, #20]
 800356e:	9300      	str	r3, [sp, #0]
  while (true) {
 8003570:	e7df      	b.n	8003532 <vt_insert_first+0x42>
      break;
 8003572:	bf00      	nop
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 8003574:	9b05      	ldr	r3, [sp, #20]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d902      	bls.n	8003580 <vt_insert_first+0x90>
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 800357a:	2001      	movs	r0, #1
 800357c:	f7ff fce8 	bl	8002f50 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 8003580:	bf00      	nop
 8003582:	b007      	add	sp, #28
 8003584:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003590 <vt_enqueue>:
/**
 * @brief   Enqueues a virtual timer in a virtual timers list.
 */
static void vt_enqueue(virtual_timers_list_t *vtlp,
                       virtual_timer_t *vtp,
                       sysinterval_t delay) {
 8003590:	b500      	push	{lr}
 8003592:	b089      	sub	sp, #36	@ 0x24
 8003594:	9003      	str	r0, [sp, #12]
 8003596:	9102      	str	r1, [sp, #8]
 8003598:	9201      	str	r2, [sp, #4]
  sysinterval_t delta;

#if CH_CFG_ST_TIMEDELTA > 0
  {
    sysinterval_t nowdelta;
    systime_t now = chVTGetSystemTimeX();
 800359a:	f7ff ff69 	bl	8003470 <chVTGetSystemTimeX.lto_priv.2>
 800359e:	9006      	str	r0, [sp, #24]

    /* Special case where the timers list is empty.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80035a0:	9b03      	ldr	r3, [sp, #12]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fe5c 	bl	8003260 <ch_dlist_isempty>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d006      	beq.n	80035bc <vt_enqueue+0x2c>

      vt_insert_first(vtlp, vtp, now, delay);
 80035ae:	9b01      	ldr	r3, [sp, #4]
 80035b0:	9a06      	ldr	r2, [sp, #24]
 80035b2:	9902      	ldr	r1, [sp, #8]
 80035b4:	9803      	ldr	r0, [sp, #12]
 80035b6:	f7ff ff9b 	bl	80034f0 <vt_insert_first>

      return;
 80035ba:	e020      	b.n	80035fe <vt_enqueue+0x6e>
    }

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'deltanow'.*/
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80035bc:	9b03      	ldr	r3, [sp, #12]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	9906      	ldr	r1, [sp, #24]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fe3c 	bl	8003240 <chTimeDiffX.lto_priv.0>
 80035c8:	9005      	str	r0, [sp, #20]
    delta    = nowdelta + delay;
 80035ca:	9a05      	ldr	r2, [sp, #20]
 80035cc:	9b01      	ldr	r3, [sp, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	9307      	str	r3, [sp, #28]

    /* Scenario where a very large delay exceeded the numeric range, the
       delta is shortened to make it fit the numeric range, the timer
       will be triggered "deltanow" cycles earlier.*/
    if (delta < nowdelta) {
 80035d2:	9a07      	ldr	r2, [sp, #28]
 80035d4:	9b05      	ldr	r3, [sp, #20]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d201      	bcs.n	80035de <vt_enqueue+0x4e>
      delta = delay;
 80035da:	9b01      	ldr	r3, [sp, #4]
 80035dc:	9307      	str	r3, [sp, #28]
    }

    /* Checking if this timer would become the first in the delta list, this
       requires changing the current alarm setting.*/
    if (delta < vtlp->dlist.next->delta) {
 80035de:	9b03      	ldr	r3, [sp, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	9a07      	ldr	r2, [sp, #28]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d203      	bcs.n	80035f2 <vt_enqueue+0x62>

      vt_set_alarm(now, delay);
 80035ea:	9901      	ldr	r1, [sp, #4]
 80035ec:	9806      	ldr	r0, [sp, #24]
 80035ee:	f7ff ff47 	bl	8003480 <vt_set_alarm>

  /* Delta is initially equal to the specified delay.*/
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 80035f2:	9b03      	ldr	r3, [sp, #12]
 80035f4:	9902      	ldr	r1, [sp, #8]
 80035f6:	9a07      	ldr	r2, [sp, #28]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff fe91 	bl	8003320 <ch_dlist_insert>
}
 80035fe:	b009      	add	sp, #36	@ 0x24
 8003600:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003610 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8003610:	b500      	push	{lr}
 8003612:	b087      	sub	sp, #28
 8003614:	9003      	str	r0, [sp, #12]
 8003616:	9102      	str	r1, [sp, #8]
 8003618:	9201      	str	r2, [sp, #4]
 800361a:	9300      	str	r3, [sp, #0]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 800361c:	4b09      	ldr	r3, [pc, #36]	@ (8003644 <chVTDoSetI+0x34>)
 800361e:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  /* Timer initialization.*/
  vtp->par     = par;
 8003620:	9b03      	ldr	r3, [sp, #12]
 8003622:	9a00      	ldr	r2, [sp, #0]
 8003624:	611a      	str	r2, [r3, #16]
  vtp->func    = vtfunc;
 8003626:	9b03      	ldr	r3, [sp, #12]
 8003628:	9a01      	ldr	r2, [sp, #4]
 800362a:	60da      	str	r2, [r3, #12]
  vtp->reload  = (sysinterval_t)0;
 800362c:	9b03      	ldr	r3, [sp, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	615a      	str	r2, [r3, #20]

  /* Inserting the timer in the delta list.*/
  vt_enqueue(vtlp, vtp, delay);
 8003632:	9a02      	ldr	r2, [sp, #8]
 8003634:	9903      	ldr	r1, [sp, #12]
 8003636:	9805      	ldr	r0, [sp, #20]
 8003638:	f7ff ffaa 	bl	8003590 <vt_enqueue>
}
 800363c:	bf00      	nop
 800363e:	b007      	add	sp, #28
 8003640:	f85d fb04 	ldr.w	pc, [sp], #4
 8003644:	24000110 	.word	0x24000110
	...

08003650 <chVTDoResetI>:
 *
 * @param[in] vtp       pointer to a @p virtual_timer_t structure
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8003650:	b500      	push	{lr}
 8003652:	b087      	sub	sp, #28
 8003654:	9001      	str	r0, [sp, #4]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 8003656:	4b2e      	ldr	r3, [pc, #184]	@ (8003710 <chVTDoResetI+0xc0>)
 8003658:	9305      	str	r3, [sp, #20]
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 800365a:	9b05      	ldr	r3, [sp, #20]
 800365c:	9a01      	ldr	r2, [sp, #4]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fe0d 	bl	8003280 <ch_dlist_isfirst>
 8003666:	4603      	mov	r3, r0
 8003668:	f083 0301 	eor.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d014      	beq.n	800369c <chVTDoResetI+0x4c>

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
 8003672:	9b01      	ldr	r3, [sp, #4]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fe9b 	bl	80033b0 <ch_dlist_dequeue>

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 800367a:	9b01      	ldr	r3, [sp, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
 8003680:	9b01      	ldr	r3, [sp, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	9b01      	ldr	r3, [sp, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	440a      	add	r2, r1
 800368a:	609a      	str	r2, [r3, #8]

    /* Marking timer as not armed.*/
    vtp->dlist.next = NULL;
 800368c:	9b01      	ldr	r3, [sp, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 8003692:	9b05      	ldr	r3, [sp, #20]
 8003694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003698:	609a      	str	r2, [r3, #8]

    return;
 800369a:	e035      	b.n	8003708 <chVTDoResetI+0xb8>
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
 800369c:	9b05      	ldr	r3, [sp, #20]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fe6e 	bl	8003380 <ch_dlist_remove_first>
  vtp->dlist.next = NULL;
 80036a4:	9b01      	ldr	r3, [sp, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80036aa:	9b05      	ldr	r3, [sp, #20]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fdd7 	bl	8003260 <ch_dlist_isempty>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <chVTDoResetI+0x6e>

    port_timer_stop_alarm();
 80036b8:	f7ff fe9a 	bl	80033f0 <port_timer_stop_alarm>

    return;
 80036bc:	e024      	b.n	8003708 <chVTDoResetI+0xb8>
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 80036be:	9b05      	ldr	r3, [sp, #20]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6899      	ldr	r1, [r3, #8]
 80036c4:	9b01      	ldr	r3, [sp, #4]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	9b05      	ldr	r3, [sp, #20]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	440a      	add	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]

  /* Distance in ticks between the last alarm event and current time.*/
  now = chVTGetSystemTimeX();
 80036d0:	f7ff fece 	bl	8003470 <chVTGetSystemTimeX.lto_priv.2>
 80036d4:	9004      	str	r0, [sp, #16]
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80036d6:	9b05      	ldr	r3, [sp, #20]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	9904      	ldr	r1, [sp, #16]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fdaf 	bl	8003240 <chTimeDiffX.lto_priv.0>
 80036e2:	9003      	str	r0, [sp, #12]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 80036e4:	9b05      	ldr	r3, [sp, #20]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	9a03      	ldr	r2, [sp, #12]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d20a      	bcs.n	8003706 <chVTDoResetI+0xb6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
 80036f0:	9b05      	ldr	r3, [sp, #20]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	9b03      	ldr	r3, [sp, #12]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	9302      	str	r3, [sp, #8]

  /* Setting up the alarm.*/
  vt_set_alarm(now, delta);
 80036fc:	9902      	ldr	r1, [sp, #8]
 80036fe:	9804      	ldr	r0, [sp, #16]
 8003700:	f7ff febe 	bl	8003480 <vt_set_alarm>
 8003704:	e000      	b.n	8003708 <chVTDoResetI+0xb8>
    return;
 8003706:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8003708:	b007      	add	sp, #28
 800370a:	f85d fb04 	ldr.w	pc, [sp], #4
 800370e:	bf00      	nop
 8003710:	24000110 	.word	0x24000110
	...

08003720 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
 8003720:	b500      	push	{lr}
 8003722:	b089      	sub	sp, #36	@ 0x24
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 8003724:	4b4c      	ldr	r3, [pc, #304]	@ (8003858 <chVTDoTickI+0x138>)
 8003726:	9305      	str	r3, [sp, #20]
     than the interval between "now" and "lasttime".*/
  while (true) {
    systime_t lasttime;

    /* First timer in the delta list.*/
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8003728:	9b05      	ldr	r3, [sp, #20]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	9304      	str	r3, [sp, #16]

    /* Delta between current time and last execution time.*/
    now = chVTGetSystemTimeX();
 800372e:	f7ff fe9f 	bl	8003470 <chVTGetSystemTimeX.lto_priv.2>
 8003732:	9003      	str	r0, [sp, #12]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8003734:	9b05      	ldr	r3, [sp, #20]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	9903      	ldr	r1, [sp, #12]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fd80 	bl	8003240 <chTimeDiffX.lto_priv.0>
 8003740:	9002      	str	r0, [sp, #8]

    /* Loop break condition.
       Note that the list scan is limited by the delta list header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
       deltas*/
    if (nowdelta < vtp->dlist.delta) {
 8003742:	9b04      	ldr	r3, [sp, #16]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	9a02      	ldr	r2, [sp, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	d366      	bcc.n	800381a <chVTDoTickI+0xfa>
      break;
    }

    /* Last time deadline is updated to the next timer's time.*/
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
 800374c:	9b05      	ldr	r3, [sp, #20]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	9b04      	ldr	r3, [sp, #16]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f7ff fd62 	bl	8003220 <chTimeAddX.lto_priv.1>
 800375c:	9001      	str	r0, [sp, #4]
    vtlp->lasttime = lasttime;
 800375e:	9b05      	ldr	r3, [sp, #20]
 8003760:	9a01      	ldr	r2, [sp, #4]
 8003762:	60da      	str	r2, [r3, #12]

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
 8003764:	9b04      	ldr	r3, [sp, #16]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fe22 	bl	80033b0 <ch_dlist_dequeue>
    vtp->dlist.next = NULL;
 800376c:	9b04      	ldr	r3, [sp, #16]
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8003772:	9b05      	ldr	r3, [sp, #20]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fd73 	bl	8003260 <ch_dlist_isempty>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <chVTDoTickI+0x64>
      port_timer_stop_alarm();
 8003780:	f7ff fe36 	bl	80033f0 <port_timer_stop_alarm>
    }

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
 8003784:	f7ff fe64 	bl	8003450 <chSysUnlockFromISR.lto_priv.4>

    vtp->func(vtp, vtp->par);
 8003788:	9b04      	ldr	r3, [sp, #16]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	9a04      	ldr	r2, [sp, #16]
 800378e:	6912      	ldr	r2, [r2, #16]
 8003790:	4611      	mov	r1, r2
 8003792:	9804      	ldr	r0, [sp, #16]
 8003794:	4798      	blx	r3

    chSysLockFromISR();
 8003796:	f7ff fe4b 	bl	8003430 <chSysLockFromISR.lto_priv.4>

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 800379a:	9b04      	ldr	r3, [sp, #16]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf14      	ite	ne
 80037a2:	2301      	movne	r3, #1
 80037a4:	2300      	moveq	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0bd      	beq.n	8003728 <chVTDoTickI+0x8>
      sysinterval_t delta, delay;

      /* Refreshing the now delta after spending time in the callback for
         a more accurate detection of too fast reloads.*/
      now = chVTGetSystemTimeX();
 80037ac:	f7ff fe60 	bl	8003470 <chVTGetSystemTimeX.lto_priv.2>
 80037b0:	9003      	str	r0, [sp, #12]
      nowdelta = chTimeDiffX(lasttime, now);
 80037b2:	9903      	ldr	r1, [sp, #12]
 80037b4:	9801      	ldr	r0, [sp, #4]
 80037b6:	f7ff fd43 	bl	8003240 <chTimeDiffX.lto_priv.0>
 80037ba:	9002      	str	r0, [sp, #8]

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 80037bc:	9b04      	ldr	r3, [sp, #16]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	9a02      	ldr	r2, [sp, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d905      	bls.n	80037d2 <chVTDoTickI+0xb2>
        /* System time is already past the deadline, logging the fault and
           proceeding with a minimum delay.*/

        chDbgAssert(false, "skipped deadline");
        chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);
 80037c6:	2002      	movs	r0, #2
 80037c8:	f7ff fbc2 	bl	8002f50 <chRFCUCollectFaultsI>

        delay = (sysinterval_t)0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	9306      	str	r3, [sp, #24]
 80037d0:	e004      	b.n	80037dc <chVTDoTickI+0xbc>
      }
      else {
        /* Enqueuing the timer again using the calculated delta.*/
        delay = vtp->reload - nowdelta;
 80037d2:	9b04      	ldr	r3, [sp, #16]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	9b02      	ldr	r3, [sp, #8]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	9306      	str	r3, [sp, #24]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 80037dc:	9b05      	ldr	r3, [sp, #20]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fd3e 	bl	8003260 <ch_dlist_isempty>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <chVTDoTickI+0xd8>

        vt_insert_first(vtlp, vtp, now, delay);
 80037ea:	9b06      	ldr	r3, [sp, #24]
 80037ec:	9a03      	ldr	r2, [sp, #12]
 80037ee:	9904      	ldr	r1, [sp, #16]
 80037f0:	9805      	ldr	r0, [sp, #20]
 80037f2:	f7ff fe7d 	bl	80034f0 <vt_insert_first>

        return;
 80037f6:	e02c      	b.n	8003852 <chVTDoTickI+0x132>

      /* Delay as delta from 'lasttime'. Note, it can overflow and the value
         becomes lower than 'nowdelta'. In that case the delta is shortened
         to make it fit the numeric range and the timer will be triggered
         "nowdelta" cycles earlier.*/
      delta = nowdelta + delay;
 80037f8:	9a02      	ldr	r2, [sp, #8]
 80037fa:	9b06      	ldr	r3, [sp, #24]
 80037fc:	4413      	add	r3, r2
 80037fe:	9307      	str	r3, [sp, #28]
      if (delta < nowdelta) {
 8003800:	9a07      	ldr	r2, [sp, #28]
 8003802:	9b02      	ldr	r3, [sp, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	d201      	bcs.n	800380c <chVTDoTickI+0xec>
        delta = delay;
 8003808:	9b06      	ldr	r3, [sp, #24]
 800380a:	9307      	str	r3, [sp, #28]
      }

      /* Insert into delta list. */
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 800380c:	9b05      	ldr	r3, [sp, #20]
 800380e:	9904      	ldr	r1, [sp, #16]
 8003810:	9a07      	ldr	r2, [sp, #28]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff fd84 	bl	8003320 <ch_dlist_insert>
  while (true) {
 8003818:	e786      	b.n	8003728 <chVTDoTickI+0x8>
      break;
 800381a:	bf00      	nop
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 800381c:	9b05      	ldr	r3, [sp, #20]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fd1e 	bl	8003260 <ch_dlist_isempty>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d112      	bne.n	8003850 <chVTDoTickI+0x130>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
 800382a:	9b05      	ldr	r3, [sp, #20]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	9b02      	ldr	r3, [sp, #8]
 8003830:	441a      	add	r2, r3
 8003832:	9b05      	ldr	r3, [sp, #20]
 8003834:	60da      	str	r2, [r3, #12]
  vtp->dlist.delta -= nowdelta;
 8003836:	9b04      	ldr	r3, [sp, #16]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	9b02      	ldr	r3, [sp, #8]
 800383c:	1ad2      	subs	r2, r2, r3
 800383e:	9b04      	ldr	r3, [sp, #16]
 8003840:	609a      	str	r2, [r3, #8]

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
 8003842:	9b04      	ldr	r3, [sp, #16]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	4619      	mov	r1, r3
 8003848:	9803      	ldr	r0, [sp, #12]
 800384a:	f7ff fe19 	bl	8003480 <vt_set_alarm>
 800384e:	e000      	b.n	8003852 <chVTDoTickI+0x132>
    return;
 8003850:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8003852:	b009      	add	sp, #36	@ 0x24
 8003854:	f85d fb04 	ldr.w	pc, [sp], #4
 8003858:	24000110 	.word	0x24000110
 800385c:	00000000 	.word	0x00000000

08003860 <ch_queue_dequeue.lto_priv.0>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8003860:	b082      	sub	sp, #8
 8003862:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8003864:	9b01      	ldr	r3, [sp, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	9a01      	ldr	r2, [sp, #4]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 800386e:	9b01      	ldr	r3, [sp, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	9a01      	ldr	r2, [sp, #4]
 8003874:	6852      	ldr	r2, [r2, #4]
 8003876:	605a      	str	r2, [r3, #4]
  return p;
 8003878:	9b01      	ldr	r3, [sp, #4]
}
 800387a:	4618      	mov	r0, r3
 800387c:	b002      	add	sp, #8
 800387e:	4770      	bx	lr

08003880 <ch_pqueue_remove_highest>:
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 8003880:	b084      	sub	sp, #16
 8003882:	9001      	str	r0, [sp, #4]
  ch_priority_queue_t *p = pqp->next;
 8003884:	9b01      	ldr	r3, [sp, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	9303      	str	r3, [sp, #12]
  pqp->next       = p->next;
 800388a:	9b03      	ldr	r3, [sp, #12]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	9b01      	ldr	r3, [sp, #4]
 8003890:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 8003892:	9b01      	ldr	r3, [sp, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	9a01      	ldr	r2, [sp, #4]
 8003898:	605a      	str	r2, [r3, #4]
  return p;
 800389a:	9b03      	ldr	r3, [sp, #12]
}
 800389c:	4618      	mov	r0, r3
 800389e:	b004      	add	sp, #16
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
	...

080038b0 <ch_pqueue_insert_behind>:
                                                           ch_priority_queue_t *p) {
 80038b0:	b082      	sub	sp, #8
 80038b2:	9001      	str	r0, [sp, #4]
 80038b4:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 80038b6:	9b01      	ldr	r3, [sp, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80038bc:	9b01      	ldr	r3, [sp, #4]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	9b00      	ldr	r3, [sp, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	bf2c      	ite	cs
 80038c8:	2301      	movcs	r3, #1
 80038ca:	2300      	movcc	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f1      	bne.n	80038b6 <ch_pqueue_insert_behind+0x6>
  p->next       = pqp;
 80038d2:	9b00      	ldr	r3, [sp, #0]
 80038d4:	9a01      	ldr	r2, [sp, #4]
 80038d6:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 80038d8:	9b01      	ldr	r3, [sp, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	9b00      	ldr	r3, [sp, #0]
 80038de:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 80038e0:	9b00      	ldr	r3, [sp, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	9a00      	ldr	r2, [sp, #0]
 80038e6:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 80038e8:	9b01      	ldr	r3, [sp, #4]
 80038ea:	9a00      	ldr	r2, [sp, #0]
 80038ec:	605a      	str	r2, [r3, #4]
  return p;
 80038ee:	9b00      	ldr	r3, [sp, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	b002      	add	sp, #8
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
	...

08003900 <ch_pqueue_insert_ahead>:
                                                          ch_priority_queue_t *p) {
 8003900:	b082      	sub	sp, #8
 8003902:	9001      	str	r0, [sp, #4]
 8003904:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 8003906:	9b01      	ldr	r3, [sp, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio > p->prio));
 800390c:	9b01      	ldr	r3, [sp, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	9b00      	ldr	r3, [sp, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	429a      	cmp	r2, r3
 8003916:	bf8c      	ite	hi
 8003918:	2301      	movhi	r3, #1
 800391a:	2300      	movls	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f1      	bne.n	8003906 <ch_pqueue_insert_ahead+0x6>
  p->next       = pqp;
 8003922:	9b00      	ldr	r3, [sp, #0]
 8003924:	9a01      	ldr	r2, [sp, #4]
 8003926:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8003928:	9b01      	ldr	r3, [sp, #4]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	9b00      	ldr	r3, [sp, #0]
 800392e:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8003930:	9b00      	ldr	r3, [sp, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	9a00      	ldr	r2, [sp, #0]
 8003936:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8003938:	9b01      	ldr	r3, [sp, #4]
 800393a:	9a00      	ldr	r2, [sp, #0]
 800393c:	605a      	str	r2, [r3, #4]
  return p;
 800393e:	9b00      	ldr	r3, [sp, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	b002      	add	sp, #8
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
	...

08003950 <chSysLockFromISR.lto_priv.5>:
static inline void chSysLockFromISR(void) {
 8003950:	b082      	sub	sp, #8
 8003952:	2330      	movs	r3, #48	@ 0x30
 8003954:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003956:	9b01      	ldr	r3, [sp, #4]
 8003958:	f383 8811 	msr	BASEPRI, r3
}
 800395c:	bf00      	nop
}
 800395e:	bf00      	nop
}
 8003960:	bf00      	nop
}
 8003962:	bf00      	nop
 8003964:	b002      	add	sp, #8
 8003966:	4770      	bx	lr
	...

08003970 <chSysUnlockFromISR.lto_priv.5>:
static inline void chSysUnlockFromISR(void) {
 8003970:	b082      	sub	sp, #8
 8003972:	2300      	movs	r3, #0
 8003974:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003976:	9b01      	ldr	r3, [sp, #4]
 8003978:	f383 8811 	msr	BASEPRI, r3
}
 800397c:	bf00      	nop
}
 800397e:	bf00      	nop
}
 8003980:	bf00      	nop
}
 8003982:	bf00      	nop
 8003984:	b002      	add	sp, #8
 8003986:	4770      	bx	lr
	...

08003990 <chVTIsArmedI>:
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 8003990:	b082      	sub	sp, #8
 8003992:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 8003994:	9b01      	ldr	r3, [sp, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	b002      	add	sp, #8
 80039a6:	4770      	bx	lr
	...

080039b0 <chSemFastSignalI.lto_priv.0>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 80039b0:	b082      	sub	sp, #8
 80039b2:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  sp->cnt++;
 80039b4:	9b01      	ldr	r3, [sp, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	9b01      	ldr	r3, [sp, #4]
 80039bc:	609a      	str	r2, [r3, #8]
}
 80039be:	bf00      	nop
 80039c0:	b002      	add	sp, #8
 80039c2:	4770      	bx	lr
	...

080039d0 <__sch_ready_behind>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_behind(thread_t *tp) {
 80039d0:	b500      	push	{lr}
 80039d2:	b083      	sub	sp, #12
 80039d4:	9001      	str	r0, [sp, #4]
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);
 80039d6:	9b01      	ldr	r3, [sp, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039da:	4619      	mov	r1, r3
 80039dc:	9801      	ldr	r0, [sp, #4]
 80039de:	f7ff fb2f 	bl	8003040 <__trace_ready>

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 80039e2:	9b01      	ldr	r3, [sp, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80039ea:	9b01      	ldr	r3, [sp, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	461a      	mov	r2, r3
 80039f0:	9b01      	ldr	r3, [sp, #4]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f7ff ff5b 	bl	80038b0 <ch_pqueue_insert_behind>
 80039fa:	4603      	mov	r3, r0
                                           &tp->hdr.pqueue));
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	b003      	add	sp, #12
 8003a00:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003a10 <__sch_ready_ahead>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_ahead(thread_t *tp) {
 8003a10:	b500      	push	{lr}
 8003a12:	b083      	sub	sp, #12
 8003a14:	9001      	str	r0, [sp, #4]
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);
 8003a16:	9b01      	ldr	r3, [sp, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	9801      	ldr	r0, [sp, #4]
 8003a1e:	f7ff fb0f 	bl	8003040 <__trace_ready>

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8003a22:	9b01      	ldr	r3, [sp, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8003a2a:	9b01      	ldr	r3, [sp, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	9b01      	ldr	r3, [sp, #4]
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f7ff ff63 	bl	8003900 <ch_pqueue_insert_ahead>
 8003a3a:	4603      	mov	r3, r0
                                          &tp->hdr.pqueue));
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	b003      	add	sp, #12
 8003a40:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003a50 <__sch_wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8003a50:	b500      	push	{lr}
 8003a52:	b085      	sub	sp, #20
 8003a54:	9001      	str	r0, [sp, #4]
 8003a56:	9100      	str	r1, [sp, #0]
  thread_t *tp = threadref(p);
 8003a58:	9b00      	ldr	r3, [sp, #0]
 8003a5a:	9303      	str	r3, [sp, #12]

  (void)vtp;

  chSysLockFromISR();
 8003a5c:	f7ff ff78 	bl	8003950 <chSysLockFromISR.lto_priv.5>
  switch (tp->state) {
 8003a60:	9b03      	ldr	r3, [sp, #12]
 8003a62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a66:	2b0c      	cmp	r3, #12
 8003a68:	d82e      	bhi.n	8003ac8 <__sch_wakeup+0x78>
 8003a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a70 <__sch_wakeup+0x20>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003aa5 	.word	0x08003aa5
 8003a74:	08003ac9 	.word	0x08003ac9
 8003a78:	08003ac9 	.word	0x08003ac9
 8003a7c:	08003aab 	.word	0x08003aab
 8003a80:	08003abf 	.word	0x08003abf
 8003a84:	08003ab5 	.word	0x08003ab5
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003abf 	.word	0x08003abf
 8003a90:	08003ac9 	.word	0x08003ac9
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003ac9 	.word	0x08003ac9
 8003a9c:	08003ac9 	.word	0x08003ac9
 8003aa0:	08003abf 	.word	0x08003abf
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8003aa4:	f7ff ff64 	bl	8003970 <chSysUnlockFromISR.lto_priv.5>
    return;
 8003aa8:	e019      	b.n	8003ade <__sch_wakeup+0x8e>
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8003aaa:	9b03      	ldr	r3, [sp, #12]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
    break;
 8003ab2:	e00a      	b.n	8003aca <__sch_wakeup+0x7a>
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8003ab4:	9b03      	ldr	r3, [sp, #12]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff79 	bl	80039b0 <chSemFastSignalI.lto_priv.0>
#endif
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) ch_queue_dequeue(&tp->hdr.queue);
 8003abe:	9b03      	ldr	r3, [sp, #12]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fecd 	bl	8003860 <ch_queue_dequeue.lto_priv.0>
    break;
 8003ac6:	e000      	b.n	8003aca <__sch_wakeup+0x7a>
  default:
    /* Any other state, nothing to do.*/
    break;
 8003ac8:	bf00      	nop
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8003aca:	9b03      	ldr	r3, [sp, #12]
 8003acc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ad0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
 8003ad2:	9803      	ldr	r0, [sp, #12]
 8003ad4:	f7ff ff7c 	bl	80039d0 <__sch_ready_behind>
  chSysUnlockFromISR();
 8003ad8:	f7ff ff4a 	bl	8003970 <chSysUnlockFromISR.lto_priv.5>

  return;
 8003adc:	bf00      	nop
}
 8003ade:	b005      	add	sp, #20
 8003ae0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003af0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8003af0:	b500      	push	{lr}
 8003af2:	b083      	sub	sp, #12
 8003af4:	9001      	str	r0, [sp, #4]
       the other core.*/
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
 8003af6:	9801      	ldr	r0, [sp, #4]
 8003af8:	f7ff ff6a 	bl	80039d0 <__sch_ready_behind>
 8003afc:	4603      	mov	r3, r0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	b003      	add	sp, #12
 8003b02:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b06:	bf00      	nop
	...

08003b10 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8003b10:	b500      	push	{lr}
 8003b12:	b087      	sub	sp, #28
 8003b14:	4603      	mov	r3, r0
 8003b16:	f88d 3007 	strb.w	r3, [sp, #7]
  os_instance_t *oip = currcore;
 8003b1a:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <chSchGoSleepS+0x50>)
 8003b1c:	9304      	str	r3, [sp, #16]
  thread_t *otp = __instance_get_currthread(oip);
 8003b1e:	9b04      	ldr	r3, [sp, #16]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	9303      	str	r3, [sp, #12]

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8003b24:	9b03      	ldr	r3, [sp, #12]
 8003b26:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8003b2e:	9b04      	ldr	r3, [sp, #16]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fea5 	bl	8003880 <ch_pqueue_remove_highest>
 8003b36:	9005      	str	r0, [sp, #20]
  ntp->state = CH_STATE_CURRENT;
 8003b38:	9b05      	ldr	r3, [sp, #20]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  __instance_set_currthread(oip, ntp);
 8003b40:	9b04      	ldr	r3, [sp, #16]
 8003b42:	9a05      	ldr	r2, [sp, #20]
 8003b44:	60da      	str	r2, [r3, #12]
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8003b46:	9903      	ldr	r1, [sp, #12]
 8003b48:	9805      	ldr	r0, [sp, #20]
 8003b4a:	f7ff fab1 	bl	80030b0 <__trace_switch>
 8003b4e:	9903      	ldr	r1, [sp, #12]
 8003b50:	9805      	ldr	r0, [sp, #20]
 8003b52:	f7fc fc35 	bl	80003c0 <__port_switch>
}
 8003b56:	bf00      	nop
 8003b58:	b007      	add	sp, #28
 8003b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b5e:	bf00      	nop
 8003b60:	24000100 	.word	0x24000100
	...

08003b70 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8003b70:	b500      	push	{lr}
 8003b72:	b08b      	sub	sp, #44	@ 0x2c
 8003b74:	4603      	mov	r3, r0
 8003b76:	9100      	str	r1, [sp, #0]
 8003b78:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *tp = __instance_get_currthread(currcore);
 8003b7c:	4b14      	ldr	r3, [pc, #80]	@ (8003bd0 <chSchGoSleepTimeoutS+0x60>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	9309      	str	r3, [sp, #36]	@ 0x24

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8003b82:	9b00      	ldr	r3, [sp, #0]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b88:	d016      	beq.n	8003bb8 <chSchGoSleepTimeoutS+0x48>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8003b8a:	a803      	add	r0, sp, #12
 8003b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b8e:	4a11      	ldr	r2, [pc, #68]	@ (8003bd4 <chSchGoSleepTimeoutS+0x64>)
 8003b90:	9900      	ldr	r1, [sp, #0]
 8003b92:	f7ff fd3d 	bl	8003610 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8003b96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff ffb8 	bl	8003b10 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8003ba0:	ab03      	add	r3, sp, #12
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fef4 	bl	8003990 <chVTIsArmedI>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <chSchGoSleepTimeoutS+0x52>
      chVTDoResetI(&vt);
 8003bae:	ab03      	add	r3, sp, #12
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fd4d 	bl	8003650 <chVTDoResetI>
 8003bb6:	e004      	b.n	8003bc2 <chSchGoSleepTimeoutS+0x52>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8003bb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ffa7 	bl	8003b10 <chSchGoSleepS>
  }

  return tp->u.rdymsg;
 8003bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	b00b      	add	sp, #44	@ 0x2c
 8003bca:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bce:	bf00      	nop
 8003bd0:	24000100 	.word	0x24000100
 8003bd4:	08003a51 	.word	0x08003a51
	...

08003be0 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003be0:	b500      	push	{lr}
 8003be2:	b085      	sub	sp, #20
 8003be4:	9001      	str	r0, [sp, #4]
 8003be6:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
 8003be8:	4b16      	ldr	r3, [pc, #88]	@ (8003c44 <chSchWakeupS+0x64>)
 8003bea:	9302      	str	r3, [sp, #8]
  thread_t *otp = __instance_get_currthread(oip);
 8003bec:	9b02      	ldr	r3, [sp, #8]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	9303      	str	r3, [sp, #12]
              (oip->rlist.current->hdr.pqueue.prio >= oip->rlist.pqueue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8003bf2:	9b01      	ldr	r3, [sp, #4]
 8003bf4:	9a00      	ldr	r2, [sp, #0]
 8003bf6:	629a      	str	r2, [r3, #40]	@ 0x28
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.
     Note, we are favoring the path where the woken thread has higher
     priority.*/
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8003bf8:	9b01      	ldr	r3, [sp, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	9b03      	ldr	r3, [sp, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	bf94      	ite	ls
 8003c04:	2301      	movls	r3, #1
 8003c06:	2300      	movhi	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <chSchWakeupS+0x36>
    (void) __sch_ready_behind(ntp);
 8003c0e:	9801      	ldr	r0, [sp, #4]
 8003c10:	f7ff fede 	bl	80039d0 <__sch_ready_behind>
    __instance_set_currthread(oip, ntp);

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8003c14:	e012      	b.n	8003c3c <chSchWakeupS+0x5c>
    otp = __sch_ready_ahead(otp);
 8003c16:	9803      	ldr	r0, [sp, #12]
 8003c18:	f7ff fefa 	bl	8003a10 <__sch_ready_ahead>
 8003c1c:	9003      	str	r0, [sp, #12]
    ntp->state = CH_STATE_CURRENT;
 8003c1e:	9b01      	ldr	r3, [sp, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    __instance_set_currthread(oip, ntp);
 8003c26:	9b02      	ldr	r3, [sp, #8]
 8003c28:	9a01      	ldr	r2, [sp, #4]
 8003c2a:	60da      	str	r2, [r3, #12]
    chSysSwitch(ntp, otp);
 8003c2c:	9903      	ldr	r1, [sp, #12]
 8003c2e:	9801      	ldr	r0, [sp, #4]
 8003c30:	f7ff fa3e 	bl	80030b0 <__trace_switch>
 8003c34:	9903      	ldr	r1, [sp, #12]
 8003c36:	9801      	ldr	r0, [sp, #4]
 8003c38:	f7fc fbc2 	bl	80003c0 <__port_switch>
}
 8003c3c:	bf00      	nop
 8003c3e:	b005      	add	sp, #20
 8003c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c44:	24000100 	.word	0x24000100
	...

08003c50 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8003c50:	b084      	sub	sp, #16
  os_instance_t *oip = currcore;
 8003c52:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <chSchIsPreemptionRequired+0x30>)
 8003c54:	9303      	str	r3, [sp, #12]
  thread_t *tp = __instance_get_currthread(oip);
 8003c56:	9b03      	ldr	r3, [sp, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	9302      	str	r3, [sp, #8]

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003c5c:	9b03      	ldr	r3, [sp, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	9301      	str	r3, [sp, #4]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003c64:	9b02      	ldr	r3, [sp, #8]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8003c6a:	9a01      	ldr	r2, [sp, #4]
 8003c6c:	9b00      	ldr	r3, [sp, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	bf8c      	ite	hi
 8003c72:	2301      	movhi	r3, #1
 8003c74:	2300      	movls	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
#endif
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	b004      	add	sp, #16
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	24000100 	.word	0x24000100
	...

08003c90 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
 8003c90:	b500      	push	{lr}
 8003c92:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
 8003c94:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <chSchDoPreemption+0x48>)
 8003c96:	9303      	str	r3, [sp, #12]
  thread_t *otp = __instance_get_currthread(oip);
 8003c98:	9b03      	ldr	r3, [sp, #12]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	9302      	str	r3, [sp, #8]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8003c9e:	9b03      	ldr	r3, [sp, #12]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fded 	bl	8003880 <ch_pqueue_remove_highest>
 8003ca6:	9001      	str	r0, [sp, #4]
  ntp->state = CH_STATE_CURRENT;
 8003ca8:	9b01      	ldr	r3, [sp, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  __instance_set_currthread(oip, ntp);
 8003cb0:	9b03      	ldr	r3, [sp, #12]
 8003cb2:	9a01      	ldr	r2, [sp, #4]
 8003cb4:	60da      	str	r2, [r3, #12]
    otp = __sch_ready_ahead(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
 8003cb6:	9802      	ldr	r0, [sp, #8]
 8003cb8:	f7ff feaa 	bl	8003a10 <__sch_ready_ahead>
 8003cbc:	9002      	str	r0, [sp, #8]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8003cbe:	9902      	ldr	r1, [sp, #8]
 8003cc0:	9801      	ldr	r0, [sp, #4]
 8003cc2:	f7ff f9f5 	bl	80030b0 <__trace_switch>
 8003cc6:	9902      	ldr	r1, [sp, #8]
 8003cc8:	9801      	ldr	r0, [sp, #4]
 8003cca:	f7fc fb79 	bl	80003c0 <__port_switch>
}
 8003cce:	bf00      	nop
 8003cd0:	b005      	add	sp, #20
 8003cd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cd6:	bf00      	nop
 8003cd8:	24000100 	.word	0x24000100
 8003cdc:	00000000 	.word	0x00000000

08003ce0 <__rfcu_object_init>:
 *
 * @param[out] rfcup    pointer to the @p rfcu_t structure
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	9001      	str	r0, [sp, #4]

  rfcup->mask = (rfcu_mask_t)0;
 8003ce4:	9b01      	ldr	r3, [sp, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	b002      	add	sp, #8
 8003cee:	4770      	bx	lr

08003cf0 <__dbg_object_init>:
 *
 * @param[out] sdp      pointer to the @p system_debug_t structure
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	9001      	str	r0, [sp, #4]

  sdp->panic_msg = NULL;
 8003cf4:	9b01      	ldr	r3, [sp, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
  sdp->lock_cnt = (cnt_t)1;
#endif
}
 8003cfa:	bf00      	nop
 8003cfc:	b002      	add	sp, #8
 8003cfe:	4770      	bx	lr

08003d00 <ch_queue_init.lto_priv.3>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8003d00:	b082      	sub	sp, #8
 8003d02:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8003d04:	9b01      	ldr	r3, [sp, #4]
 8003d06:	9a01      	ldr	r2, [sp, #4]
 8003d08:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8003d0a:	9b01      	ldr	r3, [sp, #4]
 8003d0c:	9a01      	ldr	r2, [sp, #4]
 8003d0e:	605a      	str	r2, [r3, #4]
}
 8003d10:	bf00      	nop
 8003d12:	b002      	add	sp, #8
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
	...

08003d20 <ch_pqueue_init>:
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
 8003d20:	b082      	sub	sp, #8
 8003d22:	9001      	str	r0, [sp, #4]
  pqp->next = pqp;
 8003d24:	9b01      	ldr	r3, [sp, #4]
 8003d26:	9a01      	ldr	r2, [sp, #4]
 8003d28:	601a      	str	r2, [r3, #0]
  pqp->prev = pqp;
 8003d2a:	9b01      	ldr	r3, [sp, #4]
 8003d2c:	9a01      	ldr	r2, [sp, #4]
 8003d2e:	605a      	str	r2, [r3, #4]
  pqp->prio = (tprio_t)0;
 8003d30:	9b01      	ldr	r3, [sp, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	609a      	str	r2, [r3, #8]
}
 8003d36:	bf00      	nop
 8003d38:	b002      	add	sp, #8
 8003d3a:	4770      	bx	lr
 8003d3c:	0000      	movs	r0, r0
	...

08003d40 <ch_dlist_init>:
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
 8003d40:	b082      	sub	sp, #8
 8003d42:	9001      	str	r0, [sp, #4]
  dlhp->next  = dlhp;
 8003d44:	9b01      	ldr	r3, [sp, #4]
 8003d46:	9a01      	ldr	r2, [sp, #4]
 8003d48:	601a      	str	r2, [r3, #0]
  dlhp->prev  = dlhp;
 8003d4a:	9b01      	ldr	r3, [sp, #4]
 8003d4c:	9a01      	ldr	r2, [sp, #4]
 8003d4e:	605a      	str	r2, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
 8003d50:	9b01      	ldr	r3, [sp, #4]
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	b002      	add	sp, #8
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop

08003d60 <port_timer_get_time.lto_priv.3>:
static inline systime_t port_timer_get_time(void) {
 8003d60:	b508      	push	{r3, lr}
  return stGetCounter();
 8003d62:	f7fc fcbd 	bl	80006e0 <stGetCounter>
 8003d66:	4603      	mov	r3, r0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd08      	pop	{r3, pc}
 8003d6c:	0000      	movs	r0, r0
	...

08003d70 <chVTGetSystemTimeX.lto_priv.3>:
static inline systime_t chVTGetSystemTimeX(void) {
 8003d70:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8003d72:	f7ff fff5 	bl	8003d60 <port_timer_get_time.lto_priv.3>
 8003d76:	4603      	mov	r3, r0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd08      	pop	{r3, pc}
 8003d7c:	0000      	movs	r0, r0
	...

08003d80 <__vt_object_init>:
 *
 * @param[out] vtlp     pointer to the @p virtual_timers_list_t structure
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {
 8003d80:	b530      	push	{r4, r5, lr}
 8003d82:	b083      	sub	sp, #12
 8003d84:	9001      	str	r0, [sp, #4]

  ch_dlist_init(&vtlp->dlist);
 8003d86:	9b01      	ldr	r3, [sp, #4]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff ffd9 	bl	8003d40 <ch_dlist_init>
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 8003d8e:	9b01      	ldr	r3, [sp, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	60da      	str	r2, [r3, #12]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8003d94:	f7ff ffec 	bl	8003d70 <chVTGetSystemTimeX.lto_priv.3>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	461c      	mov	r4, r3
 8003d9e:	4615      	mov	r5, r2
 8003da0:	9b01      	ldr	r3, [sp, #4]
 8003da2:	e9c3 4504 	strd	r4, r5, [r3, #16]
#endif
}
 8003da6:	bf00      	nop
 8003da8:	b003      	add	sp, #12
 8003daa:	bd30      	pop	{r4, r5, pc}
 8003dac:	0000      	movs	r0, r0
	...

08003db0 <__reg_object_init>:
 *
 * @param[out] rp       pointer to a @p registry_t structure
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {
 8003db0:	b500      	push	{lr}
 8003db2:	b083      	sub	sp, #12
 8003db4:	9001      	str	r0, [sp, #4]

  ch_queue_init(&rp->queue);
 8003db6:	9b01      	ldr	r3, [sp, #4]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ffa1 	bl	8003d00 <ch_queue_init.lto_priv.3>
}
 8003dbe:	bf00      	nop
 8003dc0:	b003      	add	sp, #12
 8003dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dc6:	bf00      	nop
	...

08003dd0 <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	9001      	str	r0, [sp, #4]
}
 8003dd4:	bf00      	nop
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
    /*lint -restore*/
    CH_CFG_IDLE_LOOP_HOOK();
    asm volatile ("nop");
 8003dd6:	bf00      	nop
    port_wait_for_interrupt();
 8003dd8:	bf00      	nop
 8003dda:	e7fb      	b.n	8003dd4 <__idle_thread+0x4>
 8003ddc:	0000      	movs	r0, r0
	...

08003de0 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to the @p os_instance_config_t structure
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
 8003de0:	b500      	push	{lr}
 8003de2:	b08b      	sub	sp, #44	@ 0x2c
 8003de4:	9001      	str	r0, [sp, #4]
 8003de6:	9100      	str	r1, [sp, #0]

  /* Registering into the global system structure.*/
#if CH_CFG_SMP_MODE == TRUE
  core_id = port_get_core_id();
#else
  core_id = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	9309      	str	r3, [sp, #36]	@ 0x24
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 8003dec:	4a2b      	ldr	r2, [pc, #172]	@ (8003e9c <chInstanceObjectInit+0xbc>)
 8003dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	9a01      	ldr	r2, [sp, #4]
 8003df6:	605a      	str	r2, [r3, #4]

  /* Core associated to this instance.*/
  oip->core_id = core_id;
 8003df8:	9b01      	ldr	r3, [sp, #4]
 8003dfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dfc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 8003dfe:	9b01      	ldr	r3, [sp, #4]
 8003e00:	9a00      	ldr	r2, [sp, #0]
 8003e02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Port initialization for the current instance.*/
  port_init(oip);
 8003e04:	9801      	ldr	r0, [sp, #4]
 8003e06:	f000 fda3 	bl	8004950 <port_init>

  /* Ready list initialization.*/
  ch_pqueue_init(&oip->rlist.pqueue);
 8003e0a:	9b01      	ldr	r3, [sp, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff87 	bl	8003d20 <ch_pqueue_init>

#if (CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == FALSE)
  /* Registry initialization when SMP mode is disabled.*/
  __reg_object_init(&oip->reglist);
 8003e12:	9b01      	ldr	r3, [sp, #4]
 8003e14:	3328      	adds	r3, #40	@ 0x28
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff ffca 	bl	8003db0 <__reg_object_init>
#endif

#if CH_CFG_SMP_MODE == FALSE
  /* RFCU initialization when SMP mode is disabled.*/
  __rfcu_object_init(&oip->rfcu);
 8003e1c:	9b01      	ldr	r3, [sp, #4]
 8003e1e:	3334      	adds	r3, #52	@ 0x34
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff5d 	bl	8003ce0 <__rfcu_object_init>
#endif

  /* Virtual timers list initialization.*/
  __vt_object_init(&oip->vtlist);
 8003e26:	9b01      	ldr	r3, [sp, #4]
 8003e28:	3310      	adds	r3, #16
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ffa8 	bl	8003d80 <__vt_object_init>

  /* Debug support initialization.*/
  __dbg_object_init(&oip->dbg);
 8003e30:	9b01      	ldr	r3, [sp, #4]
 8003e32:	3384      	adds	r3, #132	@ 0x84
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff5b 	bl	8003cf0 <__dbg_object_init>

#if CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED
  /* Trace buffer initialization.*/
  __trace_object_init(&oip->trace_buffer);
 8003e3a:	9b01      	ldr	r3, [sp, #4]
 8003e3c:	3388      	adds	r3, #136	@ 0x88
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff f8d6 	bl	8002ff0 <__trace_object_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 8003e44:	9b01      	ldr	r3, [sp, #4]
 8003e46:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8003e4a:	2380      	movs	r3, #128	@ 0x80
 8003e4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ea0 <chInstanceObjectInit+0xc0>)
 8003e4e:	9801      	ldr	r0, [sp, #4]
 8003e50:	f000 f906 	bl	8004060 <__thd_object_init>
 8003e54:	4602      	mov	r2, r0
 8003e56:	9b01      	ldr	r3, [sp, #4]
 8003e58:	60da      	str	r2, [r3, #12]
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 8003e5a:	9b01      	ldr	r3, [sp, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	9a00      	ldr	r2, [sp, #0]
 8003e60:	6852      	ldr	r2, [r2, #4]
 8003e62:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 8003e64:	9b01      	ldr	r3, [sp, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea4 <chInstanceObjectInit+0xc4>)
 8003e70:	9303      	str	r3, [sp, #12]
      .name     = "idle",
      .wbase    = oicp->idlethread_base,
 8003e72:	9b00      	ldr	r3, [sp, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
    thread_descriptor_t idle_descriptor = {
 8003e76:	9304      	str	r3, [sp, #16]
      .wend     = oicp->idlethread_end,
 8003e78:	9b00      	ldr	r3, [sp, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
    thread_descriptor_t idle_descriptor = {
 8003e7c:	9305      	str	r3, [sp, #20]
 8003e7e:	2301      	movs	r3, #1
 8003e80:	9306      	str	r3, [sp, #24]
 8003e82:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <chInstanceObjectInit+0xc8>)
 8003e84:	9307      	str	r3, [sp, #28]
 8003e86:	2300      	movs	r3, #0
 8003e88:	9308      	str	r3, [sp, #32]
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreateI(&idle_descriptor);
 8003e8a:	ab03      	add	r3, sp, #12
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f957 	bl	8004140 <chThdCreateI>
  }
#endif
}
 8003e92:	bf00      	nop
 8003e94:	b00b      	add	sp, #44	@ 0x2c
 8003e96:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e9a:	bf00      	nop
 8003e9c:	240000f0 	.word	0x240000f0
 8003ea0:	08004ea0 	.word	0x08004ea0
 8003ea4:	08004e64 	.word	0x08004e64
 8003ea8:	08003dd1 	.word	0x08003dd1
 8003eac:	00000000 	.word	0x00000000

08003eb0 <ch_list_init>:
static inline void ch_list_init(ch_list_t *lp) {
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	9001      	str	r0, [sp, #4]
  lp->next = lp;
 8003eb4:	9b01      	ldr	r3, [sp, #4]
 8003eb6:	9a01      	ldr	r2, [sp, #4]
 8003eb8:	601a      	str	r2, [r3, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	b002      	add	sp, #8
 8003ebe:	4770      	bx	lr

08003ec0 <ch_list_notempty>:
static inline bool ch_list_notempty(ch_list_t *lp) {
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	9001      	str	r0, [sp, #4]
  return (bool)(lp->next != lp);
 8003ec4:	9b01      	ldr	r3, [sp, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	9a01      	ldr	r2, [sp, #4]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	bf14      	ite	ne
 8003ece:	2301      	movne	r3, #1
 8003ed0:	2300      	moveq	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	b002      	add	sp, #8
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	0000      	movs	r0, r0
	...

08003ee0 <ch_list_unlink>:
static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	9001      	str	r0, [sp, #4]
  ch_list_t *p = lp->next;
 8003ee4:	9b01      	ldr	r3, [sp, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	9303      	str	r3, [sp, #12]
  lp->next = p->next;
 8003eea:	9b03      	ldr	r3, [sp, #12]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	9b01      	ldr	r3, [sp, #4]
 8003ef0:	601a      	str	r2, [r3, #0]
  return p;
 8003ef2:	9b03      	ldr	r3, [sp, #12]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	b004      	add	sp, #16
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	0000      	movs	r0, r0
	...

08003f00 <ch_queue_init.lto_priv.4>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8003f00:	b082      	sub	sp, #8
 8003f02:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8003f04:	9b01      	ldr	r3, [sp, #4]
 8003f06:	9a01      	ldr	r2, [sp, #4]
 8003f08:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8003f0a:	9b01      	ldr	r3, [sp, #4]
 8003f0c:	9a01      	ldr	r2, [sp, #4]
 8003f0e:	605a      	str	r2, [r3, #4]
}
 8003f10:	bf00      	nop
 8003f12:	b002      	add	sp, #8
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
	...

08003f20 <ch_queue_notempty.lto_priv.0>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 8003f20:	b082      	sub	sp, #8
 8003f22:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
 8003f24:	9b01      	ldr	r3, [sp, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	9a01      	ldr	r2, [sp, #4]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	bf14      	ite	ne
 8003f2e:	2301      	movne	r3, #1
 8003f30:	2300      	moveq	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	b002      	add	sp, #8
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	0000      	movs	r0, r0
	...

08003f40 <ch_queue_insert.lto_priv.0>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 8003f40:	b082      	sub	sp, #8
 8003f42:	9001      	str	r0, [sp, #4]
 8003f44:	9100      	str	r1, [sp, #0]
  p->next       = qp;
 8003f46:	9b00      	ldr	r3, [sp, #0]
 8003f48:	9a01      	ldr	r2, [sp, #4]
 8003f4a:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
 8003f4c:	9b01      	ldr	r3, [sp, #4]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	9b00      	ldr	r3, [sp, #0]
 8003f52:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8003f54:	9b00      	ldr	r3, [sp, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	9a00      	ldr	r2, [sp, #0]
 8003f5a:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
 8003f5c:	9b01      	ldr	r3, [sp, #4]
 8003f5e:	9a00      	ldr	r2, [sp, #0]
 8003f60:	605a      	str	r2, [r3, #4]
}
 8003f62:	bf00      	nop
 8003f64:	b002      	add	sp, #8
 8003f66:	4770      	bx	lr
	...

08003f70 <ch_queue_fifo_remove.lto_priv.0>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 8003f70:	b084      	sub	sp, #16
 8003f72:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 8003f74:	9b01      	ldr	r3, [sp, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 8003f7a:	9b03      	ldr	r3, [sp, #12]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	9b01      	ldr	r3, [sp, #4]
 8003f80:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 8003f82:	9b01      	ldr	r3, [sp, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	9a01      	ldr	r2, [sp, #4]
 8003f88:	605a      	str	r2, [r3, #4]
  return p;
 8003f8a:	9b03      	ldr	r3, [sp, #12]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	b004      	add	sp, #16
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
	...

08003fa0 <ch_queue_dequeue.lto_priv.1>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8003fa4:	9b01      	ldr	r3, [sp, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	9a01      	ldr	r2, [sp, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 8003fae:	9b01      	ldr	r3, [sp, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	9a01      	ldr	r2, [sp, #4]
 8003fb4:	6852      	ldr	r2, [r2, #4]
 8003fb6:	605a      	str	r2, [r3, #4]
  return p;
 8003fb8:	9b01      	ldr	r3, [sp, #4]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	b002      	add	sp, #8
 8003fbe:	4770      	bx	lr

08003fc0 <chSysLock.lto_priv.6>:
static inline void chSysLock(void) {
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	2330      	movs	r3, #48	@ 0x30
 8003fc4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003fc6:	9b01      	ldr	r3, [sp, #4]
 8003fc8:	f383 8811 	msr	BASEPRI, r3
}
 8003fcc:	bf00      	nop
}
 8003fce:	bf00      	nop
}
 8003fd0:	bf00      	nop
 8003fd2:	b002      	add	sp, #8
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
	...

08003fe0 <chSysUnlock.lto_priv.6>:
static inline void chSysUnlock(void) {
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003fe6:	9b01      	ldr	r3, [sp, #4]
 8003fe8:	f383 8811 	msr	BASEPRI, r3
}
 8003fec:	bf00      	nop
}
 8003fee:	bf00      	nop
}
 8003ff0:	bf00      	nop
 8003ff2:	b002      	add	sp, #8
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
	...

08004000 <chThdGetSelfX.lto_priv.0>:
  return __sch_get_currthread();
 8004000:	4b01      	ldr	r3, [pc, #4]	@ (8004008 <chThdGetSelfX.lto_priv.0+0x8>)
 8004002:	68db      	ldr	r3, [r3, #12]
}
 8004004:	4618      	mov	r0, r3
 8004006:	4770      	bx	lr
 8004008:	24000100 	.word	0x24000100
 800400c:	00000000 	.word	0x00000000

08004010 <chThdSleepS.lto_priv.1>:
static inline void chThdSleepS(sysinterval_t ticks) {
 8004010:	b500      	push	{lr}
 8004012:	b083      	sub	sp, #12
 8004014:	9001      	str	r0, [sp, #4]
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004016:	9901      	ldr	r1, [sp, #4]
 8004018:	2008      	movs	r0, #8
 800401a:	f7ff fda9 	bl	8003b70 <chSchGoSleepTimeoutS>
}
 800401e:	bf00      	nop
 8004020:	b003      	add	sp, #12
 8004022:	f85d fb04 	ldr.w	pc, [sp], #4
 8004026:	bf00      	nop
	...

08004030 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8004030:	b500      	push	{lr}
 8004032:	b085      	sub	sp, #20
 8004034:	9001      	str	r0, [sp, #4]
 8004036:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));
 8004038:	9b01      	ldr	r3, [sp, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ff98 	bl	8003f70 <ch_queue_fifo_remove.lto_priv.0>
 8004040:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8004042:	9b03      	ldr	r3, [sp, #12]
 8004044:	9a00      	ldr	r2, [sp, #0]
 8004046:	629a      	str	r2, [r3, #40]	@ 0x28
  (void) chSchReadyI(tp);
 8004048:	9803      	ldr	r0, [sp, #12]
 800404a:	f7ff fd51 	bl	8003af0 <chSchReadyI>
}
 800404e:	bf00      	nop
 8004050:	b005      	add	sp, #20
 8004052:	f85d fb04 	ldr.w	pc, [sp], #4
 8004056:	bf00      	nop
	...

08004060 <__thd_object_init>:
 * @notapi
 */
thread_t *__thd_object_init(os_instance_t *oip,
                            thread_t *tp,
                            const char *name,
                            tprio_t prio) {
 8004060:	b500      	push	{lr}
 8004062:	b085      	sub	sp, #20
 8004064:	9003      	str	r0, [sp, #12]
 8004066:	9102      	str	r1, [sp, #8]
 8004068:	9201      	str	r2, [sp, #4]
 800406a:	9300      	str	r3, [sp, #0]

  tp->hdr.pqueue.prio   = prio;
 800406c:	9b02      	ldr	r3, [sp, #8]
 800406e:	9a00      	ldr	r2, [sp, #0]
 8004070:	609a      	str	r2, [r3, #8]
  tp->state             = CH_STATE_WTSTART;
 8004072:	9b02      	ldr	r3, [sp, #8]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  tp->flags             = CH_FLAG_MODE_STATIC;
 800407a:	9b02      	ldr	r3, [sp, #8]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tp->owner             = oip;
 8004082:	9b02      	ldr	r3, [sp, #8]
 8004084:	9a03      	ldr	r2, [sp, #12]
 8004086:	619a      	str	r2, [r3, #24]
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks             = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio          = prio;
 8004088:	9b02      	ldr	r3, [sp, #8]
 800408a:	9a00      	ldr	r2, [sp, #0]
 800408c:	641a      	str	r2, [r3, #64]	@ 0x40
  tp->mtxlist           = NULL;
 800408e:	9b02      	ldr	r3, [sp, #8]
 8004090:	2200      	movs	r2, #0
 8004092:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending          = (eventmask_t)0;
 8004094:	9b02      	ldr	r3, [sp, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	639a      	str	r2, [r3, #56]	@ 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time              = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs              = (trefs_t)1;
 800409a:	9b02      	ldr	r3, [sp, #8]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  tp->name              = name;
 80040a2:	9b02      	ldr	r3, [sp, #8]
 80040a4:	9a01      	ldr	r2, [sp, #4]
 80040a6:	61da      	str	r2, [r3, #28]
  REG_INSERT(oip, tp);
 80040a8:	9b03      	ldr	r3, [sp, #12]
 80040aa:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80040ae:	9b02      	ldr	r3, [sp, #8]
 80040b0:	3310      	adds	r3, #16
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f7ff ff43 	bl	8003f40 <ch_queue_insert.lto_priv.0>
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  ch_list_init(&tp->waiting);
 80040ba:	9b02      	ldr	r3, [sp, #8]
 80040bc:	332c      	adds	r3, #44	@ 0x2c
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fef6 	bl	8003eb0 <ch_list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  ch_queue_init(&tp->msgqueue);
 80040c4:	9b02      	ldr	r3, [sp, #8]
 80040c6:	3330      	adds	r3, #48	@ 0x30
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff19 	bl	8003f00 <ch_queue_init.lto_priv.4>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 80040ce:	9b02      	ldr	r3, [sp, #8]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	b005      	add	sp, #20
 80040d4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080040e0 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80040e0:	b500      	push	{lr}
 80040e2:	b085      	sub	sp, #20
 80040e4:	9001      	str	r0, [sp, #4]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = threadref(((uint8_t *)tdp->wend -
 80040e6:	9b01      	ldr	r3, [sp, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	3b48      	subs	r3, #72	@ 0x48
 80040ec:	9303      	str	r3, [sp, #12]
                 MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80040ee:	9b01      	ldr	r3, [sp, #4]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	f1a3 0224 	sub.w	r2, r3, #36	@ 0x24
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	60da      	str	r2, [r3, #12]
 8004100:	9b01      	ldr	r3, [sp, #4]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	9b01      	ldr	r3, [sp, #4]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	9b03      	ldr	r3, [sp, #12]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	9b03      	ldr	r3, [sp, #12]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a07      	ldr	r2, [pc, #28]	@ (8004138 <chThdCreateSuspendedI+0x58>)
 800411a:	621a      	str	r2, [r3, #32]
  if (tdp->instance != NULL) {
    return __thd_object_init(tdp->instance, tp, tdp->name, tdp->prio);
  }
#endif

  return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 800411c:	9b01      	ldr	r3, [sp, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	9b01      	ldr	r3, [sp, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	9903      	ldr	r1, [sp, #12]
 8004126:	4805      	ldr	r0, [pc, #20]	@ (800413c <chThdCreateSuspendedI+0x5c>)
 8004128:	f7ff ff9a 	bl	8004060 <__thd_object_init>
 800412c:	4603      	mov	r3, r0
}
 800412e:	4618      	mov	r0, r3
 8004130:	b005      	add	sp, #20
 8004132:	f85d fb04 	ldr.w	pc, [sp], #4
 8004136:	bf00      	nop
 8004138:	080003d1 	.word	0x080003d1
 800413c:	24000100 	.word	0x24000100

08004140 <chThdCreateI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 8004140:	b500      	push	{lr}
 8004142:	b083      	sub	sp, #12
 8004144:	9001      	str	r0, [sp, #4]

  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8004146:	9801      	ldr	r0, [sp, #4]
 8004148:	f7ff ffca 	bl	80040e0 <chThdCreateSuspendedI>
 800414c:	4603      	mov	r3, r0
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fcce 	bl	8003af0 <chSchReadyI>
 8004154:	4603      	mov	r3, r0
}
 8004156:	4618      	mov	r0, r3
 8004158:	b003      	add	sp, #12
 800415a:	f85d fb04 	ldr.w	pc, [sp], #4
 800415e:	bf00      	nop

08004160 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8004160:	b500      	push	{lr}
 8004162:	b087      	sub	sp, #28
 8004164:	9003      	str	r0, [sp, #12]
 8004166:	9102      	str	r1, [sp, #8]
 8004168:	9201      	str	r2, [sp, #4]
 800416a:	9300      	str	r3, [sp, #0]

#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)wsp, (uint8_t *)wsp + size);
#endif

  chSysLock();
 800416c:	f7ff ff28 	bl	8003fc0 <chSysLock.lto_priv.6>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = threadref(((uint8_t *)wsp + size -
 8004170:	9b02      	ldr	r3, [sp, #8]
 8004172:	3b48      	subs	r3, #72	@ 0x48
 8004174:	9a03      	ldr	r2, [sp, #12]
 8004176:	4413      	add	r3, r2
 8004178:	9305      	str	r3, [sp, #20]
                 MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 800417a:	9b05      	ldr	r3, [sp, #20]
 800417c:	9a03      	ldr	r2, [sp, #12]
 800417e:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004180:	9b05      	ldr	r3, [sp, #20]
 8004182:	f1a3 0224 	sub.w	r2, r3, #36	@ 0x24
 8004186:	9b05      	ldr	r3, [sp, #20]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	9b05      	ldr	r3, [sp, #20]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	9a00      	ldr	r2, [sp, #0]
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	9b05      	ldr	r3, [sp, #20]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	9a08      	ldr	r2, [sp, #32]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	9b05      	ldr	r3, [sp, #20]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	4a0a      	ldr	r2, [pc, #40]	@ (80041c8 <chThdCreateStatic+0x68>)
 80041a0:	621a      	str	r2, [r3, #32]

  tp = __thd_object_init(currcore, tp, "noname", prio);
 80041a2:	9b01      	ldr	r3, [sp, #4]
 80041a4:	4a09      	ldr	r2, [pc, #36]	@ (80041cc <chThdCreateStatic+0x6c>)
 80041a6:	9905      	ldr	r1, [sp, #20]
 80041a8:	4809      	ldr	r0, [pc, #36]	@ (80041d0 <chThdCreateStatic+0x70>)
 80041aa:	f7ff ff59 	bl	8004060 <__thd_object_init>
 80041ae:	9005      	str	r0, [sp, #20]

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 80041b0:	2100      	movs	r1, #0
 80041b2:	9805      	ldr	r0, [sp, #20]
 80041b4:	f7ff fd14 	bl	8003be0 <chSchWakeupS>
  chSysUnlock();
 80041b8:	f7ff ff12 	bl	8003fe0 <chSysUnlock.lto_priv.6>

  return tp;
 80041bc:	9b05      	ldr	r3, [sp, #20]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	b007      	add	sp, #28
 80041c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80041c6:	bf00      	nop
 80041c8:	080003d1 	.word	0x080003d1
 80041cc:	08004e6c 	.word	0x08004e6c
 80041d0:	24000100 	.word	0x24000100
	...

080041e0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 80041e0:	b500      	push	{lr}
 80041e2:	b083      	sub	sp, #12
 80041e4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80041e6:	f7ff feeb 	bl	8003fc0 <chSysLock.lto_priv.6>
  chThdExitS(msg);
 80041ea:	9801      	ldr	r0, [sp, #4]
 80041ec:	f000 f808 	bl	8004200 <chThdExitS>
  /* The thread never returns here.*/
}
 80041f0:	bf00      	nop
 80041f2:	b003      	add	sp, #12
 80041f4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004200 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8004200:	b500      	push	{lr}
 8004202:	b085      	sub	sp, #20
 8004204:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8004206:	f7ff fefb 	bl	8004000 <chThdGetSelfX.lto_priv.0>
 800420a:	9003      	str	r0, [sp, #12]

  /* Storing exit message.*/
  currtp->u.exitcode = msg;
 800420c:	9b03      	ldr	r3, [sp, #12]
 800420e:	9a01      	ldr	r2, [sp, #4]
 8004210:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(currtp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004212:	e008      	b.n	8004226 <chThdExitS+0x26>
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 8004214:	9b03      	ldr	r3, [sp, #12]
 8004216:	332c      	adds	r3, #44	@ 0x2c
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff fe61 	bl	8003ee0 <ch_list_unlink>
 800421e:	4603      	mov	r3, r0
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fc65 	bl	8003af0 <chSchReadyI>
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004226:	9b03      	ldr	r3, [sp, #12]
 8004228:	332c      	adds	r3, #44	@ 0x2c
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fe48 	bl	8003ec0 <ch_list_notempty>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1ee      	bne.n	8004214 <chThdExitS+0x14>
  }
#endif

#if CH_CFG_USE_REGISTRY == TRUE
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8004236:	9b03      	ldr	r3, [sp, #12]
 8004238:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d010      	beq.n	800426c <chThdExitS+0x6c>
#if CH_CFG_USE_DYNAMIC == TRUE
    /* Static threads are immediately removed from the registry because there
       is no memory to recover.*/
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 800424a:	9b03      	ldr	r3, [sp, #12]
 800424c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf0c      	ite	eq
 8004258:	2301      	moveq	r3, #1
 800425a:	2300      	movne	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <chThdExitS+0x6c>
      REG_REMOVE(currtp);
 8004262:	9b03      	ldr	r3, [sp, #12]
 8004264:	3310      	adds	r3, #16
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fe9a 	bl	8003fa0 <ch_queue_dequeue.lto_priv.1>
#endif
  }
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 800426c:	200f      	movs	r0, #15
 800426e:	f7ff fc4f 	bl	8003b10 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8004272:	bf00      	nop
 8004274:	b005      	add	sp, #20
 8004276:	f85d fb04 	ldr.w	pc, [sp], #4
 800427a:	bf00      	nop
 800427c:	0000      	movs	r0, r0
	...

08004280 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8004280:	b500      	push	{lr}
 8004282:	b083      	sub	sp, #12
 8004284:	9001      	str	r0, [sp, #4]

  chSysLock();
 8004286:	f7ff fe9b 	bl	8003fc0 <chSysLock.lto_priv.6>
  chThdSleepS(time);
 800428a:	9801      	ldr	r0, [sp, #4]
 800428c:	f7ff fec0 	bl	8004010 <chThdSleepS.lto_priv.1>
  chSysUnlock();
 8004290:	f7ff fea6 	bl	8003fe0 <chSysUnlock.lto_priv.6>
}
 8004294:	bf00      	nop
 8004296:	b003      	add	sp, #12
 8004298:	f85d fb04 	ldr.w	pc, [sp], #4
 800429c:	0000      	movs	r0, r0
	...

080042a0 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80042a0:	b500      	push	{lr}
 80042a2:	b085      	sub	sp, #20
 80042a4:	9001      	str	r0, [sp, #4]
 80042a6:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 80042a8:	f7ff feaa 	bl	8004000 <chThdGetSelfX.lto_priv.0>
 80042ac:	9003      	str	r0, [sp, #12]

  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80042ae:	9b00      	ldr	r3, [sp, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <chThdEnqueueTimeoutS+0x24>
    return MSG_TIMEOUT;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042c2:	e009      	b.n	80042d8 <chThdEnqueueTimeoutS+0x38>
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);
 80042c4:	9b01      	ldr	r3, [sp, #4]
 80042c6:	9903      	ldr	r1, [sp, #12]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fe39 	bl	8003f40 <ch_queue_insert.lto_priv.0>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80042ce:	9900      	ldr	r1, [sp, #0]
 80042d0:	2004      	movs	r0, #4
 80042d2:	f7ff fc4d 	bl	8003b70 <chSchGoSleepTimeoutS>
 80042d6:	4603      	mov	r3, r0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	b005      	add	sp, #20
 80042dc:	f85d fb04 	ldr.w	pc, [sp], #4

080042e0 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to a @p threads_queue_t object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80042e0:	b500      	push	{lr}
 80042e2:	b083      	sub	sp, #12
 80042e4:	9001      	str	r0, [sp, #4]
 80042e6:	9100      	str	r1, [sp, #0]

  if (ch_queue_notempty(&tqp->queue)) {
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fe18 	bl	8003f20 <ch_queue_notempty.lto_priv.0>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <chThdDequeueNextI+0x1e>
    chThdDoDequeueNextI(tqp, msg);
 80042f6:	9900      	ldr	r1, [sp, #0]
 80042f8:	9801      	ldr	r0, [sp, #4]
 80042fa:	f7ff fe99 	bl	8004030 <chThdDoDequeueNextI>
  }
}
 80042fe:	bf00      	nop
 8004300:	b003      	add	sp, #12
 8004302:	f85d fb04 	ldr.w	pc, [sp], #4
 8004306:	bf00      	nop
	...

08004310 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to a @p threads_queue_t object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8004310:	b500      	push	{lr}
 8004312:	b083      	sub	sp, #12
 8004314:	9001      	str	r0, [sp, #4]
 8004316:	9100      	str	r1, [sp, #0]

  while (ch_queue_notempty(&tqp->queue)) {
 8004318:	e003      	b.n	8004322 <chThdDequeueAllI+0x12>
    chThdDoDequeueNextI(tqp, msg);
 800431a:	9900      	ldr	r1, [sp, #0]
 800431c:	9801      	ldr	r0, [sp, #4]
 800431e:	f7ff fe87 	bl	8004030 <chThdDoDequeueNextI>
  while (ch_queue_notempty(&tqp->queue)) {
 8004322:	9b01      	ldr	r3, [sp, #4]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fdfb 	bl	8003f20 <ch_queue_notempty.lto_priv.0>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f4      	bne.n	800431a <chThdDequeueAllI+0xa>
  }
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	b003      	add	sp, #12
 8004336:	f85d fb04 	ldr.w	pc, [sp], #4
 800433a:	bf00      	nop
 800433c:	0000      	movs	r0, r0
	...

08004340 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8004340:	b4f0      	push	{r4, r5, r6, r7}
 8004342:	b084      	sub	sp, #16
 8004344:	9003      	str	r0, [sp, #12]
 8004346:	9102      	str	r1, [sp, #8]
 8004348:	9201      	str	r2, [sp, #4]

  tmp->n++;
 800434a:	9b03      	ldr	r3, [sp, #12]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	9b03      	ldr	r3, [sp, #12]
 8004352:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8004354:	9b03      	ldr	r3, [sp, #12]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	9a02      	ldr	r2, [sp, #8]
 800435a:	1ad2      	subs	r2, r2, r3
 800435c:	9b01      	ldr	r3, [sp, #4]
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8004364:	9b03      	ldr	r3, [sp, #12]
 8004366:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800436a:	9903      	ldr	r1, [sp, #12]
 800436c:	6889      	ldr	r1, [r1, #8]
 800436e:	2000      	movs	r0, #0
 8004370:	460c      	mov	r4, r1
 8004372:	4605      	mov	r5, r0
 8004374:	1916      	adds	r6, r2, r4
 8004376:	eb43 0705 	adc.w	r7, r3, r5
 800437a:	9b03      	ldr	r3, [sp, #12]
 800437c:	e9c3 6704 	strd	r6, r7, [r3, #16]
  if (tmp->last > tmp->worst) {
 8004380:	9b03      	ldr	r3, [sp, #12]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	9b03      	ldr	r3, [sp, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	429a      	cmp	r2, r3
 800438a:	d903      	bls.n	8004394 <tm_stop+0x54>
    tmp->worst = tmp->last;
 800438c:	9b03      	ldr	r3, [sp, #12]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	9b03      	ldr	r3, [sp, #12]
 8004392:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 8004394:	9b03      	ldr	r3, [sp, #12]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	9b03      	ldr	r3, [sp, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d203      	bcs.n	80043a8 <tm_stop+0x68>
    tmp->best = tmp->last;
 80043a0:	9b03      	ldr	r3, [sp, #12]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	9b03      	ldr	r3, [sp, #12]
 80043a6:	601a      	str	r2, [r3, #0]
  }
}
 80043a8:	bf00      	nop
 80043aa:	b004      	add	sp, #16
 80043ac:	bcf0      	pop	{r4, r5, r6, r7}
 80043ae:	4770      	bx	lr

080043b0 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 80043b0:	b082      	sub	sp, #8
 80043b2:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
 80043b4:	9b01      	ldr	r3, [sp, #4]
 80043b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043ba:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 80043bc:	9b01      	ldr	r3, [sp, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 80043c2:	9b01      	ldr	r3, [sp, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 80043c8:	9b01      	ldr	r3, [sp, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 80043ce:	9901      	ldr	r1, [sp, #4]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80043dc:	bf00      	nop
 80043de:	b002      	add	sp, #8
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
	...

080043f0 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 80043f0:	b082      	sub	sp, #8
 80043f2:	9001      	str	r0, [sp, #4]
  return DWT->CYCCNT;
 80043f4:	4b03      	ldr	r3, [pc, #12]	@ (8004404 <chTMStartMeasurementX+0x14>)
 80043f6:	685a      	ldr	r2, [r3, #4]

  tmp->last = chSysGetRealtimeCounterX();
 80043f8:	9b01      	ldr	r3, [sp, #4]
 80043fa:	609a      	str	r2, [r3, #8]
}
 80043fc:	bf00      	nop
 80043fe:	b002      	add	sp, #8
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	e0001000 	.word	0xe0001000
	...

08004410 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8004410:	b500      	push	{lr}
 8004412:	b083      	sub	sp, #12
 8004414:	9001      	str	r0, [sp, #4]
 8004416:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <chTMStopMeasurementX+0x20>)
 8004418:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 800441a:	4a06      	ldr	r2, [pc, #24]	@ (8004434 <chTMStopMeasurementX+0x24>)
 800441c:	6892      	ldr	r2, [r2, #8]
 800441e:	4619      	mov	r1, r3
 8004420:	9801      	ldr	r0, [sp, #4]
 8004422:	f7ff ff8d 	bl	8004340 <tm_stop>
}
 8004426:	bf00      	nop
 8004428:	b003      	add	sp, #12
 800442a:	f85d fb04 	ldr.w	pc, [sp], #4
 800442e:	bf00      	nop
 8004430:	e0001000 	.word	0xe0001000
 8004434:	240000f0 	.word	0x240000f0
	...

08004440 <ch_queue_init.lto_priv.6>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8004440:	b082      	sub	sp, #8
 8004442:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8004444:	9b01      	ldr	r3, [sp, #4]
 8004446:	9a01      	ldr	r2, [sp, #4]
 8004448:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800444a:	9b01      	ldr	r3, [sp, #4]
 800444c:	9a01      	ldr	r2, [sp, #4]
 800444e:	605a      	str	r2, [r3, #4]
}
 8004450:	bf00      	nop
 8004452:	b002      	add	sp, #8
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
	...

08004460 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8004460:	b500      	push	{lr}
 8004462:	b083      	sub	sp, #12
 8004464:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
 8004466:	9b01      	ldr	r3, [sp, #4]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff ffe9 	bl	8004440 <ch_queue_init.lto_priv.6>
  mp->owner = NULL;
 800446e:	9b01      	ldr	r3, [sp, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8004474:	bf00      	nop
 8004476:	b003      	add	sp, #12
 8004478:	f85d fb04 	ldr.w	pc, [sp], #4
 800447c:	0000      	movs	r0, r0
	...

08004480 <chSysLock.lto_priv.11>:
static inline void chSysLock(void) {
 8004480:	b082      	sub	sp, #8
 8004482:	2330      	movs	r3, #48	@ 0x30
 8004484:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004486:	9b01      	ldr	r3, [sp, #4]
 8004488:	f383 8811 	msr	BASEPRI, r3
}
 800448c:	bf00      	nop
}
 800448e:	bf00      	nop
}
 8004490:	bf00      	nop
 8004492:	b002      	add	sp, #8
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
	...

080044a0 <chSysUnlock.lto_priv.11>:
static inline void chSysUnlock(void) {
 80044a0:	b082      	sub	sp, #8
 80044a2:	2300      	movs	r3, #0
 80044a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80044a6:	9b01      	ldr	r3, [sp, #4]
 80044a8:	f383 8811 	msr	BASEPRI, r3
}
 80044ac:	bf00      	nop
}
 80044ae:	bf00      	nop
}
 80044b0:	bf00      	nop
 80044b2:	b002      	add	sp, #8
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
	...

080044c0 <chThdGetSelfX.lto_priv.4>:
  return __sch_get_currthread();
 80044c0:	4b01      	ldr	r3, [pc, #4]	@ (80044c8 <chThdGetSelfX.lto_priv.4+0x8>)
 80044c2:	68db      	ldr	r3, [r3, #12]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	4770      	bx	lr
 80044c8:	24000100 	.word	0x24000100
 80044cc:	00000000 	.word	0x00000000

080044d0 <chEvtRegisterMaskWithFlagsI>:
 * @iclass
 */
void chEvtRegisterMaskWithFlagsI(event_source_t *esp,
                                 event_listener_t *elp,
                                 eventmask_t events,
                                 eventflags_t wflags) {
 80044d0:	b500      	push	{lr}
 80044d2:	b087      	sub	sp, #28
 80044d4:	9003      	str	r0, [sp, #12]
 80044d6:	9102      	str	r1, [sp, #8]
 80044d8:	9201      	str	r2, [sp, #4]
 80044da:	9300      	str	r3, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 80044dc:	f7ff fff0 	bl	80044c0 <chThdGetSelfX.lto_priv.4>
 80044e0:	9005      	str	r0, [sp, #20]

  chDbgCheckClassI();
  chDbgCheck((esp != NULL) && (elp != NULL));

  elp->next     = esp->next;
 80044e2:	9b03      	ldr	r3, [sp, #12]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	9b02      	ldr	r3, [sp, #8]
 80044e8:	601a      	str	r2, [r3, #0]
  esp->next     = elp;
 80044ea:	9b03      	ldr	r3, [sp, #12]
 80044ec:	9a02      	ldr	r2, [sp, #8]
 80044ee:	601a      	str	r2, [r3, #0]
  elp->listener = currtp;
 80044f0:	9b02      	ldr	r3, [sp, #8]
 80044f2:	9a05      	ldr	r2, [sp, #20]
 80044f4:	605a      	str	r2, [r3, #4]
  elp->events   = events;
 80044f6:	9b02      	ldr	r3, [sp, #8]
 80044f8:	9a01      	ldr	r2, [sp, #4]
 80044fa:	609a      	str	r2, [r3, #8]
  elp->flags    = (eventflags_t)0;
 80044fc:	9b02      	ldr	r3, [sp, #8]
 80044fe:	2200      	movs	r2, #0
 8004500:	60da      	str	r2, [r3, #12]
  elp->wflags   = wflags;
 8004502:	9b02      	ldr	r3, [sp, #8]
 8004504:	9a00      	ldr	r2, [sp, #0]
 8004506:	611a      	str	r2, [r3, #16]
}
 8004508:	bf00      	nop
 800450a:	b007      	add	sp, #28
 800450c:	f85d fb04 	ldr.w	pc, [sp], #4

08004510 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 8004510:	b500      	push	{lr}
 8004512:	b085      	sub	sp, #20
 8004514:	9003      	str	r0, [sp, #12]
 8004516:	9102      	str	r1, [sp, #8]
 8004518:	9201      	str	r2, [sp, #4]
 800451a:	9300      	str	r3, [sp, #0]

  chSysLock();
 800451c:	f7ff ffb0 	bl	8004480 <chSysLock.lto_priv.11>
  chEvtRegisterMaskWithFlagsI(esp, elp, events, wflags);
 8004520:	9b00      	ldr	r3, [sp, #0]
 8004522:	9a01      	ldr	r2, [sp, #4]
 8004524:	9902      	ldr	r1, [sp, #8]
 8004526:	9803      	ldr	r0, [sp, #12]
 8004528:	f7ff ffd2 	bl	80044d0 <chEvtRegisterMaskWithFlagsI>
  chSysUnlock();
 800452c:	f7ff ffb8 	bl	80044a0 <chSysUnlock.lto_priv.11>
}
 8004530:	bf00      	nop
 8004532:	b005      	add	sp, #20
 8004534:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004540 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8004540:	b500      	push	{lr}
 8004542:	b083      	sub	sp, #12
 8004544:	9001      	str	r0, [sp, #4]
 8004546:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8004548:	9b01      	ldr	r3, [sp, #4]
 800454a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800454c:	9b00      	ldr	r3, [sp, #0]
 800454e:	431a      	orrs	r2, r3
 8004550:	9b01      	ldr	r3, [sp, #4]
 8004552:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004554:	9b01      	ldr	r3, [sp, #4]
 8004556:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800455a:	2b0a      	cmp	r3, #10
 800455c:	d106      	bne.n	800456c <chEvtSignalI+0x2c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800455e:	9b01      	ldr	r3, [sp, #4]
 8004560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004562:	9b01      	ldr	r3, [sp, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004566:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10d      	bne.n	8004588 <chEvtSignalI+0x48>
      ((tp->state == CH_STATE_WTANDEVT) &&
 800456c:	9b01      	ldr	r3, [sp, #4]
 800456e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8004572:	2b0b      	cmp	r3, #11
 8004574:	d10e      	bne.n	8004594 <chEvtSignalI+0x54>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8004576:	9b01      	ldr	r3, [sp, #4]
 8004578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800457a:	9b01      	ldr	r3, [sp, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457e:	401a      	ands	r2, r3
 8004580:	9b01      	ldr	r3, [sp, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      ((tp->state == CH_STATE_WTANDEVT) &&
 8004584:	429a      	cmp	r2, r3
 8004586:	d105      	bne.n	8004594 <chEvtSignalI+0x54>
    tp->u.rdymsg = MSG_OK;
 8004588:	9b01      	ldr	r3, [sp, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	629a      	str	r2, [r3, #40]	@ 0x28
    (void) chSchReadyI(tp);
 800458e:	9801      	ldr	r0, [sp, #4]
 8004590:	f7ff faae 	bl	8003af0 <chSchReadyI>
  }
}
 8004594:	bf00      	nop
 8004596:	b003      	add	sp, #12
 8004598:	f85d fb04 	ldr.w	pc, [sp], #4
 800459c:	0000      	movs	r0, r0
	...

080045a0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80045a0:	b500      	push	{lr}
 80045a2:	b085      	sub	sp, #20
 80045a4:	9001      	str	r0, [sp, #4]
 80045a6:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80045a8:	9b01      	ldr	r3, [sp, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	9303      	str	r3, [sp, #12]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80045ae:	e019      	b.n	80045e4 <chEvtBroadcastFlagsI+0x44>
  /*lint -restore*/
    elp->flags |= flags;
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	9b00      	ldr	r3, [sp, #0]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	9b03      	ldr	r3, [sp, #12]
 80045ba:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80045bc:	9b00      	ldr	r3, [sp, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <chEvtBroadcastFlagsI+0x2e>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80045c2:	9b03      	ldr	r3, [sp, #12]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	9b00      	ldr	r3, [sp, #0]
 80045c8:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <chEvtBroadcastFlagsI+0x3e>
      chEvtSignalI(elp->listener, elp->events);
 80045ce:	9b03      	ldr	r3, [sp, #12]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f7ff ffb1 	bl	8004540 <chEvtSignalI>
    }
    elp = elp->next;
 80045de:	9b03      	ldr	r3, [sp, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
 80045e4:	9a03      	ldr	r2, [sp, #12]
 80045e6:	9b01      	ldr	r3, [sp, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d1e1      	bne.n	80045b0 <chEvtBroadcastFlagsI+0x10>
  }
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	b005      	add	sp, #20
 80045f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80045f6:	bf00      	nop
	...

08004600 <chEvtWaitAnyTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
 8004600:	b500      	push	{lr}
 8004602:	b085      	sub	sp, #20
 8004604:	9001      	str	r0, [sp, #4]
 8004606:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 8004608:	f7ff ff5a 	bl	80044c0 <chThdGetSelfX.lto_priv.4>
 800460c:	9002      	str	r0, [sp, #8]
  eventmask_t m;

  chSysLock();
 800460e:	f7ff ff37 	bl	8004480 <chSysLock.lto_priv.11>
  m = currtp->epending & events;
 8004612:	9b02      	ldr	r3, [sp, #8]
 8004614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004616:	9a01      	ldr	r2, [sp, #4]
 8004618:	4013      	ands	r3, r2
 800461a:	9303      	str	r3, [sp, #12]
  if (m == (eventmask_t)0) {
 800461c:	9b03      	ldr	r3, [sp, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d119      	bne.n	8004656 <chEvtWaitAnyTimeout+0x56>
    if (TIME_IMMEDIATE == timeout) {
 8004622:	9b00      	ldr	r3, [sp, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d103      	bne.n	8004630 <chEvtWaitAnyTimeout+0x30>
      chSysUnlock();
 8004628:	f7ff ff3a 	bl	80044a0 <chSysUnlock.lto_priv.11>
      return (eventmask_t)0;
 800462c:	2300      	movs	r3, #0
 800462e:	e01c      	b.n	800466a <chEvtWaitAnyTimeout+0x6a>
    }
    currtp->u.ewmask = events;
 8004630:	9b02      	ldr	r3, [sp, #8]
 8004632:	9a01      	ldr	r2, [sp, #4]
 8004634:	629a      	str	r2, [r3, #40]	@ 0x28
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8004636:	9900      	ldr	r1, [sp, #0]
 8004638:	200a      	movs	r0, #10
 800463a:	f7ff fa99 	bl	8003b70 <chSchGoSleepTimeoutS>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	da03      	bge.n	800464c <chEvtWaitAnyTimeout+0x4c>
      chSysUnlock();
 8004644:	f7ff ff2c 	bl	80044a0 <chSysUnlock.lto_priv.11>
      return (eventmask_t)0;
 8004648:	2300      	movs	r3, #0
 800464a:	e00e      	b.n	800466a <chEvtWaitAnyTimeout+0x6a>
    }
    m = currtp->epending & events;
 800464c:	9b02      	ldr	r3, [sp, #8]
 800464e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004650:	9a01      	ldr	r2, [sp, #4]
 8004652:	4013      	ands	r3, r2
 8004654:	9303      	str	r3, [sp, #12]
  }
  currtp->epending &= ~m;
 8004656:	9b02      	ldr	r3, [sp, #8]
 8004658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800465a:	9b03      	ldr	r3, [sp, #12]
 800465c:	43db      	mvns	r3, r3
 800465e:	401a      	ands	r2, r3
 8004660:	9b02      	ldr	r3, [sp, #8]
 8004662:	639a      	str	r2, [r3, #56]	@ 0x38
  chSysUnlock();
 8004664:	f7ff ff1c 	bl	80044a0 <chSysUnlock.lto_priv.11>

  return m;
 8004668:	9b03      	ldr	r3, [sp, #12]
}
 800466a:	4618      	mov	r0, r3
 800466c:	b005      	add	sp, #20
 800466e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004672:	bf00      	nop
	...

08004680 <chSysLock.lto_priv.15>:
static inline void chSysLock(void) {
 8004680:	b082      	sub	sp, #8
 8004682:	2330      	movs	r3, #48	@ 0x30
 8004684:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004686:	9b01      	ldr	r3, [sp, #4]
 8004688:	f383 8811 	msr	BASEPRI, r3
}
 800468c:	bf00      	nop
}
 800468e:	bf00      	nop
}
 8004690:	bf00      	nop
 8004692:	b002      	add	sp, #8
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
	...

080046a0 <chSysUnlock.lto_priv.15>:
static inline void chSysUnlock(void) {
 80046a0:	b082      	sub	sp, #8
 80046a2:	2300      	movs	r3, #0
 80046a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80046a6:	9b01      	ldr	r3, [sp, #4]
 80046a8:	f383 8811 	msr	BASEPRI, r3
}
 80046ac:	bf00      	nop
}
 80046ae:	bf00      	nop
}
 80046b0:	bf00      	nop
 80046b2:	b002      	add	sp, #8
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
	...

080046c0 <__core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
 80046c0:	4b03      	ldr	r3, [pc, #12]	@ (80046d0 <__core_init+0x10>)
 80046c2:	4a04      	ldr	r2, [pc, #16]	@ (80046d4 <__core_init+0x14>)
 80046c4:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 80046c6:	4b02      	ldr	r3, [pc, #8]	@ (80046d0 <__core_init+0x10>)
 80046c8:	4a03      	ldr	r2, [pc, #12]	@ (80046d8 <__core_init+0x18>)
 80046ca:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.basemem = &static_heap[0];
  ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 80046cc:	bf00      	nop
 80046ce:	4770      	bx	lr
 80046d0:	24000ac0 	.word	0x24000ac0
 80046d4:	24001200 	.word	0x24001200
 80046d8:	24080000 	.word	0x24080000
 80046dc:	00000000 	.word	0x00000000

080046e0 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 80046e0:	b086      	sub	sp, #24
 80046e2:	9003      	str	r0, [sp, #12]
 80046e4:	9102      	str	r1, [sp, #8]
 80046e6:	9201      	str	r2, [sp, #4]
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80046e8:	4b10      	ldr	r3, [pc, #64]	@ (800472c <chCoreAllocFromTopI+0x4c>)
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	425b      	negs	r3, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	461a      	mov	r2, r3
 80046f4:	9b02      	ldr	r3, [sp, #8]
 80046f6:	425b      	negs	r3, r3
 80046f8:	4013      	ands	r3, r2
 80046fa:	9305      	str	r3, [sp, #20]
  prev = p - offset;
 80046fc:	9b01      	ldr	r3, [sp, #4]
 80046fe:	425b      	negs	r3, r3
 8004700:	9a05      	ldr	r2, [sp, #20]
 8004702:	4413      	add	r3, r2
 8004704:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8004706:	4b09      	ldr	r3, [pc, #36]	@ (800472c <chCoreAllocFromTopI+0x4c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	9a04      	ldr	r2, [sp, #16]
 800470c:	429a      	cmp	r2, r3
 800470e:	d304      	bcc.n	800471a <chCoreAllocFromTopI+0x3a>
 8004710:	4b06      	ldr	r3, [pc, #24]	@ (800472c <chCoreAllocFromTopI+0x4c>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	9a04      	ldr	r2, [sp, #16]
 8004716:	429a      	cmp	r2, r3
 8004718:	d901      	bls.n	800471e <chCoreAllocFromTopI+0x3e>
    return NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	e003      	b.n	8004726 <chCoreAllocFromTopI+0x46>
  }

  ch_memcore.topmem = prev;
 800471e:	4a03      	ldr	r2, [pc, #12]	@ (800472c <chCoreAllocFromTopI+0x4c>)
 8004720:	9b04      	ldr	r3, [sp, #16]
 8004722:	6053      	str	r3, [r2, #4]

  return p;
 8004724:	9b05      	ldr	r3, [sp, #20]
}
 8004726:	4618      	mov	r0, r3
 8004728:	b006      	add	sp, #24
 800472a:	4770      	bx	lr
 800472c:	24000ac0 	.word	0x24000ac0

08004730 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8004730:	b500      	push	{lr}
 8004732:	b087      	sub	sp, #28
 8004734:	9003      	str	r0, [sp, #12]
 8004736:	9102      	str	r1, [sp, #8]
 8004738:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
 800473a:	f7ff ffa1 	bl	8004680 <chSysLock.lto_priv.15>
  p = chCoreAllocFromTopI(size, align, offset);
 800473e:	9a01      	ldr	r2, [sp, #4]
 8004740:	9902      	ldr	r1, [sp, #8]
 8004742:	9803      	ldr	r0, [sp, #12]
 8004744:	f7ff ffcc 	bl	80046e0 <chCoreAllocFromTopI>
 8004748:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 800474a:	f7ff ffa9 	bl	80046a0 <chSysUnlock.lto_priv.15>

  return p;
 800474e:	9b05      	ldr	r3, [sp, #20]
}
 8004750:	4618      	mov	r0, r3
 8004752:	b007      	add	sp, #28
 8004754:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004760 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
 8004760:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8004762:	4b07      	ldr	r3, [pc, #28]	@ (8004780 <__heap_init+0x20>)
 8004764:	4a07      	ldr	r2, [pc, #28]	@ (8004784 <__heap_init+0x24>)
 8004766:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
 8004768:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <__heap_init+0x20>)
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 800476e:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <__heap_init+0x20>)
 8004770:	2200      	movs	r2, #0
 8004772:	609a      	str	r2, [r3, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8004774:	4804      	ldr	r0, [pc, #16]	@ (8004788 <__heap_init+0x28>)
 8004776:	f7ff fe73 	bl	8004460 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 800477a:	bf00      	nop
 800477c:	bd08      	pop	{r3, pc}
 800477e:	bf00      	nop
 8004780:	24000ac8 	.word	0x24000ac8
 8004784:	08004731 	.word	0x08004731
 8004788:	24000ad4 	.word	0x24000ad4
 800478c:	00000000 	.word	0x00000000

08004790 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8004790:	b084      	sub	sp, #16
 8004792:	9003      	str	r0, [sp, #12]
 8004794:	9102      	str	r1, [sp, #8]
 8004796:	9201      	str	r2, [sp, #4]
 8004798:	9300      	str	r3, [sp, #0]
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 800479a:	9b03      	ldr	r3, [sp, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 80047a0:	9b03      	ldr	r3, [sp, #12]
 80047a2:	9a02      	ldr	r2, [sp, #8]
 80047a4:	605a      	str	r2, [r3, #4]
  mp->align = align;
 80047a6:	9b03      	ldr	r3, [sp, #12]
 80047a8:	9a01      	ldr	r2, [sp, #4]
 80047aa:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 80047ac:	9b03      	ldr	r3, [sp, #12]
 80047ae:	9a00      	ldr	r2, [sp, #0]
 80047b0:	60da      	str	r2, [r3, #12]
}
 80047b2:	bf00      	nop
 80047b4:	b004      	add	sp, #16
 80047b6:	4770      	bx	lr
	...

080047c0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80047c0:	b500      	push	{lr}
 80047c2:	b083      	sub	sp, #12
 80047c4:	9001      	str	r0, [sp, #4]
 80047c6:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 80047c8:	2200      	movs	r2, #0
 80047ca:	9900      	ldr	r1, [sp, #0]
 80047cc:	9801      	ldr	r0, [sp, #4]
 80047ce:	f7ff ff87 	bl	80046e0 <chCoreAllocFromTopI>
 80047d2:	4603      	mov	r3, r0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	b003      	add	sp, #12
 80047d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80047dc:	0000      	movs	r0, r0
	...

080047e0 <chPoolObjectInit>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
 80047e0:	b500      	push	{lr}
 80047e2:	b085      	sub	sp, #20
 80047e4:	9003      	str	r0, [sp, #12]
 80047e6:	9102      	str	r1, [sp, #8]
 80047e8:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 80047ea:	9b01      	ldr	r3, [sp, #4]
 80047ec:	2204      	movs	r2, #4
 80047ee:	9902      	ldr	r1, [sp, #8]
 80047f0:	9803      	ldr	r0, [sp, #12]
 80047f2:	f7ff ffcd 	bl	8004790 <chPoolObjectInitAligned>
}
 80047f6:	bf00      	nop
 80047f8:	b005      	add	sp, #20
 80047fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80047fe:	bf00      	nop

08004800 <dyn_list_init>:
    *dp++ = c;
    i--;
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {
 8004800:	b082      	sub	sp, #8
 8004802:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
 8004804:	9b01      	ldr	r3, [sp, #4]
 8004806:	9a01      	ldr	r2, [sp, #4]
 8004808:	601a      	str	r2, [r3, #0]
}
 800480a:	bf00      	nop
 800480c:	b002      	add	sp, #8
 800480e:	4770      	bx	lr

08004810 <__factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void __factory_init(void) {
 8004810:	b508      	push	{r3, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8004812:	4810      	ldr	r0, [pc, #64]	@ (8004854 <__factory_init+0x44>)
 8004814:	f7ff fe24 	bl	8004460 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 8004818:	480f      	ldr	r0, [pc, #60]	@ (8004858 <__factory_init+0x48>)
 800481a:	f7ff fff1 	bl	8004800 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 800481e:	4a0f      	ldr	r2, [pc, #60]	@ (800485c <__factory_init+0x4c>)
 8004820:	2114      	movs	r1, #20
 8004822:	480f      	ldr	r0, [pc, #60]	@ (8004860 <__factory_init+0x50>)
 8004824:	f7ff ffdc 	bl	80047e0 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 8004828:	480e      	ldr	r0, [pc, #56]	@ (8004864 <__factory_init+0x54>)
 800482a:	f7ff ffe9 	bl	8004800 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 800482e:	480e      	ldr	r0, [pc, #56]	@ (8004868 <__factory_init+0x58>)
 8004830:	f7ff ffe6 	bl	8004800 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 8004834:	4a09      	ldr	r2, [pc, #36]	@ (800485c <__factory_init+0x4c>)
 8004836:	211c      	movs	r1, #28
 8004838:	480c      	ldr	r0, [pc, #48]	@ (800486c <__factory_init+0x5c>)
 800483a:	f7ff ffd1 	bl	80047e0 <chPoolObjectInit>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
 800483e:	480c      	ldr	r0, [pc, #48]	@ (8004870 <__factory_init+0x60>)
 8004840:	f7ff ffde 	bl	8004800 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 8004844:	480b      	ldr	r0, [pc, #44]	@ (8004874 <__factory_init+0x64>)
 8004846:	f7ff ffdb 	bl	8004800 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
 800484a:	480b      	ldr	r0, [pc, #44]	@ (8004878 <__factory_init+0x68>)
 800484c:	f7ff ffd8 	bl	8004800 <dyn_list_init>
#endif
}
 8004850:	bf00      	nop
 8004852:	bd08      	pop	{r3, pc}
 8004854:	24000ae4 	.word	0x24000ae4
 8004858:	24000af4 	.word	0x24000af4
 800485c:	080047c1 	.word	0x080047c1
 8004860:	24000af8 	.word	0x24000af8
 8004864:	24000b08 	.word	0x24000b08
 8004868:	24000b0c 	.word	0x24000b0c
 800486c:	24000b10 	.word	0x24000b10
 8004870:	24000b20 	.word	0x24000b20
 8004874:	24000b24 	.word	0x24000b24
 8004878:	24000b28 	.word	0x24000b28
 800487c:	00000000 	.word	0x00000000

08004880 <__NVIC_SetPriorityGrouping>:
{
 8004880:	b084      	sub	sp, #16
 8004882:	9001      	str	r0, [sp, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004884:	9b01      	ldr	r3, [sp, #4]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	9303      	str	r3, [sp, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800488c:	4b0a      	ldr	r3, [pc, #40]	@ (80048b8 <__NVIC_SetPriorityGrouping+0x38>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004892:	9a02      	ldr	r2, [sp, #8]
 8004894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004898:	4013      	ands	r3, r2
 800489a:	9302      	str	r3, [sp, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800489c:	9b03      	ldr	r3, [sp, #12]
 800489e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048a0:	9b02      	ldr	r3, [sp, #8]
 80048a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <__NVIC_SetPriorityGrouping+0x3c>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 80048aa:	4a03      	ldr	r2, [pc, #12]	@ (80048b8 <__NVIC_SetPriorityGrouping+0x38>)
 80048ac:	9b02      	ldr	r3, [sp, #8]
 80048ae:	60d3      	str	r3, [r2, #12]
}
 80048b0:	bf00      	nop
 80048b2:	b004      	add	sp, #16
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	e000ed00 	.word	0xe000ed00
 80048bc:	05fa0000 	.word	0x05fa0000

080048c0 <__NVIC_SetPriority>:
{
 80048c0:	b082      	sub	sp, #8
 80048c2:	4603      	mov	r3, r0
 80048c4:	9100      	str	r1, [sp, #0]
 80048c6:	f8ad 3006 	strh.w	r3, [sp, #6]
  if ((int32_t)(IRQn) >= 0)
 80048ca:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	db0a      	blt.n	80048e8 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d2:	9b00      	ldr	r3, [sp, #0]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	490c      	ldr	r1, [pc, #48]	@ (8004908 <__NVIC_SetPriority+0x48>)
 80048d8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80048dc:	0112      	lsls	r2, r2, #4
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	440b      	add	r3, r1
 80048e2:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80048e6:	e00b      	b.n	8004900 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e8:	9b00      	ldr	r3, [sp, #0]
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	4907      	ldr	r1, [pc, #28]	@ (800490c <__NVIC_SetPriority+0x4c>)
 80048ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	3b04      	subs	r3, #4
 80048f8:	0112      	lsls	r2, r2, #4
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	440b      	add	r3, r1
 80048fe:	761a      	strb	r2, [r3, #24]
}
 8004900:	bf00      	nop
 8004902:	b002      	add	sp, #8
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	e000e100 	.word	0xe000e100
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch and, optionally, for system calls.
 * @note    The SVC vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8004910:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004912:	f3ef 8309 	mrs	r3, PSP
 8004916:	9300      	str	r3, [sp, #0]
  return(result);
 8004918:	9b00      	ldr	r3, [sp, #0]
/*lint -restore*/
  uint32_t psp = __get_PSP();
 800491a:	9303      	str	r3, [sp, #12]
    /* From privileged mode, it is used for context discarding in the
       preemption code.*/

    /* Unstacking procedure, discarding the current exception context and
       positioning the stack to point to the real one.*/
    psp += sizeof (struct port_extctx);
 800491c:	9b03      	ldr	r3, [sp, #12]
 800491e:	3320      	adds	r3, #32
 8004920:	9303      	str	r3, [sp, #12]
 8004922:	9b03      	ldr	r3, [sp, #12]
 8004924:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004926:	9b01      	ldr	r3, [sp, #4]
 8004928:	f383 8809 	msr	PSP, r3
}
 800492c:	bf00      	nop
 800492e:	2300      	movs	r3, #0
 8004930:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004932:	9b02      	ldr	r3, [sp, #8]
 8004934:	f383 8811 	msr	BASEPRI, r3
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
}
 800493c:	bf00      	nop
#endif

    /* Restoring the normal interrupts status.*/
    port_unlock_from_isr();
  }
}
 800493e:	bf00      	nop
 8004940:	b004      	add	sp, #16
 8004942:	4770      	bx	lr
	...

08004950 <port_init>:
 *
 * @param[in, out] oip  pointer to the @p os_instance_t structure
 *
 * @notapi
 */
void port_init(os_instance_t *oip) {
 8004950:	b500      	push	{lr}
 8004952:	b085      	sub	sp, #20
 8004954:	9001      	str	r0, [sp, #4]
 8004956:	2330      	movs	r3, #48	@ 0x30
 8004958:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800495a:	9b03      	ldr	r3, [sp, #12]
 800495c:	f383 8811 	msr	BASEPRI, r3
}
 8004960:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004962:	b662      	cpsie	i
}
 8004964:	bf00      	nop
}
 8004966:	bf00      	nop

  /* Starting in a known IRQ configuration.*/
  port_suspend();

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 8004968:	2003      	movs	r0, #3
 800496a:	f7ff ff89 	bl	8004880 <__NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800496e:	4b0f      	ldr	r3, [pc, #60]	@ (80049ac <port_init+0x5c>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	4a0e      	ldr	r2, [pc, #56]	@ (80049ac <port_init+0x5c>)
 8004974:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004978:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
 800497a:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <port_init+0x60>)
 800497c:	4a0d      	ldr	r2, [pc, #52]	@ (80049b4 <port_init+0x64>)
 800497e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004982:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <port_init+0x60>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a0a      	ldr	r2, [pc, #40]	@ (80049b0 <port_init+0x60>)
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 800498e:	2102      	movs	r1, #2
 8004990:	f06f 0004 	mvn.w	r0, #4
 8004994:	f7ff ff94 	bl	80048c0 <__NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 8004998:	2103      	movs	r1, #3
 800499a:	f06f 0001 	mvn.w	r0, #1
 800499e:	f7ff ff8f 	bl	80048c0 <__NVIC_SetPriority>

#if (PORT_ENABLE_GUARD_PAGES == TRUE) || (PORT_USE_SYSCALL == TRUE)
  /* MPU is enabled.*/
  mpuEnable(MPU_CTRL_PRIVDEFENA);
#endif
}
 80049a2:	bf00      	nop
 80049a4:	b005      	add	sp, #20
 80049a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80049aa:	bf00      	nop
 80049ac:	e000edf0 	.word	0xe000edf0
 80049b0:	e0001000 	.word	0xe0001000
 80049b4:	c5acce55 	.word	0xc5acce55
	...

080049c0 <__port_irq_epilogue>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
 80049c0:	b500      	push	{lr}
 80049c2:	b087      	sub	sp, #28
 80049c4:	2330      	movs	r3, #48	@ 0x30
 80049c6:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80049c8:	9b03      	ldr	r3, [sp, #12]
 80049ca:	f383 8811 	msr	BASEPRI, r3
}
 80049ce:	bf00      	nop
}
 80049d0:	bf00      	nop
}
 80049d2:	bf00      	nop

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80049d4:	4b18      	ldr	r3, [pc, #96]	@ (8004a38 <__port_irq_epilogue+0x78>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d020      	beq.n	8004a22 <__port_irq_epilogue+0x62>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80049e0:	f3ef 8309 	mrs	r3, PSP
 80049e4:	9301      	str	r3, [sp, #4]
  return(result);
 80049e6:	9b01      	ldr	r3, [sp, #4]
        lctxp->control = control;
        lctxp->ectxp   = (struct port_extctx *)psp;
      }
    }
#else
    s_psp = __get_PSP();
 80049e8:	9305      	str	r3, [sp, #20]
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 80049ea:	9b05      	ldr	r3, [sp, #20]
 80049ec:	3b20      	subs	r3, #32
 80049ee:	9305      	str	r3, [sp, #20]

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;
 80049f0:	9b05      	ldr	r3, [sp, #20]
 80049f2:	9304      	str	r3, [sp, #16]

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 80049f4:	9b04      	ldr	r3, [sp, #16]
 80049f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049fa:	61da      	str	r2, [r3, #28]
 80049fc:	9b05      	ldr	r3, [sp, #20]
 80049fe:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004a00:	9b02      	ldr	r3, [sp, #8]
 8004a02:	f383 8809 	msr	PSP, r3
}
 8004a06:	bf00      	nop
    /* Writing back the modified S-PSP value.*/
    __set_PSP(s_psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8004a08:	f7ff f922 	bl	8003c50 <chSchIsPreemptionRequired>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <__port_irq_epilogue+0x5a>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8004a12:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <__port_irq_epilogue+0x7c>)
 8004a14:	9b04      	ldr	r3, [sp, #16]
 8004a16:	619a      	str	r2, [r3, #24]
      ectxp->pc = (uint32_t)__port_exit_from_isr;
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
 8004a18:	e00b      	b.n	8004a32 <__port_irq_epilogue+0x72>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8004a1a:	4a09      	ldr	r2, [pc, #36]	@ (8004a40 <__port_irq_epilogue+0x80>)
 8004a1c:	9b04      	ldr	r3, [sp, #16]
 8004a1e:	619a      	str	r2, [r3, #24]
    return;
 8004a20:	e007      	b.n	8004a32 <__port_irq_epilogue+0x72>
 8004a22:	2300      	movs	r3, #0
 8004a24:	9300      	str	r3, [sp, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004a26:	9b00      	ldr	r3, [sp, #0]
 8004a28:	f383 8811 	msr	BASEPRI, r3
}
 8004a2c:	bf00      	nop
}
 8004a2e:	bf00      	nop
}
 8004a30:	bf00      	nop
  }
  port_unlock_from_isr();
}
 8004a32:	b007      	add	sp, #28
 8004a34:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a38:	e000ed00 	.word	0xe000ed00
 8004a3c:	080003e3 	.word	0x080003e3
 8004a40:	080003e6 	.word	0x080003e6
	...

08004a50 <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 8004a50:	b082      	sub	sp, #8
 8004a52:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 8004a54:	4b03      	ldr	r3, [pc, #12]	@ (8004a64 <chRegSetThreadName+0x14>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	9a01      	ldr	r2, [sp, #4]
 8004a5a:	61da      	str	r2, [r3, #28]
#else
  (void)name;
#endif
}
 8004a5c:	bf00      	nop
 8004a5e:	b002      	add	sp, #8
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	24000100 	.word	0x24000100
	...

08004a70 <chEvtRegisterMask>:
 *
 * @api
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {
 8004a70:	b500      	push	{lr}
 8004a72:	b085      	sub	sp, #20
 8004a74:	9003      	str	r0, [sp, #12]
 8004a76:	9102      	str	r1, [sp, #8]
 8004a78:	9201      	str	r2, [sp, #4]

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8004a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a7e:	9a01      	ldr	r2, [sp, #4]
 8004a80:	9902      	ldr	r1, [sp, #8]
 8004a82:	9803      	ldr	r0, [sp, #12]
 8004a84:	f7ff fd44 	bl	8004510 <chEvtRegisterMaskWithFlags>
}
 8004a88:	bf00      	nop
 8004a8a:	b005      	add	sp, #20
 8004a8c:	f85d fb04 	ldr.w	pc, [sp], #4

08004a90 <chEvtRegister>:
 *
 * @api
 */
static inline void chEvtRegister(event_source_t *esp,
                                 event_listener_t *elp,
                                 eventid_t event) {
 8004a90:	b500      	push	{lr}
 8004a92:	b085      	sub	sp, #20
 8004a94:	9003      	str	r0, [sp, #12]
 8004a96:	9102      	str	r1, [sp, #8]
 8004a98:	9201      	str	r2, [sp, #4]

  chEvtRegisterMask(esp, elp, EVENT_MASK(event));
 8004a9a:	9b01      	ldr	r3, [sp, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	9902      	ldr	r1, [sp, #8]
 8004aa6:	9803      	ldr	r0, [sp, #12]
 8004aa8:	f7ff ffe2 	bl	8004a70 <chEvtRegisterMask>
}
 8004aac:	bf00      	nop
 8004aae:	b005      	add	sp, #20
 8004ab0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004ac0 <can_rx>:
/*
 * Receiver thread.
 */
static THD_WORKING_AREA(can_rx1_wa, 256);
static THD_WORKING_AREA(can_rx2_wa, 256);
static THD_FUNCTION(can_rx, p) {
 8004ac0:	b500      	push	{lr}
 8004ac2:	b09b      	sub	sp, #108	@ 0x6c
 8004ac4:	9001      	str	r0, [sp, #4]
  struct can_instance *cip = p;
 8004ac6:	9b01      	ldr	r3, [sp, #4]
 8004ac8:	9319      	str	r3, [sp, #100]	@ 0x64
  event_listener_t el;
  CANRxFrame rxmsg;

  (void)p;
  chRegSetThreadName("receiver");
 8004aca:	481b      	ldr	r0, [pc, #108]	@ (8004b38 <can_rx+0x78>)
 8004acc:	f7ff ffc0 	bl	8004a50 <chRegSetThreadName>
  chEvtRegister(&cip->canp->rxfull_event, &el, 0);
 8004ad0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3318      	adds	r3, #24
 8004ad6:	a914      	add	r1, sp, #80	@ 0x50
 8004ad8:	2200      	movs	r2, #0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff ffd8 	bl	8004a90 <chEvtRegister>
  while (true) {
    if (chEvtWaitAnyTimeout(ALL_EVENTS, TIME_MS2I(100)) == 0)
 8004ae0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ae8:	f7ff fd8a 	bl	8004600 <chEvtWaitAnyTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d020      	beq.n	8004b34 <can_rx+0x74>
      continue;
    while (canReceive(cip->canp, CAN_ANY_MAILBOX,
 8004af2:	e014      	b.n	8004b1e <can_rx+0x5e>
                      &rxmsg, TIME_I2MS(100)) == MSG_OK) {
      /* Process message.*/
      palToggleLine(cip->led);
 8004af4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 030f 	bic.w	r3, r3, #15
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	2101      	movs	r1, #1
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8004b0e:	6849      	ldr	r1, [r1, #4]
 8004b10:	f021 010f 	bic.w	r1, r1, #15
 8004b14:	4053      	eors	r3, r2
 8004b16:	614b      	str	r3, [r1, #20]
      chThdSleepMilliseconds(10);
 8004b18:	2064      	movs	r0, #100	@ 0x64
 8004b1a:	f7ff fbb1 	bl	8004280 <chThdSleep>
    while (canReceive(cip->canp, CAN_ANY_MAILBOX,
 8004b1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	aa02      	add	r2, sp, #8
 8004b24:	230a      	movs	r3, #10
 8004b26:	2100      	movs	r1, #0
 8004b28:	f7fc fa3a 	bl	8000fa0 <canReceiveTimeout>
 8004b2c:	4603      	mov	r3, r0
                      &rxmsg, TIME_I2MS(100)) == MSG_OK) {
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0e0      	beq.n	8004af4 <can_rx+0x34>
 8004b32:	e7d5      	b.n	8004ae0 <can_rx+0x20>
      continue;
 8004b34:	bf00      	nop
    if (chEvtWaitAnyTimeout(ALL_EVENTS, TIME_MS2I(100)) == 0)
 8004b36:	e7d3      	b.n	8004ae0 <can_rx+0x20>
 8004b38:	08004e74 	.word	0x08004e74
 8004b3c:	00000000 	.word	0x00000000

08004b40 <can_tx>:

/*
 * Transmitter thread.
 */
static THD_WORKING_AREA(can_tx_wa, 512);
static THD_FUNCTION(can_tx, p) {
 8004b40:	b500      	push	{lr}
 8004b42:	b095      	sub	sp, #84	@ 0x54
 8004b44:	9001      	str	r0, [sp, #4]
  CANTxFrame txmsg1;

  (void)p;
  chRegSetThreadName("transmitter");
 8004b46:	4819      	ldr	r0, [pc, #100]	@ (8004bac <can_tx+0x6c>)
 8004b48:	f7ff ff82 	bl	8004a50 <chRegSetThreadName>
  txmsg1.ext.EID = 0x01234567;
 8004b4c:	9b02      	ldr	r3, [sp, #8]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	@ (8004bb0 <can_tx+0x70>)
 8004b50:	f362 031c 	bfi	r3, r2, #0, #29
 8004b54:	9302      	str	r3, [sp, #8]
  txmsg1.common.XTD = 1;  /* Extended ID. */
 8004b56:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b5e:	f88d 300b 	strb.w	r3, [sp, #11]
  txmsg1.DLC = FDCAN_8BYTES_TO_DLC;
 8004b62:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004b66:	2208      	movs	r2, #8
 8004b68:	f362 0303 	bfi	r3, r2, #0, #4
 8004b6c:	f88d 300e 	strb.w	r3, [sp, #14]
#if defined USE_CAN_PROTOCOL
  txmsg1.FDF = 0;         /* CAN frame format. */
 8004b70:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004b74:	f023 0320 	bic.w	r3, r3, #32
 8004b78:	f88d 300e 	strb.w	r3, [sp, #14]
#else
  txmsg1.FDF = 1;         /* FDCAN frame format. */
#endif
  txmsg1.data32[0] = 0x55AA55AA;
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <can_tx+0x74>)
 8004b7e:	9304      	str	r3, [sp, #16]
  txmsg1.data32[1] = 0x00FF00FF;
 8004b80:	f04f 13ff 	mov.w	r3, #16711935	@ 0xff00ff
 8004b84:	9305      	str	r3, [sp, #20]

  while (true) {
    canTransmit(&CAND1, CAN_ANY_MAILBOX, &txmsg1, TIME_IMMEDIATE);
 8004b86:	aa02      	add	r2, sp, #8
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	480a      	ldr	r0, [pc, #40]	@ (8004bb8 <can_tx+0x78>)
 8004b8e:	f7fc f9cf 	bl	8000f30 <canTransmitTimeout>
    canTransmit(&CAND2, CAN_ANY_MAILBOX, &txmsg1, TIME_IMMEDIATE);
 8004b92:	aa02      	add	r2, sp, #8
 8004b94:	2300      	movs	r3, #0
 8004b96:	2100      	movs	r1, #0
 8004b98:	4808      	ldr	r0, [pc, #32]	@ (8004bbc <can_tx+0x7c>)
 8004b9a:	f7fc f9c9 	bl	8000f30 <canTransmitTimeout>
    chThdSleepMilliseconds(500);
 8004b9e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004ba2:	f7ff fb6d 	bl	8004280 <chThdSleep>
    canTransmit(&CAND1, CAN_ANY_MAILBOX, &txmsg1, TIME_IMMEDIATE);
 8004ba6:	bf00      	nop
 8004ba8:	e7ed      	b.n	8004b86 <can_tx+0x46>
 8004baa:	bf00      	nop
 8004bac:	08004e80 	.word	0x08004e80
 8004bb0:	01234567 	.word	0x01234567
 8004bb4:	55aa55aa 	.word	0x55aa55aa
 8004bb8:	24000000 	.word	0x24000000
 8004bbc:	24000038 	.word	0x24000038

08004bc0 <main>:
}

/*
 * Application entry point.
 */
int main(void) {
 8004bc0:	b500      	push	{lr}
 8004bc2:	b083      	sub	sp, #12
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 8004bc4:	f7fb fd34 	bl	8000630 <halInit>
  chSysInit();
 8004bc8:	f7fe f98a 	bl	8002ee0 <chSysInit>

  /*
   * Activates the CAN drivers 1 and 2.
   */
  canStart(&CAND1, &cancfg);
 8004bcc:	4913      	ldr	r1, [pc, #76]	@ (8004c1c <main+0x5c>)
 8004bce:	4814      	ldr	r0, [pc, #80]	@ (8004c20 <main+0x60>)
 8004bd0:	f7fc f98e 	bl	8000ef0 <canStart>
  canStart(&CAND2, &cancfg);
 8004bd4:	4911      	ldr	r1, [pc, #68]	@ (8004c1c <main+0x5c>)
 8004bd6:	4813      	ldr	r0, [pc, #76]	@ (8004c24 <main+0x64>)
 8004bd8:	f7fc f98a 	bl	8000ef0 <canStart>

  /*
   * Starting the transmitter and receiver threads.
   */
  chThdCreateStatic(can_rx1_wa, sizeof(can_rx1_wa), NORMALPRIO + 7,
 8004bdc:	4b12      	ldr	r3, [pc, #72]	@ (8004c28 <main+0x68>)
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	4b12      	ldr	r3, [pc, #72]	@ (8004c2c <main+0x6c>)
 8004be2:	2287      	movs	r2, #135	@ 0x87
 8004be4:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8004be8:	4811      	ldr	r0, [pc, #68]	@ (8004c30 <main+0x70>)
 8004bea:	f7ff fab9 	bl	8004160 <chThdCreateStatic>
                    can_rx, (void *)&can1);
  chThdCreateStatic(can_rx2_wa, sizeof(can_rx2_wa), NORMALPRIO + 7,
 8004bee:	4b11      	ldr	r3, [pc, #68]	@ (8004c34 <main+0x74>)
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8004c2c <main+0x6c>)
 8004bf4:	2287      	movs	r2, #135	@ 0x87
 8004bf6:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8004bfa:	480f      	ldr	r0, [pc, #60]	@ (8004c38 <main+0x78>)
 8004bfc:	f7ff fab0 	bl	8004160 <chThdCreateStatic>
                    can_rx, (void *)&can2);
  chThdCreateStatic(can_tx_wa, sizeof(can_tx_wa), NORMALPRIO + 7,
 8004c00:	2300      	movs	r3, #0
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	4b0d      	ldr	r3, [pc, #52]	@ (8004c3c <main+0x7c>)
 8004c06:	2287      	movs	r2, #135	@ 0x87
 8004c08:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 8004c0c:	480c      	ldr	r0, [pc, #48]	@ (8004c40 <main+0x80>)
 8004c0e:	f7ff faa7 	bl	8004160 <chThdCreateStatic>

  /*
   * Normal main() thread activity, in this demo it does nothing.
   */
  while (true) {
    chThdSleepMilliseconds(500);
 8004c12:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004c16:	f7ff fb33 	bl	8004280 <chThdSleep>
 8004c1a:	e7fa      	b.n	8004c12 <main+0x52>
 8004c1c:	08004edc 	.word	0x08004edc
 8004c20:	24000000 	.word	0x24000000
 8004c24:	24000038 	.word	0x24000038
 8004c28:	08004ecc 	.word	0x08004ecc
 8004c2c:	08004ac1 	.word	0x08004ac1
 8004c30:	24000b30 	.word	0x24000b30
 8004c34:	08004ed4 	.word	0x08004ed4
 8004c38:	24000d20 	.word	0x24000d20
 8004c3c:	08004b41 	.word	0x08004b41
 8004c40:	24000f10 	.word	0x24000f10
